<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>寒玉 Blog - ava</title><link href="xixuebin.github.io/" rel="alternate"></link><link href="xixuebin.github.io/feeds/ava.atom.xml" rel="self"></link><id>xixuebin.github.io/</id><updated>2019-04-28T09:33:40+08:00</updated><entry><title>Java线程池原理及简单介绍</title><link href="xixuebin.github.io/2019-04-28-093340-ch.html" rel="alternate"></link><published>2019-04-28T09:33:40+08:00</published><updated>2019-04-28T09:33:40+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-28:xixuebin.github.io/2019-04-28-093340-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;线程池简介&lt;/h1&gt;
&lt;p&gt;多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元的闲置时间，增加处理器单元的吞吐能力。
    假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。
    如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。
                一个线程池包括以下四个基本组成部分：
                1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；
                2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；
                3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；
                4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。
线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。&lt;/p&gt;
&lt;h2&gt;继承体系&lt;/h2&gt;
&lt;h2&gt;原理分析&lt;/h2&gt;
&lt;h3&gt;核心参数分析&lt;/h3&gt;
&lt;h3&gt;线程创建规则&lt;/h3&gt;
&lt;h3&gt;资源回收&lt;/h3&gt;
&lt;h3&gt;排队策略&lt;/h3&gt;
&lt;h3&gt;拒绝策略&lt;/h3&gt;
&lt;h3&gt;提交任务&lt;/h3&gt;
&lt;h3&gt;关闭线程池&lt;/h3&gt;
&lt;h2&gt;几种线程池&lt;/h2&gt;
&lt;h1&gt;重要操作&lt;/h1&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.tencent.com/developer/article/1109643"&gt;Java线程池原理分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category></entry></feed>