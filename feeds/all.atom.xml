<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>寒玉 Blog</title><link href="xixuebin.github.io/" rel="alternate"></link><link href="xixuebin.github.io/feeds/all.atom.xml" rel="self"></link><id>xixuebin.github.io/</id><updated>2017-12-04T17:48:43+08:00</updated><entry><title>Superset</title><link href="xixuebin.github.io/superset-ch.html" rel="alternate"></link><published>2017-12-04T17:48:43+08:00</published><updated>2017-12-04T17:48:43+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-04:xixuebin.github.io/superset-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;xixuebin&lt;/h2&gt;</content><category term="superset"></category></entry><entry><title>Kafka背景及架构介绍</title><link href="xixuebin.github.io/kafka-01-ch.html" rel="alternate"></link><published>2017-12-04T15:50:01+08:00</published><updated>2017-12-04T15:50:01+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-04:xixuebin.github.io/kafka-01-ch.html</id><summary type="html"></summary><content type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#%E6%91%98%E8%A6%81"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kafka%E7%AE%80%E4%BB%8B"&gt;Kafka简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h2&gt;摘要&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka是由LinkedIn开发并开源的分布式消息系统，因其分布式及高吞吐率而被广泛使用，现已与Cloudera Hadoop，Apache Storm，Apache Spark集成。本文介绍了Kafka的创建背景，设计目标，使用消息系统的优势以及目前流行的消息系统对比。并介绍了Kafka的架构，Producer消息路由，Consumer Group以及由其实现的不同消息分发方式，Topic &amp;amp; Partition，最后介绍了Kafka Consumer为何使用pull模式以及Kafka提供的三种delivery guarantee。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Kafka简介&lt;/h2&gt;
&lt;p&gt;kafka是一种分布式的,基于发布/订阅的消息系统.主要的设计目标如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以时间复杂度为O(1)的方式提供消息持久化能力,即使对TB级以上数据也能保证常数时间复杂度的性能访问.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jasongj.com/2015/03/10/KafkaColumn1/"&gt;http://www.jasongj.com/2015/03/10/KafkaColumn1/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="kafka"></category></entry><entry><title>GIT</title><link href="xixuebin.github.io/git-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/git-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;GIT常用命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;远程仓库命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检出远程仓库 &lt;code&gt;git clone git://github/jquery/jquery.git&lt;/code&gt;
查看远程仓库 &lt;code&gt;git remote -v&lt;/code&gt;
添加远程仓库 &lt;code&gt;git remote add [name] [url]&lt;/code&gt;
删除远程仓库 &lt;code&gt;git remote rm [name]&lt;/code&gt;
修改远程仓库 &lt;code&gt;git remote set-url --push[name][newUrl]&lt;/code&gt;
拉取远程仓库 &lt;code&gt;git pull [remoteName][localBranchName]&lt;/code&gt;
推送远程仓库 &lt;code&gt;git push [remoteName][localBranchName]&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;aaa&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset --soft 83ab9932edbe2b78f88668b7d15061747bb5514f
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>Google Gunice</title><link href="xixuebin.github.io/google-gunice-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/google-gunice-ch.html</id><summary type="html"></summary><content type="html">&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-guice"&gt;Google Guice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#guice%E6%A6%82%E8%BF%B0"&gt;Guice概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice%E7%89%B9%E7%82%B9"&gt;Guice特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5"&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice%E6%96%87%E6%A1%A3"&gt;Guice文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice-vs-spring"&gt;Guice vs Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#this-is-a-test"&gt;this is a test!&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Google Guice&lt;/h1&gt;
&lt;p&gt;Guice是google开源的一个依赖注入类库,相比Spring Ioc来说更小更快,Elasticsearch,Druid大量使用了Guice.&lt;/p&gt;
&lt;h2&gt;Guice概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Guice是google开源的依赖注入类库,通过Guice减少了对工厂方法和new的使用,使得代码更容易交付,测试和重用&lt;/li&gt;
&lt;li&gt;Guice可以帮助我们更好地设计API,它是一个轻量级的非侵入式的类库&lt;/li&gt;
&lt;li&gt;对开发友好,当异常发生的时候能提供更多有用的信息用于分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注入定义简单&lt;/li&gt;
&lt;li&gt;支持多种注入方式&lt;/li&gt;
&lt;li&gt;可扩展&lt;/li&gt;
&lt;li&gt;效率高&lt;/li&gt;
&lt;li&gt;自定义注解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最佳实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最小化可变性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;尽可能注入的是不可变对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只注入直接依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不用注入一个实例来获取真正需要的实例,增加复杂性且不易测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;避免循环依赖&lt;/li&gt;
&lt;li&gt;避免静态状态&lt;/li&gt;
&lt;li&gt;采用@Nullable&lt;/li&gt;
&lt;li&gt;模块的处理必须要快并且无副作用&lt;/li&gt;
&lt;li&gt;在Providers绑定中当心IO问题&lt;/li&gt;
&lt;li&gt;不用在模块中处理分支模块&lt;/li&gt;
&lt;li&gt;尽可能不要暴露构造器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/guice/wiki/Motivation"&gt;用户指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://google.github.io/guice/api-docs/4.0/javadoc/index.html"&gt;最新版API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hBVJbzAagfs"&gt;Bob Lee视频教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice vs Spring&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="left"&gt;Spring&lt;/th&gt;
&lt;th align="left"&gt;Guice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;使用xml&lt;/td&gt;
&lt;td align="left"&gt;使用将类与类之间的关系隔离到xml中，由容器负责注入被调用的对象，因此叫做依赖注入&lt;/td&gt;
&lt;td align="left"&gt;不使用xml,将类与类之间的关系隔离到Module中，声名何处需要注入，由容器根据Module里的描述，注入被调用的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;使用Annotation&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;使用支持自定义Annotation标注，对于相同的接口定义的对象引用，为它们标注上不同的自定义Annotation注释，就可以达到同一个类里边的同一个接口的引用，注射给不同的实现，在Module里用标注做区分，灵活性大大增加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;运行效率&lt;/td&gt;
&lt;td align="left"&gt;装载spring配置文件时，需解析xml，效率低，getBean效率也不高，不过使用环境不会涉及到getBean，只有生产环境的时候会用到getBean,在装载spring应用程序的时候，已经完成全部的注射，所以这个低效率的问题不是问题&lt;/td&gt;
&lt;td align="left"&gt;使用Annotation，cglib, 效率高与spring最明显的一个区别，spring是在装载spring配置文件的时候把该注入的地方都注入完，而Guice呢，则是在使用的时候去注射，运行效率和灵活性高。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;类耦合度&lt;/td&gt;
&lt;td align="left"&gt;耦合度低，强调类非侵入，以外部化的方式处理依赖关系，类里边是很干净的，在配置文件里做文章，对类的依赖性极低。&lt;/td&gt;
&lt;td align="left"&gt;耦合度低，强调类非侵入，以外部化的方式处理依赖关系，类里边是很干净的，在配置文件里做文章，对类的依赖性极低。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;类编写时&lt;/td&gt;
&lt;td align="left"&gt;需要编写xml，配置Bean，配置注入&lt;/td&gt;
&lt;td align="left"&gt;只需声明为@inject,等着被注入,最后在统一的Module里声明注入方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;仅支持IOC&lt;/td&gt;
&lt;td align="left"&gt;否，spring目前已经涉猎很多部分&lt;/td&gt;
&lt;td align="left"&gt;是，目前仅仅是个DI容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;是否易于代码重构&lt;/td&gt;
&lt;td align="left"&gt;统一的xml配置入口，更改容易&lt;/td&gt;
&lt;td align="left"&gt;配置工作是在Module里进行，和spring异曲同功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;配置复杂度&lt;/td&gt;
&lt;td align="left"&gt;在xml中定位类与类之间的关系,难度低&lt;/td&gt;
&lt;td align="left"&gt;代码级定位类与类之间的关系,难度稍高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;this is a test!&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xixuebin&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.it168.com/zt/guice/"&gt;http://tech.it168.com/zt/guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ginobefunny.com/post/learning_guice/"&gt;http://ginobefunny.com/post/learning_guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hao.jobbole.com/guice/"&gt;http://hao.jobbole.com/guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greengerong/guice-demo"&gt;https://github.com/greengerong/guice-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.itpub.net/13270562/viewspace-217874/"&gt;http://blog.itpub.net/13270562/viewspace-217874/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="gunice"></category></entry><entry><title>HADOOP ML</title><link href="xixuebin.github.io/hadoop-ml-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/hadoop-ml-ch.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;机器学习&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;机器学习是人工智能的一个分支.人工智能的研究是以推理为重点到以知识为重点,再到以学习为重点.一条自然清晰的脉络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;机器学习是一门人工智能的科学,该领域&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;监督式学习&lt;/li&gt;
&lt;li&gt;非监督式学习&lt;/li&gt;
&lt;li&gt;半监督式学习&lt;/li&gt;
&lt;li&gt;强化学习&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;算法类似性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回归算法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最小二乘法,逻辑回归,逐步式回归,多元自适应回归样条,本地散点平滑评估&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于实例的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;KNN,学习矢量量化,自组织映射算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;正则化方法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Ridge regression,Least Absolute Shrinkage and Selection Operator(LASSO) 以及弹性网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;决策树学习法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通常用于解决分类和回归 常见算法:CART,ID3,C4.5,CHAID,Decision Stump,随机森林(Random Forest), 多元自适应回归样条以及梯度推进(GBM)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;贝叶斯算法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基于贝叶斯定理的一类算法,解决分类和回归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于核的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基于核的算法,最著名的就是SVM,基于核的算法,把输入数据映射到一个高阶向量空间,在高阶向量空间里,有些分类或者回归很容易解决.常见算法 svm, 径向机基函数,线性判断分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚类算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联规则学习&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人工神经网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度学习&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降维算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="hadoop"></category><category term="ml"></category></entry><entry><title>HBASE oldWALs</title><link href="xixuebin.github.io/hbase-oldwals-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/hbase-oldwals-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;HBASE oldWALs目录过大&lt;/h2&gt;
&lt;p&gt;最近升级了线上的hbase集群,一切运行良好.这两天发现集群的oldWALs目录一直在增大,与hbase的官方说法不一致.导致线上集群一直在存储报警&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;dev@ip-10-12-134-13 ~&lt;span class="o"&gt;]&lt;/span&gt;$ hadoop fs -du -h /hbase
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/.tmp
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/MasterProcWALs
&lt;span class="m"&gt;52&lt;/span&gt;.9 G   &lt;span class="m"&gt;109&lt;/span&gt;.5 G  /hbase/WALs
&lt;span class="m"&gt;103&lt;/span&gt;.6 G  &lt;span class="m"&gt;207&lt;/span&gt;.2 G  /hbase/archive
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/corrupt
&lt;span class="m"&gt;56&lt;/span&gt;.2 T   &lt;span class="m"&gt;112&lt;/span&gt;.4 T  /hbase/data
&lt;span class="m"&gt;42&lt;/span&gt;       &lt;span class="m"&gt;126&lt;/span&gt;      /hbase/hbase.id
&lt;span class="m"&gt;7&lt;/span&gt;        &lt;span class="m"&gt;21&lt;/span&gt;       /hbase/hbase.version
&lt;span class="m"&gt;3&lt;/span&gt;.0 T    &lt;span class="m"&gt;5&lt;/span&gt;.9 T    /hbase/oldWALs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询了许多资料,都说跟hbase的replication有关.因为我们确实开启了hbase的replication配置.但是根据replication相关资料我确认replication只跟WALs相关,不应该会影响oldWALs,所以进行了研究.&lt;/p&gt;
&lt;p&gt;经过验证当我关闭掉replication的时候,master会去删除oldWALs目录下的文件.&lt;/p&gt;
&lt;p&gt;但是为了保证线上集群数据的安全,我们必须开启replication,这样oldWALs还是一直会变大.&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mattshma/bigdata/issues/3"&gt;HBase oldWALs 目录过大&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cloudera.com/blog/2013/10/what-are-hbase-znodes/"&gt;What are HBase znodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://community.cloudera.com/t5/Storage-Random-Access-HDFS/The-folder-hbase-s-oldWALs-is-so-large-in-CDH5-3-2-amp-CM5-3-2/td-p/35564"&gt;The folder hbase's oldWALs is so large in CDH5.3.2 &amp;amp; CM5.3.2, how to clean?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://talat.uyarer.com/post/113414182956/hbase-oldwals-directory-what-is-it-when-is-it"&gt;Hbase oldWALs directory: what is it, when is it cleaned and who use its ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="HBASE"></category><category term="BigData"></category></entry><entry><title>JAVA JMX</title><link href="xixuebin.github.io/java-jmx-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/java-jmx-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;JMX的定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JMX(JAVA Management Extensions)是一个为应用程序植入管理功能的框架.JMX是一套标准的代理服务,实际上,用户可以在任何java应用程序中使用这些代理和服务实现管理.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;jmx 架构图&lt;/h3&gt;
&lt;p&gt;&lt;img alt="jmx architecture" src="/images/jmx01.png" title="jmx 架构图"&gt;&lt;/p&gt;
&lt;p&gt;jmx的结构一共分为三层:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是mbean,被管理的资源,mbean分为四种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;类型&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;standard Mbean&lt;/td&gt;
&lt;td align="left"&gt;这种类型的bean最简单,它管理的资源(包括属性,方法,时间)必须定义在接口中,然后mbean必须实现这个接口,命名必须遵循一定的规范,如mbean为hello,接口必须为HelloMbean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;dynamic Mbean&lt;/td&gt;
&lt;td align="left"&gt;必须实现javax.management.DynamiceMBean接口所有的属性,方法都在运行时候定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;open MBean&lt;/td&gt;
&lt;td align="left"&gt;此MBean的规范还在完善,正在改进中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;model MBean&lt;/td&gt;
&lt;td align="left"&gt;与标准和动态MBean相比，你可以不用写MBean类，只需使用javax.management.modelmbean.RequiredModelMBean即可。RequiredModelMBean实现了ModelMBean接口，而ModelMBean扩展了DynamicMBean接口，因此与DynamicMBean相似，Model MBean的管理资源也是在运行时定义的。与DynamicMBean不同的是，DynamicMBean管理的资源一般定义在DynamicMBean中（运行时才决定管理那些资源），而model MBean管理的资源并不在MBean中，而是在外部（通常是一个类），只有在运行时，才通过set方法将其加入到model MBean中。后面的例子会有详细介绍&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;适配层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MBeanServer,主要提供对资源的注册和管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;接入层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;提供远程访问的入口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/dongguacai/p/5900507.html"&gt;http://www.cnblogs.com/dongguacai/p/5900507.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jmx"></category></entry><entry><title>JAVA Solr</title><link href="xixuebin.github.io/java-solr-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/java-solr-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Solr&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Solr 是一个功能强大的搜素服务器,它支持Rest风格的API.Solr是基于Lucene的.Lucene支持强大的匹配能力,如短语,通配符,链接,分组和更多不同类型的数据.它使用Zookeeper特别针对高流量进行优化.Apache Solr提供各种各式各样的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先进的全文检索功能&lt;/li&gt;
&lt;li&gt;XML,JSON和HTTP 基于开放接口标准&lt;/li&gt;
&lt;li&gt;高度课扩展和容错&lt;/li&gt;
&lt;li&gt;同时支持模式和无模式的支持&lt;/li&gt;
&lt;li&gt;分页搜索和过滤&lt;/li&gt;
&lt;li&gt;支持多种语言&lt;/li&gt;
&lt;li&gt;丰富的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install Solr&lt;/h2&gt;
&lt;p&gt;从以下位置下载最新版本的Apache Solr:
&lt;a href="http://lucene.apache.org/solr/downloads.html"&gt;http://lucene.apache.org/solr/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下载到的是solr-6.6.0版本&lt;/p&gt;
&lt;p&gt;安装的话直接解压即可,该版本需要JDK8支持&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -zxf solr-6.6.0.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。&lt;/p&gt;
&lt;p&gt;启动Solr&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr# ./bin/solr start -force
Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-&lt;span class="o"&gt;]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12376&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过该地址访问
&lt;a href="http://localhost:8983/solr/"&gt;http://localhost:8983/solr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;访问截图&lt;/p&gt;
&lt;p&gt;![截图](solr02.png Solr控制台)&lt;/p&gt;
&lt;h2&gt;Solr原理&lt;/h2&gt;
&lt;p&gt;Solr对外提供标准的HTTP接口来实现对数据索引的增加,删除,修改和查询.在Solr中,用户通过向部署在servlet容器中的Solr Web应用程序发送HTTP请求来启动索引和搜索.Solr接收请求,确定要使用的适当的SolrRequestHandler,然后处理请求.通过HTTP以同样的方式返回响应.默认配置返回Solr的标准XML响应,也可以配置Solr的备用响应格式.&lt;/p&gt;
&lt;p&gt;可以向Solr索引servlet传递四个不同的索引请求
- add/update 允许向Solr添加文档或者更新文档.直到提交后才能搜索到这些添加的更新
- commint 告诉Solr应该使上次提交以来所做的所有的更改都可以被搜索到
- optimize 重构Lucene的文件以改进搜索性能.索引完成周执行一下优化通常比较好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果更新比较频繁,则应该使用频率较低的时候安排优化,一个索引无需优化也可以运行,优化是一个耗时较多的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;delete可以通过id或查询来指定.按id删除将删除具有指定id的文档;按查询删除将删除查询返回的所有的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个典型的Add请求报文&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;add&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;TWINX2048-3200PRO&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CORSAIR  XMS 2GB (2 x 1GB) 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) Dual Channel Kit System Memory - Retail&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Corsair Microsystems Inc.&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;electronics&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;memory&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CAS latency 2, 2-3-3-6 timing, 2.75v, unbuffered, heat-spreader&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;185&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popularity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inStock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;VS1GB400C3&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System Memory - Retail&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Corsair Microsystems Inc.&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;electronics&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;memory&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;74.99&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popularity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inStock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/add&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个典型的搜索结果报文&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;response&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*,score&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;content:&amp;quot;faceted browsing&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;result&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;response&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;numFound=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxScore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.058217&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;float&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.058217&lt;span class="nt"&gt;&amp;lt;/float&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;http://localhost/myBlog/solr-rocks-again.html&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr is Great&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;solr,lucene,enterprise,search,greatness&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like faceted browsing and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like faceted browsing and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;date&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creationDate&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2007-01-07T05:04:00.000Z&lt;span class="nt"&gt;&amp;lt;/date&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;solr,lucene,enterprise,search,greatness&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rating&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Solr is Great&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://localhost/myBlog/solr-rocks-again.html&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/result&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlighting&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost/myBlog/solr-rocks-again.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;faceted&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;browsing&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/response&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置Solr&lt;/h3&gt;
&lt;h4&gt;建立Core&lt;/h4&gt;
&lt;p&gt;Solr的服务器在独立模式启动下启动的配置称为核心(Core),当它在SolrCloud模式启动的配置称为集合.&lt;/p&gt;
&lt;p&gt;创建一个核心的索引数据,Slor的创建命令有以下选项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-c &lt;name&gt; 要创建核心或者集合的名称
    -d &lt;confdir&gt; 配置目录,在SolrCloud模式非常有用
    -n &lt;configName&gt; 配置名称.这将默认为核心或者集合的名称
    -p &lt;port&gt; 本地Solr实例的端口,发送create命令,默认脚本试图通过寻找运行Solr的实例来检测端口
    -s &lt;shards&gt; Number of shards to split a collection into ,default is  1
    -rf &lt;replicas&gt; 集合中每个文件的份数,default is 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在solr/bin运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr/bin# ./solr create -c jcg -d basic_configs -force

Copying configuration to new core instance directory:
/opt/solr/server/solr/jcg

Creating new core &lt;span class="s1"&gt;&amp;#39;jcg&amp;#39;&lt;/span&gt; using command:
http://localhost:8983/solr/admin/cores?action&lt;span class="o"&gt;=&lt;/span&gt;CREATE&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jcg&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;instanceDir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jcg

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
    &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:43042&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;jcg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Solr的页面上,可以看到JCG核心被填充在核心选择器上,还可以看到相关统计信息&lt;/p&gt;
&lt;p&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;修改Schema.xml文件&lt;/h4&gt;
&lt;p&gt;修改schema.xml，server\solr\jcg\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-5.0.0\example\exampledocs&lt;/p&gt;
&lt;p&gt;现在，我们定位到该文件夹  server\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。&lt;/p&gt;
&lt;p&gt;现在编辑\server\solr\jcg\conf\server\solr\jcg\conf\schema.xml文件，设置唯一元素后添加以下内容。&lt;/p&gt;
&lt;h4&gt;索引数据&lt;/h4&gt;
&lt;p&gt;Apache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\exampledocs可看到。&lt;/p&gt;
&lt;p&gt;现在，我们在命令行定位到example\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。&lt;/p&gt;
&lt;p&gt;Java -jar post.jar -h&lt;/p&gt;
&lt;p&gt;在一般的使用格式如下用途：&lt;/p&gt;
&lt;p&gt;Usage: java [SystemProperties] -jar post.jar [-h|-] [&lt;file|folder|url|arg&gt;&lt;/p&gt;
&lt;p&gt;[&lt;file|folder|url|arg&gt;...]]&lt;/p&gt;
&lt;p&gt;正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-5.0.0\example\exampledocs在命令提示符并发出以下命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr/example/exampledocs# java -Dtype&lt;span class="o"&gt;=&lt;/span&gt;text/csv -Durl&lt;span class="o"&gt;=&lt;/span&gt;http://localhost:8983/solr/jcg/update  -jar post.jar   books.csv
SimplePostTool version &lt;span class="m"&gt;5&lt;/span&gt;.0.0
Posting files to &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt; url http://localhost:8983/solr/jcg/update using content-type text/csv...
POSTing file books.csv to &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt;
SimplePostTool: WARNING: Solr returned an error &lt;span class="c1"&gt;#400 (Bad Request) for url: http://localhost:8983/solr/jcg/update&lt;/span&gt;
SimplePostTool: WARNING: Response: &amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;response&amp;gt;
&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&amp;gt;400&amp;lt;/int&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&amp;gt;177&amp;lt;/int&amp;gt;&amp;lt;/lst&amp;gt;&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error-class&amp;quot;&lt;/span&gt;&amp;gt;org.apache.solr.common.SolrException&amp;lt;/str&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root-error-class&amp;quot;&lt;/span&gt;&amp;gt;org.apache.solr.common.SolrException&amp;lt;/str&amp;gt;&amp;lt;/lst&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&amp;gt;ERROR: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0553573403&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; unknown field &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&amp;lt;/str&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&amp;gt;400&amp;lt;/int&amp;gt;&amp;lt;/lst&amp;gt;
&amp;lt;/response&amp;gt;
SimplePostTool: WARNING: IOException &lt;span class="k"&gt;while&lt;/span&gt; reading response: java.io.IOException: Server returned HTTP response code: &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; URL: http://localhost:8983/solr/jcg/update
&lt;span class="m"&gt;1&lt;/span&gt; files indexed.
COMMITting Solr index changes to http://localhost:8983/solr/jcg/update...
Time spent: &lt;span class="m"&gt;0&lt;/span&gt;:00:00.501
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;索引Solr的XML文件&lt;/h3&gt;
&lt;p&gt;Solr可以为各种输入格式的结构化数据建立索引。在历史上，将格式化内容导入Solr的主要格式就是Solr的XML格式[3]。很多的Solr索引器都可以将域内容转换为Solr的XML输出，通常支持直接提交的HTTP请求至Solr的/update端点。&lt;/p&gt;
&lt;p&gt;Solr支持示例数据中的几种Solr XML格式的文件。注意：示例中的科技产品的数据含有更加特定于域的配置，包括数据模式和浏览器界面。如果你想要bin/solr脚本提供对这种数据的内建支持，那么你可以运行&lt;code&gt;bin/solr start -e techproducts&lt;/code&gt;命令，这个命令不仅仅会启动Solr，而且还会为这些数据创建索引（在运行这个命令之前，请务必先运行&lt;code&gt;bin/solr stop -all&lt;/code&gt;命令）。然而，下面的示例假定使用&lt;code&gt;bin/solr start -e cloud&lt;/code&gt;命令来启动Solr，这样才能和本文中的所有示例保持一致，因此，示例使用的集合是“gettingstarted”，而不是“techproducts”。&lt;/p&gt;
&lt;p&gt;使用bin/post脚本，为示例的Solr XML文件创建索引，这些文件在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ubuntu@ubuntu:/opt/solr$ bin/solr start -e cloud -noprompt

Welcome to the SolrCloud example!

Starting up &lt;span class="m"&gt;2&lt;/span&gt; Solr nodes &lt;span class="k"&gt;for&lt;/span&gt; your example SolrCloud cluster.

Creating Solr home directory /opt/solr/example/cloud/node1/solr
Cloning /opt/solr/example/cloud/node1 into
   /opt/solr/example/cloud/node2

Starting up Solr on port &lt;span class="m"&gt;8983&lt;/span&gt; using command:
&lt;span class="s2"&gt;&amp;quot;/opt/solr/bin/solr&amp;quot;&lt;/span&gt; start -cloud -p &lt;span class="m"&gt;8983&lt;/span&gt; -s &lt;span class="s2"&gt;&amp;quot;/opt/solr/example/cloud/node1/solr&amp;quot;&lt;/span&gt;

Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17115&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!


Starting up Solr on port &lt;span class="m"&gt;7574&lt;/span&gt; using command:
&lt;span class="s2"&gt;&amp;quot;/opt/solr/bin/solr&amp;quot;&lt;/span&gt; start -cloud -p &lt;span class="m"&gt;7574&lt;/span&gt; -s &lt;span class="s2"&gt;&amp;quot;/opt/solr/example/cloud/node2/solr&amp;quot;&lt;/span&gt; -z localhost:9983

Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;7574&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;7574&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17333&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!

INFO  - &lt;span class="m"&gt;2017&lt;/span&gt;-07-06 &lt;span class="m"&gt;09&lt;/span&gt;:00:56.877&lt;span class="p"&gt;;&lt;/span&gt; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider&lt;span class="p"&gt;;&lt;/span&gt; Cluster at localhost:9983 ready

Connecting to ZooKeeper at localhost:9983 ...
INFO  - &lt;span class="m"&gt;2017&lt;/span&gt;-07-06 &lt;span class="m"&gt;09&lt;/span&gt;:00:56.997&lt;span class="p"&gt;;&lt;/span&gt; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider&lt;span class="p"&gt;;&lt;/span&gt; Cluster at localhost:9983 ready
Uploading /opt/solr/server/solr/configsets/data_driven_schema_configs/conf &lt;span class="k"&gt;for&lt;/span&gt; config gettingstarted to ZooKeeper at localhost:9983

Creating new collection &lt;span class="s1"&gt;&amp;#39;gettingstarted&amp;#39;&lt;/span&gt; using command:
http://localhost:8983/solr/admin/collections?action&lt;span class="o"&gt;=&lt;/span&gt;CREATE&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gettingstarted&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;numShards&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;replicationFactor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;maxShardsPerNode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;collection.configName&lt;span class="o"&gt;=&lt;/span&gt;gettingstarted

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
    &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:13927&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;127.0.1.1:8983_solr&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0
        &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:12395&lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gettingstarted_shard1_replica2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;127.0.1.1:7574_solr&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
        &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:12408&lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gettingstarted_shard2_replica1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}}}&lt;/span&gt;

Enabling auto soft-commits with maxTime &lt;span class="m"&gt;3&lt;/span&gt; secs using the Config API

POSTing request to Config API: http://localhost:8983/solr/gettingstarted/config
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;set-property&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updateHandler.autoSoftCommit.maxTime&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
Successfully set-property updateHandler.autoSoftCommit.maxTime to &lt;span class="m"&gt;3000&lt;/span&gt;


SolrCloud example running, please visit: http://localhost:8983/solr

ubuntu@ubuntu:/opt/solr$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Solr的客户端API的&lt;/h3&gt;
&lt;p&gt;有不同的客户端API的可用来连接到Solr的服务器。我们列出了一些广泛使用的Solr客户端API的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SolRuby – To connect from Ruby&lt;/li&gt;
&lt;li&gt;SolPHP – To connect from PHP&lt;/li&gt;
&lt;li&gt;PySolr – To connect from Python&lt;/li&gt;
&lt;li&gt;SolPerl – To connect from Perl&lt;/li&gt;
&lt;li&gt;SolrJ – To connect from Java&lt;/li&gt;
&lt;li&gt;SolrSharp – To connect from C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，Solr还提供了JavaScript可以直接使用的基于REST的API。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ghoulich.xninja.org/2016/04/22/solr-quick-start/"&gt;Solr快速入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/cn/java/j-solr1/index.html"&gt;基本特性和 Solr 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="solr"></category></entry><entry><title>Python Mac</title><link href="xixuebin.github.io/python-mac-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/python-mac-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;python on mac install lib&lt;/h2&gt;
&lt;p&gt;install PIL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install http://effbot.org/media/downloads/Imaging-1.1.7.tar.gz
pip install bs4
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="mac"></category></entry><entry><title>For Test</title><link href="xixuebin.github.io/for-test-.html" rel="alternate"></link><published>2016-06-24T15:50:01+08:00</published><updated>2016-06-24T15:50:01+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2016-06-24:xixuebin.github.io/for-test-.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;pelican&lt;/h1&gt;
&lt;p&gt;Pelican Static Site Generator, Powered by Python：Pelican是python语言写的静态网站生成器。因为我一直打算用git pages做一个博客，现在已经学会用Hexo在git pages上做博客了。但是我还是一想：我一个pythoner，干嘛不用python写的静态网站生成器。应该是网上教程太少，那我今天就来搞一搞。顺便记录下来，整理出一个教程，希望一切顺利！&lt;/p&gt;
&lt;h2&gt;二级目录&lt;/h2&gt;</content></entry></feed>