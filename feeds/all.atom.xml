<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>寒玉 Blog</title><link href="xixuebin.github.io/" rel="alternate"></link><link href="xixuebin.github.io/feeds/all.atom.xml" rel="self"></link><id>xixuebin.github.io/</id><updated>2019-06-28T10:02:18+08:00</updated><entry><title>Subllime工具</title><link href="xixuebin.github.io/2019-06-28-100218-ch.html" rel="alternate"></link><published>2019-06-28T10:02:18+08:00</published><updated>2019-06-28T10:02:18+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-06-28:xixuebin.github.io/2019-06-28-100218-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h2&gt;批量删除空白行&lt;/h2&gt;
&lt;p&gt;CTRL+H打开replace功能，勾选上左侧的regular expression，并填写
find what栏 : \s+$  （正则表达式）
replace with栏 : （这行留空
接着点replace all即可&lt;/p&gt;</content><category term="sublime"></category></entry><entry><title>knime官方node梳理</title><link href="xixuebin.github.io/2019-06-21-115455-ch.html" rel="alternate"></link><published>2019-06-21T11:54:55+08:00</published><updated>2019-06-21T11:54:55+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-06-21:xixuebin.github.io/2019-06-21-115455-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Knime%E5%AE%98%E6%96%B9Nodes"&gt;Knime官方Nodes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#IO"&gt;IO&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Read"&gt;Read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#File-Handling"&gt;File Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Other"&gt;Other&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Cache"&gt;Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Write"&gt;Write&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Database"&gt;Database&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Utility"&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ReadWrite"&gt;Read/Write&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Connector"&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Manipulation"&gt;Manipulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Structured-Data"&gt;Structured Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#XML"&gt;XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#JSON"&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#KNIME-Labs"&gt;KNIME Labs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#PMML-Translation"&gt;PMML Translation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Manipulation-1"&gt;Manipulation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Row"&gt;Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PMML"&gt;PMML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Column"&gt;Column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Table"&gt;Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Workflow-Control"&gt;Workflow Control&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Automation"&gt;Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Switches"&gt;Switches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Loop-Support"&gt;Loop Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Meta-Nodes"&gt;Meta Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Error-Handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Other-Data-Types"&gt;Other Data Types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Time-Series"&gt;Time Series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Scripting"&gt;Scripting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Tools--Services"&gt;Tools &amp;amp; Services&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#REST-Web-Services"&gt;REST Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Apache-Spark"&gt;Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Views"&gt;Views&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Spark-Line-Appender"&gt;Spark Line Appender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Radar-Plot-Appender"&gt;Radar Plot Appender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Property"&gt;Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Box-Plot"&gt;Box Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conditional-Box-Plot"&gt;Conditional Box Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#HiLite-Table"&gt;HiLite Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Histogram"&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Histogram-interactive"&gt;Histogram (interactive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Interactive-Table"&gt;Interactive Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Lift-Chart"&gt;Lift Chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Line-Plot"&gt;Line Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Parallel-Coordinates"&gt;Parallel Coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Pie-chart"&gt;Pie chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Pie-chart-interactive"&gt;Pie chart (interactive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Scatter-Matrix"&gt;Scatter Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Scatter-Plot"&gt;Scatter Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Utility-1"&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Reporting"&gt;Reporting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Data-to-Report"&gt;Data to Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Image-to-Report"&gt;Image to Report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Analytics"&gt;Analytics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Mining"&gt;Mining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Distance-Calculation"&gt;Distance Calculation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Statistics"&gt;Statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Spark-Node-Demo"&gt;Spark Node Demo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#Spark-on-Hadoop"&gt;Spark on Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hive-to-spark-to-hive"&gt;hive to spark to hive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Comprehensive-Model-Learning-Mass-Prediction"&gt;Comprehensive Model Learning Mass Prediction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Knime官方Nodes&lt;/h1&gt;
&lt;h2&gt;IO&lt;/h2&gt;
&lt;h3&gt;Read&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;File Reader&lt;/li&gt;
&lt;li&gt;ARFF Reader&lt;/li&gt;
&lt;li&gt;CSV Reader&lt;/li&gt;
&lt;li&gt;Line Reader&lt;/li&gt;
&lt;li&gt;Table Reader&lt;/li&gt;
&lt;li&gt;PMML Reader&lt;/li&gt;
&lt;li&gt;Model Reader&lt;/li&gt;
&lt;li&gt;Fixed Width File Reader&lt;/li&gt;
&lt;li&gt;List Files&lt;/li&gt;
&lt;li&gt;Read Images&lt;/li&gt;
&lt;li&gt;Explorer Browser&lt;/li&gt;
&lt;li&gt;Excel Reader (XLS)&lt;/li&gt;
&lt;li&gt;Read Excel Sheet Names (XLS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;File Handling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remote&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Connections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create Directory&lt;/li&gt;
&lt;li&gt;Delete Files&lt;/li&gt;
&lt;li&gt;Download&lt;/li&gt;
&lt;li&gt;Download / Upload from List&lt;/li&gt;
&lt;li&gt;List Remote Files&lt;/li&gt;
&lt;li&gt;Upload&lt;/li&gt;
&lt;li&gt;HDFS File Permission&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unzip Files&lt;/li&gt;
&lt;li&gt;Zip Files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binary Objects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary Objects to Files&lt;/li&gt;
&lt;li&gt;Binary Objects to PNGs&lt;/li&gt;
&lt;li&gt;Binary Objects to Strings&lt;/li&gt;
&lt;li&gt;Files to Binary Objects&lt;/li&gt;
&lt;li&gt;PNGs to Binary Objects&lt;/li&gt;
&lt;li&gt;Strings to Binary Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract URI Info&lt;/li&gt;
&lt;li&gt;Port to URI&lt;/li&gt;
&lt;li&gt;String to URI&lt;/li&gt;
&lt;li&gt;URI Port to Variable&lt;/li&gt;
&lt;li&gt;URI to Port&lt;/li&gt;
&lt;li&gt;URI to String&lt;/li&gt;
&lt;li&gt;URL to File Path&lt;/li&gt;
&lt;li&gt;URL to File Path (Variable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy/Move Files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;File Meta Info&lt;/li&gt;
&lt;li&gt;Find MIME-Type&lt;/li&gt;
&lt;li&gt;List MIME-Types&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Table Creator&lt;/li&gt;
&lt;li&gt;Data Generator&lt;/li&gt;
&lt;li&gt;Create Table Structure&lt;/li&gt;
&lt;li&gt;Create Temp Dir&lt;/li&gt;
&lt;li&gt;Send Email&lt;/li&gt;
&lt;li&gt;Extract System Properties&lt;/li&gt;
&lt;li&gt;Extract Context Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cache&lt;/h3&gt;
&lt;h3&gt;Write&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Explorer Writer&lt;/li&gt;
&lt;li&gt;CSV Writer&lt;/li&gt;
&lt;li&gt;ARFF Writer&lt;/li&gt;
&lt;li&gt;Table Writer&lt;/li&gt;
&lt;li&gt;PMML Writer&lt;/li&gt;
&lt;li&gt;Model Writer&lt;/li&gt;
&lt;li&gt;Image Port Writer&lt;/li&gt;
&lt;li&gt;Image Column Writer&lt;/li&gt;
&lt;li&gt;Excel Sheet Appender (XLS)&lt;/li&gt;
&lt;li&gt;Excel Writer (XLS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;h3&gt;Utility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Database Drop Table&lt;/li&gt;
&lt;li&gt;Database SQL Executor&lt;/li&gt;
&lt;li&gt;SQL Extract&lt;/li&gt;
&lt;li&gt;SQL Inject&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Read/Write&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Database Reader&lt;/li&gt;
&lt;li&gt;Database Table Connector&lt;/li&gt;
&lt;li&gt;Database Connection Table Reader&lt;/li&gt;
&lt;li&gt;Database Connection Table Writer&lt;/li&gt;
&lt;li&gt;Database Looping&lt;/li&gt;
&lt;li&gt;Parameterized Database Query&lt;/li&gt;
&lt;li&gt;Database Table Selector&lt;/li&gt;
&lt;li&gt;Database Writer&lt;/li&gt;
&lt;li&gt;Database Update&lt;/li&gt;
&lt;li&gt;Database Delete&lt;/li&gt;
&lt;li&gt;Impala Loader&lt;/li&gt;
&lt;li&gt;Hive Loader&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Connector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Impala Connector&lt;/li&gt;
&lt;li&gt;Vertica Connector&lt;/li&gt;
&lt;li&gt;Database Connector&lt;/li&gt;
&lt;li&gt;Hive Connector&lt;/li&gt;
&lt;li&gt;H2 Connector&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server Connector&lt;/li&gt;
&lt;li&gt;MySQL Connector&lt;/li&gt;
&lt;li&gt;PostgreSQL Connector&lt;/li&gt;
&lt;li&gt;SQLite Connector&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Manipulation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Database Apply-Binner&lt;/li&gt;
&lt;li&gt;Database Auto-Binner&lt;/li&gt;
&lt;li&gt;Database Column Rename&lt;/li&gt;
&lt;li&gt;Database Numeric-Binner&lt;/li&gt;
&lt;li&gt;Database Pivot&lt;/li&gt;
&lt;li&gt;Database Row Filter&lt;/li&gt;
&lt;li&gt;Database Query&lt;/li&gt;
&lt;li&gt;Database Column Filter&lt;/li&gt;
&lt;li&gt;Database Sorter&lt;/li&gt;
&lt;li&gt;Database GroupBy&lt;/li&gt;
&lt;li&gt;Database Joiner&lt;/li&gt;
&lt;li&gt;Database Table Creator&lt;/li&gt;
&lt;li&gt;Database Sampling&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Structured Data&lt;/h2&gt;
&lt;h3&gt;XML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XML Reader&lt;/li&gt;
&lt;li&gt;XML Writer&lt;/li&gt;
&lt;li&gt;String To XML&lt;/li&gt;
&lt;li&gt;XPath&lt;/li&gt;
&lt;li&gt;XSLT&lt;/li&gt;
&lt;li&gt;Column To XML&lt;/li&gt;
&lt;li&gt;XML Column Combiner&lt;/li&gt;
&lt;li&gt;XML Row Combiner&lt;/li&gt;
&lt;li&gt;XML Row Combine and Write&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JSON&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Container Input (JSON)&lt;/li&gt;
&lt;li&gt;Container Output (JSON)&lt;/li&gt;
&lt;li&gt;JSON Reader&lt;/li&gt;
&lt;li&gt;JSON Writer&lt;/li&gt;
&lt;li&gt;String to JSON&lt;/li&gt;
&lt;li&gt;Table to JSON&lt;/li&gt;
&lt;li&gt;JSON to Table&lt;/li&gt;
&lt;li&gt;Columns to JSON&lt;/li&gt;
&lt;li&gt;XML To JSON&lt;/li&gt;
&lt;li&gt;JSON To XML&lt;/li&gt;
&lt;li&gt;JSON Path&lt;/li&gt;
&lt;li&gt;JSON Path (Dictionary)&lt;/li&gt;
&lt;li&gt;JSON Column Combiner&lt;/li&gt;
&lt;li&gt;JSON Row Combiner&lt;/li&gt;
&lt;li&gt;JSON Row Combiner and Writer&lt;/li&gt;
&lt;li&gt;JSON Transformer&lt;/li&gt;
&lt;li&gt;JSON Schema Validator&lt;/li&gt;
&lt;li&gt;JSON Diff&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;KNIME Labs&lt;/h2&gt;
&lt;h3&gt;PMML Translation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PMML to Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PMML Compiling Predictor&lt;/li&gt;
&lt;li&gt;PMML Compiler&lt;/li&gt;
&lt;li&gt;Compiled Model Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Manipulation&lt;/h2&gt;
&lt;h3&gt;Row&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter Apply&lt;/li&gt;
&lt;li&gt;Filter Apply Row Splitter&lt;/li&gt;
&lt;li&gt;Filter Definition Merger&lt;/li&gt;
&lt;li&gt;HiLite Row Splitter&lt;/li&gt;
&lt;li&gt;Nominal Value Row Filter&lt;/li&gt;
&lt;li&gt;Nominal Value Row Splitter&lt;/li&gt;
&lt;li&gt;Numeric Row Splitter&lt;/li&gt;
&lt;li&gt;Reference Row Filter&lt;/li&gt;
&lt;li&gt;Reference Row Splitter&lt;/li&gt;
&lt;li&gt;Row Filter&lt;/li&gt;
&lt;li&gt;Row Splitter&lt;/li&gt;
&lt;li&gt;Rule-based Row Filter&lt;/li&gt;
&lt;li&gt;Rule-based Row Filter (Dictionary)&lt;/li&gt;
&lt;li&gt;Rule-based Row Splitter&lt;/li&gt;
&lt;li&gt;Rule-based Row Splitter (Dictionary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concatenate&lt;/li&gt;
&lt;li&gt;Concatenate (Optional in)&lt;/li&gt;
&lt;li&gt;GroupBy&lt;/li&gt;
&lt;li&gt;Ungroup&lt;/li&gt;
&lt;li&gt;Partitioning&lt;/li&gt;
&lt;li&gt;Pivoting&lt;/li&gt;
&lt;li&gt;Unpivoting&lt;/li&gt;
&lt;li&gt;Rank&lt;/li&gt;
&lt;li&gt;Row Sampling&lt;/li&gt;
&lt;li&gt;Bootstrap Sampling&lt;/li&gt;
&lt;li&gt;Equal Size Sampling&lt;/li&gt;
&lt;li&gt;Shuffle&lt;/li&gt;
&lt;li&gt;SorterRule-based Row Splitter (Dictionary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rule Engine&lt;/li&gt;
&lt;li&gt;Rule Engine (Dictionary)&lt;/li&gt;
&lt;li&gt;Add Empty Rows&lt;/li&gt;
&lt;li&gt;Extract Column Header&lt;/li&gt;
&lt;li&gt;Insert Column Header&lt;/li&gt;
&lt;li&gt;RowID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;PMML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cell To PMML&lt;/li&gt;
&lt;li&gt;PMML To Cell&lt;/li&gt;
&lt;li&gt;Column Filter (PMML)&lt;/li&gt;
&lt;li&gt;Denormalizer (PMML)&lt;/li&gt;
&lt;li&gt;Many to One (PMML)&lt;/li&gt;
&lt;li&gt;Normalizer (PMML)&lt;/li&gt;
&lt;li&gt;Normalizer Apply (PMML)&lt;/li&gt;
&lt;li&gt;Number To String (PMML)&lt;/li&gt;
&lt;li&gt;Numeric Binner (PMML)&lt;/li&gt;
&lt;li&gt;One to Many (PMML)&lt;/li&gt;
&lt;li&gt;String To Number (PMML)&lt;/li&gt;
&lt;li&gt;XML To PMML&lt;/li&gt;
&lt;li&gt;Ruleset Editor&lt;/li&gt;
&lt;li&gt;Ruleset Predictor&lt;/li&gt;
&lt;li&gt;Ruleset to Table&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Column&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case Converter&lt;/li&gt;
&lt;li&gt;Column Comparator&lt;/li&gt;
&lt;li&gt;Column Resorter&lt;/li&gt;
&lt;li&gt;Lag Column&lt;/li&gt;
&lt;li&gt;Reference Column Resorter&lt;/li&gt;
&lt;li&gt;Denormalizer&lt;/li&gt;
&lt;li&gt;Extract Missing Value Cause&lt;/li&gt;
&lt;li&gt;Missing Value&lt;/li&gt;
&lt;li&gt;Missing Value (Apply)&lt;/li&gt;
&lt;li&gt;Normalizer&lt;/li&gt;
&lt;li&gt;Normalizer (Apply)&lt;/li&gt;
&lt;li&gt;One to Many&lt;/li&gt;
&lt;li&gt;Many to One&lt;/li&gt;
&lt;li&gt;SMOTE&lt;/li&gt;
&lt;li&gt;Set Operator&lt;/li&gt;
&lt;li&gt;Subset Matcher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto-Binner&lt;/li&gt;
&lt;li&gt;Auto-Binner (Apply)&lt;/li&gt;
&lt;li&gt;Numeric Binner&lt;/li&gt;
&lt;li&gt;Binner (Dictionary)&lt;/li&gt;
&lt;li&gt;CAIM Binner&lt;/li&gt;
&lt;li&gt;CAIM Applier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interactive HiLite Collector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Table Validator&lt;/li&gt;
&lt;li&gt;Table Validator (Reference)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert &amp;amp; Replace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String Manipulation&lt;/li&gt;
&lt;li&gt;Category To Number&lt;/li&gt;
&lt;li&gt;Category To Number (Apply)&lt;/li&gt;
&lt;li&gt;Cell Replacer&lt;/li&gt;
&lt;li&gt;Column Auto Type Cast&lt;/li&gt;
&lt;li&gt;Column Rename&lt;/li&gt;
&lt;li&gt;Column Rename (Regex)&lt;/li&gt;
&lt;li&gt;Constant Value Column&lt;/li&gt;
&lt;li&gt;Number To Category (Apply)&lt;/li&gt;
&lt;li&gt;Number To String&lt;/li&gt;
&lt;li&gt;String To Number&lt;/li&gt;
&lt;li&gt;Double To Int&lt;/li&gt;
&lt;li&gt;Round Double&lt;/li&gt;
&lt;li&gt;String Replace (Dictionary)&lt;/li&gt;
&lt;li&gt;String Replacer&lt;/li&gt;
&lt;li&gt;Domain Calculator&lt;/li&gt;
&lt;li&gt;Edit Numeric Domain&lt;/li&gt;
&lt;li&gt;Edit Nominal Domain (Dictionary)&lt;/li&gt;
&lt;li&gt;Edit Nominal Domain&lt;/li&gt;
&lt;li&gt;Target Shuffling&lt;/li&gt;
&lt;li&gt;Math Formula&lt;/li&gt;
&lt;li&gt;Math Formula (Multi Column)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Column Filter&lt;/li&gt;
&lt;li&gt;Reference Column Filter&lt;/li&gt;
&lt;li&gt;Constant Value Column Filter&lt;/li&gt;
&lt;li&gt;Missing Value Column Filter&lt;/li&gt;
&lt;li&gt;Reference Column Splitter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split &amp;amp; Combine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cell Splitter&lt;/li&gt;
&lt;li&gt;Cell Splitter By Position&lt;/li&gt;
&lt;li&gt;Column Aggregator&lt;/li&gt;
&lt;li&gt;Column Combiner&lt;/li&gt;
&lt;li&gt;Column Merger&lt;/li&gt;
&lt;li&gt;Column Splitter&lt;/li&gt;
&lt;li&gt;Column Appender&lt;/li&gt;
&lt;li&gt;Column to Grid&lt;/li&gt;
&lt;li&gt;Create Bit Vector&lt;/li&gt;
&lt;li&gt;Expand Bit Vector&lt;/li&gt;
&lt;li&gt;Create Collection Column&lt;/li&gt;
&lt;li&gt;Split Collection Column&lt;/li&gt;
&lt;li&gt;Create Byte Vector&lt;/li&gt;
&lt;li&gt;Expand Byte Vector&lt;/li&gt;
&lt;li&gt;Joiner&lt;/li&gt;
&lt;li&gt;Cross Joiner&lt;/li&gt;
&lt;li&gt;Regex Split&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Table&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Extract Table Dimension&lt;/li&gt;
&lt;li&gt;Extract Table Spec&lt;/li&gt;
&lt;li&gt;Transpose&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Workflow Control&lt;/h2&gt;
&lt;h3&gt;Automation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Call Local Workflow (Row Based)&lt;/li&gt;
&lt;li&gt;Container Input (Credentials)&lt;/li&gt;
&lt;li&gt;Container Input (Table)&lt;/li&gt;
&lt;li&gt;Container Input (Variable)&lt;/li&gt;
&lt;li&gt;Container Output (Table)&lt;/li&gt;
&lt;li&gt;Wait...&lt;/li&gt;
&lt;li&gt;Save Workflow&lt;/li&gt;
&lt;li&gt;Timer Info&lt;/li&gt;
&lt;li&gt;Global Timer Info&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Switches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java IF (Table)&lt;/li&gt;
&lt;li&gt;IF Switch&lt;/li&gt;
&lt;li&gt;End IF&lt;/li&gt;
&lt;li&gt;CASE Switch Data (Start)&lt;/li&gt;
&lt;li&gt;CASE Switch Data (End)&lt;/li&gt;
&lt;li&gt;CASE Switch Model (Start)&lt;/li&gt;
&lt;li&gt;CASE Switch Model (End)&lt;/li&gt;
&lt;li&gt;CASE Switch Variable (Start)&lt;/li&gt;
&lt;li&gt;CASE Switch Variable (End)&lt;/li&gt;
&lt;li&gt;Empty Table Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Loop Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Breakpoint&lt;/li&gt;
&lt;li&gt;Counting Loop Start&lt;/li&gt;
&lt;li&gt;Chunk Loop Start&lt;/li&gt;
&lt;li&gt;Column List Loop Start&lt;/li&gt;
&lt;li&gt;Generic Loop Start&lt;/li&gt;
&lt;li&gt;Table Row To Variable Loop Start&lt;/li&gt;
&lt;li&gt;Loop End&lt;/li&gt;
&lt;li&gt;Variable Condition Loop End&lt;/li&gt;
&lt;li&gt;Group Loop Start&lt;/li&gt;
&lt;li&gt;Interval Loop Start&lt;/li&gt;
&lt;li&gt;Loop End (2 ports)&lt;/li&gt;
&lt;li&gt;Loop End (Column Append)&lt;/li&gt;
&lt;li&gt;Recursive Loop End&lt;/li&gt;
&lt;li&gt;Recursive Loop End (2 ports)&lt;/li&gt;
&lt;li&gt;Recursive Loop Start&lt;/li&gt;
&lt;li&gt;Recursive Loop Start (2 ports)&lt;/li&gt;
&lt;li&gt;Variable Loop End&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Variables&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create File Name&lt;/li&gt;
&lt;li&gt;Inject Variables (Data)&lt;/li&gt;
&lt;li&gt;Inject Variables (Database)&lt;/li&gt;
&lt;li&gt;Extract Variables (Data)&lt;/li&gt;
&lt;li&gt;Extract Variables (Database)&lt;/li&gt;
&lt;li&gt;Table Column to Variable&lt;/li&gt;
&lt;li&gt;Table Row to Variable&lt;/li&gt;
&lt;li&gt;Variable to Table Column&lt;/li&gt;
&lt;li&gt;Variable to Table Row&lt;/li&gt;
&lt;li&gt;Merge Variables&lt;/li&gt;
&lt;li&gt;Java Edit Variable&lt;/li&gt;
&lt;li&gt;Rule Engine Variable&lt;/li&gt;
&lt;li&gt;Rule Engine Variable (Dictionary)&lt;/li&gt;
&lt;li&gt;String Manipulation (Variable)&lt;/li&gt;
&lt;li&gt;Java Edit Variable (simple)&lt;/li&gt;
&lt;li&gt;Math Formula (Variable)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Meta Nodes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Variables Loop (Data)&lt;/li&gt;
&lt;li&gt;Variables Loop (Database)&lt;/li&gt;
&lt;li&gt;Iterate List of Files&lt;/li&gt;
&lt;li&gt;Loop x-times&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Error Handling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Catch Errors (DB Ports)&lt;/li&gt;
&lt;li&gt;Catch Errors (Data Ports)&lt;/li&gt;
&lt;li&gt;Catch Errors (Generic Ports)&lt;/li&gt;
&lt;li&gt;Catch Errors (Var Ports)&lt;/li&gt;
&lt;li&gt;Try (Data Ports)&lt;/li&gt;
&lt;li&gt;Try (Variable Ports)&lt;/li&gt;
&lt;li&gt;Active Branch Inverter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Data Types&lt;/h2&gt;
&lt;h3&gt;Time Series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Meta Nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time-Series Auto-Prediction Predictor&lt;/li&gt;
&lt;li&gt;Time-Series Auto-Prediction Training&lt;/li&gt;
&lt;li&gt;Seasonality Correction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time Series (legacy)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date Field Extractor (legacy)&lt;/li&gt;
&lt;li&gt;Time Field Extractor (legacy)&lt;/li&gt;
&lt;li&gt;Date/Time Shift (legacy)&lt;/li&gt;
&lt;li&gt;Extract Time Window (legacy)&lt;/li&gt;
&lt;li&gt;Mask Date/Time (legacy)&lt;/li&gt;
&lt;li&gt;Preset Date/Time (legacy)&lt;/li&gt;
&lt;li&gt;String to Date/Time (legacy)&lt;/li&gt;
&lt;li&gt;Time Difference (legacy)&lt;/li&gt;
&lt;li&gt;Time Generator (legacy)&lt;/li&gt;
&lt;li&gt;Time to String (legacy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manipulate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create Date&amp;amp;Time Range&lt;/li&gt;
&lt;li&gt;Date &amp;amp; Time Difference&lt;/li&gt;
&lt;li&gt;Date &amp;amp; Time Shift&lt;/li&gt;
&lt;li&gt;Date &amp;amp; Time-based Row Filter&lt;/li&gt;
&lt;li&gt;Modify Date&lt;/li&gt;
&lt;li&gt;Modify Time&lt;/li&gt;
&lt;li&gt;Modify Time Zone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smoothing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moving Aggregation&lt;/li&gt;
&lt;li&gt;Moving Average&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date&amp;amp;Time to String&lt;/li&gt;
&lt;li&gt;String to Date&amp;amp;Time&lt;/li&gt;
&lt;li&gt;UNIX Timestamp to Date&amp;amp;Time&lt;/li&gt;
&lt;li&gt;Duration to String&lt;/li&gt;
&lt;li&gt;Duration to Number&lt;/li&gt;
&lt;li&gt;String to Duration&lt;/li&gt;
&lt;li&gt;Date&amp;amp;Time to legacy Date&amp;amp;Time&lt;/li&gt;
&lt;li&gt;Legacy Date&amp;amp;Time to Date&amp;amp;Time&lt;/li&gt;
&lt;li&gt;Extract Date&amp;amp;Time Fields&lt;/li&gt;
&lt;li&gt;Extract Duration Fields&lt;/li&gt;
&lt;li&gt;Window Loop Start&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scripting&lt;/h2&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java Snippet&lt;/li&gt;
&lt;li&gt;Java Snippet (simple)&lt;/li&gt;
&lt;li&gt;Java Snippet Row Filter&lt;/li&gt;
&lt;li&gt;Java Snippet Row Splitter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tools &amp;amp; Services&lt;/h2&gt;
&lt;h3&gt;REST Web Services&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GET Request&lt;/li&gt;
&lt;li&gt;POST Request&lt;/li&gt;
&lt;li&gt;PUT Request&lt;/li&gt;
&lt;li&gt;DELETE Request&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Apache Spark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Misc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PySpark&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PySpark Script (1 to 1)&lt;/li&gt;
&lt;li&gt;PySpark Script (1 to 2)&lt;/li&gt;
&lt;li&gt;PySpark Script (2 to 1)&lt;/li&gt;
&lt;li&gt;PySpark Script (2 to 2)&lt;/li&gt;
&lt;li&gt;PySpark Script Source&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spark SQL Query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Snippet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark DataFrame Java Snippet&lt;/li&gt;
&lt;li&gt;Spark DataFrame Java Snippet (Sink)&lt;/li&gt;
&lt;li&gt;Spark DataFrame Java Snippet (Source)&lt;/li&gt;
&lt;li&gt;Spark RDD Java Snippet&lt;/li&gt;
&lt;li&gt;Spark RDD Java Snippet (Sink)&lt;/li&gt;
&lt;li&gt;Spark RDD Java Snippet (Source)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Management&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List Spark DataFrames/RDDs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Column&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Column Filter&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Missing Value&lt;/li&gt;
&lt;li&gt;Spark Missing Value (Apply)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert &amp;amp; Replace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Category To Number&lt;/li&gt;
&lt;li&gt;Spark Column Rename&lt;/li&gt;
&lt;li&gt;Spark Column Rename (Regex)&lt;/li&gt;
&lt;li&gt;Spark Compiled Transformations Applier&lt;/li&gt;
&lt;li&gt;Spark Normalizer&lt;/li&gt;
&lt;li&gt;Spark Number To Category (Apply)&lt;/li&gt;
&lt;li&gt;Spark Transformations Applier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split &amp;amp; Combine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Joiner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Row&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Concatenate&lt;/li&gt;
&lt;li&gt;Spark GroupBy&lt;/li&gt;
&lt;li&gt;Spark Partitioning&lt;/li&gt;
&lt;li&gt;Spark Pivot&lt;/li&gt;
&lt;li&gt;Spark Row Filter&lt;/li&gt;
&lt;li&gt;Spark Row Sampling&lt;/li&gt;
&lt;li&gt;Spark Sorter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Statistics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Correlation Filter&lt;/li&gt;
&lt;li&gt;Spark Correlation Matrix&lt;/li&gt;
&lt;li&gt;Spark Linear Correlation&lt;/li&gt;
&lt;li&gt;Spark Statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark to Avro&lt;/li&gt;
&lt;li&gt;Spark to CSV&lt;/li&gt;
&lt;li&gt;Spark to JSON&lt;/li&gt;
&lt;li&gt;Spark to ORC&lt;/li&gt;
&lt;li&gt;Spark to Parquet&lt;/li&gt;
&lt;li&gt;Spark to Table&lt;/li&gt;
&lt;li&gt;Spark to Text&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database to Spark&lt;/li&gt;
&lt;li&gt;Hive to Spark&lt;/li&gt;
&lt;li&gt;Impala to Spark&lt;/li&gt;
&lt;li&gt;Spark to Database&lt;/li&gt;
&lt;li&gt;Spark to Hive&lt;/li&gt;
&lt;li&gt;Spark to Impala&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persist Spark DataFrame/RDD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unpersist Spark DataFrame/RDD&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avro to Spark&lt;/li&gt;
&lt;li&gt;CSV to Spark&lt;/li&gt;
&lt;li&gt;JSON to Spark&lt;/li&gt;
&lt;li&gt;ORC to Spark&lt;/li&gt;
&lt;li&gt;Parquet to Spark&lt;/li&gt;
&lt;li&gt;Table to Spark&lt;/li&gt;
&lt;li&gt;Text to Spark&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Big Data Test Environment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Create Local Big Data Environment&lt;/li&gt;
&lt;li&gt;Create Spark Context (Jobserver)&lt;/li&gt;
&lt;li&gt;Create Spark Context (Livy)&lt;/li&gt;
&lt;li&gt;Destroy Spark Context&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scoring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Entropy Scorer&lt;/li&gt;
&lt;li&gt;Spark Numeric Scorer&lt;/li&gt;
&lt;li&gt;Spark Scorer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clustering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Cluster Assigner&lt;/li&gt;
&lt;li&gt;Spark k-Means&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spark Collaborative Filtering Learner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Compiled Model Predictor&lt;/li&gt;
&lt;li&gt;Spark MLlib to PMML&lt;/li&gt;
&lt;li&gt;Spark PMML Model Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dimensionality Reduction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark PCA&lt;/li&gt;
&lt;li&gt;Spark SVD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prediction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Decision Tree Learner&lt;/li&gt;
&lt;li&gt;Spark Gradient-Boosted Trees Learner&lt;/li&gt;
&lt;li&gt;Spark Linear Regression Learner&lt;/li&gt;
&lt;li&gt;Spark Linear SVM Learner&lt;/li&gt;
&lt;li&gt;Spark Logistic Regression Learner&lt;/li&gt;
&lt;li&gt;Spark Naive Bayes Learner&lt;/li&gt;
&lt;li&gt;Spark Predictor&lt;/li&gt;
&lt;li&gt;Spark Random Forests Learner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Item Sets / Association Rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Association Rule (Apply)&lt;/li&gt;
&lt;li&gt;Spark Association Rule Learner&lt;/li&gt;
&lt;li&gt;Spark Frequent Item Sets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Views&lt;/h2&gt;
&lt;h3&gt;Spark Line Appender&lt;/h3&gt;
&lt;h3&gt;Radar Plot Appender&lt;/h3&gt;
&lt;h3&gt;Property&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Color Manager&lt;/li&gt;
&lt;li&gt;Size Manager&lt;/li&gt;
&lt;li&gt;Shape Manager&lt;/li&gt;
&lt;li&gt;Color Appender&lt;/li&gt;
&lt;li&gt;Size Appender&lt;/li&gt;
&lt;li&gt;Shape Appender&lt;/li&gt;
&lt;li&gt;Extract Color&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Box Plot&lt;/h3&gt;
&lt;h3&gt;Conditional Box Plot&lt;/h3&gt;
&lt;h3&gt;HiLite Table&lt;/h3&gt;
&lt;h3&gt;Histogram&lt;/h3&gt;
&lt;h3&gt;Histogram (interactive)&lt;/h3&gt;
&lt;h3&gt;Interactive Table&lt;/h3&gt;
&lt;h3&gt;Lift Chart&lt;/h3&gt;
&lt;h3&gt;Line Plot&lt;/h3&gt;
&lt;h3&gt;Parallel Coordinates&lt;/h3&gt;
&lt;h3&gt;Pie chart&lt;/h3&gt;
&lt;h3&gt;Pie chart (interactive)&lt;/h3&gt;
&lt;h3&gt;Scatter Matrix&lt;/h3&gt;
&lt;h3&gt;Scatter Plot&lt;/h3&gt;
&lt;h3&gt;Utility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Renderer to Image&lt;/li&gt;
&lt;li&gt;String To SVG&lt;/li&gt;
&lt;li&gt;Image To Table&lt;/li&gt;
&lt;li&gt;Table To Image&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reporting&lt;/h2&gt;
&lt;h3&gt;Data to Report&lt;/h3&gt;
&lt;h3&gt;Image to Report&lt;/h3&gt;
&lt;h2&gt;Analytics&lt;/h2&gt;
&lt;h3&gt;Mining&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule Induction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fuzzy Rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fuzzy Rule Learner&lt;/li&gt;
&lt;li&gt;Fuzzy Rule Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neural Network&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MLP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MultiLayerPerceptron Predictor&lt;/li&gt;
&lt;li&gt;RProp MLP Learner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PNN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PNN Learner (DDA)&lt;/li&gt;
&lt;li&gt;PNN Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linear/Polynomial Regression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear Regression Learner&lt;/li&gt;
&lt;li&gt;Polynomial Regression Learner&lt;/li&gt;
&lt;li&gt;Regression Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Misc Classifiers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K Nearest Neighbor&lt;/li&gt;
&lt;li&gt;K Nearest Neighbor (Distance Function)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Item Sets / Association Rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Association Rule Learner&lt;/li&gt;
&lt;li&gt;Create Bit Vector&lt;/li&gt;
&lt;li&gt;Subset Matcher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scoring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Meta Nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross Validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scorer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Numeric Scorer&lt;/li&gt;
&lt;li&gt;Entropy Scorer&lt;/li&gt;
&lt;li&gt;ROC Curve&lt;/li&gt;
&lt;li&gt;Enrichment Plotter&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross Validation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Partitioner&lt;/li&gt;
&lt;li&gt;X-Aggregator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logistic Regression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logistic Regression Learner&lt;/li&gt;
&lt;li&gt;Logistic Regression Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bayes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Naive Bayes Learner&lt;/li&gt;
&lt;li&gt;Naive Bayes Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature Selection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Meta Nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backward Feature Elimination&lt;/li&gt;
&lt;li&gt;Forward Feature Selection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feature Selection Loop Start (1:1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Feature Selection Loop Start (2:2)&lt;/li&gt;
&lt;li&gt;Feature Selection Loop End&lt;/li&gt;
&lt;li&gt;Feature Selection Filter&lt;/li&gt;
&lt;li&gt;Linear Correlation&lt;/li&gt;
&lt;li&gt;Correlation Filter&lt;/li&gt;
&lt;li&gt;Low Variance Filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decision Tree Ensemble&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Random Forest&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Random Forest Distance&lt;/li&gt;
&lt;li&gt;Tree Ensemble Model Extract&lt;/li&gt;
&lt;li&gt;Tree Ensemble Statistics&lt;/li&gt;
&lt;li&gt;Regression&lt;/li&gt;
&lt;li&gt;Classification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gradient Boosting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradient Boosted Trees Learner (Regression)&lt;/li&gt;
&lt;li&gt;Gradient Boosted Trees Predictor (Regression)&lt;/li&gt;
&lt;li&gt;PMML Gradient Boosted Trees Predictor (Regression)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gradient Boosted Trees to PMML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradient Boosted Trees Learner&lt;/li&gt;
&lt;li&gt;Gradient Boosted Trees Predictor&lt;/li&gt;
&lt;li&gt;PMML Gradient Boosted Trees Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decision Tree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PMML Simple Regression Tree Predictor&lt;/li&gt;
&lt;li&gt;Simple Regression Tree Learner&lt;/li&gt;
&lt;li&gt;Simple Regression Tree Predictor&lt;/li&gt;
&lt;li&gt;Simple Regression Tree to PMML&lt;/li&gt;
&lt;li&gt;Decision Tree to Ruleset&lt;/li&gt;
&lt;li&gt;Decision Tree Learner&lt;/li&gt;
&lt;li&gt;Decision Tree Predictor&lt;/li&gt;
&lt;li&gt;Decision Tree To Image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCA&lt;/li&gt;
&lt;li&gt;PCA Compute&lt;/li&gt;
&lt;li&gt;PCA Apply&lt;/li&gt;
&lt;li&gt;PCA Inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clustering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBSCAN&lt;/li&gt;
&lt;li&gt;k-Medoids&lt;/li&gt;
&lt;li&gt;Hierarchical Clustering (DistMatrix)&lt;/li&gt;
&lt;li&gt;Hierarchical Cluster View&lt;/li&gt;
&lt;li&gt;Hierarchical Cluster Assigner&lt;/li&gt;
&lt;li&gt;Cluster Assigner&lt;/li&gt;
&lt;li&gt;Fuzzy c-Means&lt;/li&gt;
&lt;li&gt;Hierarchical Clustering&lt;/li&gt;
&lt;li&gt;SOTA Learner&lt;/li&gt;
&lt;li&gt;SOTA Predictor&lt;/li&gt;
&lt;li&gt;k-Means&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensemble Learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boosting Learner Loop End&lt;/li&gt;
&lt;li&gt;Boosting Learner Loop Start&lt;/li&gt;
&lt;li&gt;Boosting Predictor Loop End&lt;/li&gt;
&lt;li&gt;Boosting Predictor Loop Start&lt;/li&gt;
&lt;li&gt;Cell To Model&lt;/li&gt;
&lt;li&gt;Model Loop End&lt;/li&gt;
&lt;li&gt;Model Loop Start&lt;/li&gt;
&lt;li&gt;Model to Cell&lt;/li&gt;
&lt;li&gt;Prediction Fusion&lt;/li&gt;
&lt;li&gt;Voting Loop End&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meta Nodes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bagging&lt;/li&gt;
&lt;li&gt;Boosting Learner&lt;/li&gt;
&lt;li&gt;Boosting Predictor&lt;/li&gt;
&lt;li&gt;Delegating&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PMML Ensemble Loop End&lt;/li&gt;
&lt;li&gt;PMML Ensemble Predictor&lt;/li&gt;
&lt;li&gt;PMML Ensemble to Table&lt;/li&gt;
&lt;li&gt;Table to PMML Ensemble&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MDS (DistMatrix)&lt;/li&gt;
&lt;li&gt;MDS Projection (DistMatrix)&lt;/li&gt;
&lt;li&gt;MDS&lt;/li&gt;
&lt;li&gt;MDS Projection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SVM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SVM Learner&lt;/li&gt;
&lt;li&gt;SVM Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PMML Predictor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Distance Calculation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distance Matrix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distance Matrix Reader&lt;/li&gt;
&lt;li&gt;Distance Matrix Writer&lt;/li&gt;
&lt;li&gt;Distance Matrix Calculate&lt;/li&gt;
&lt;li&gt;Distance Matrix Pair Extractor&lt;/li&gt;
&lt;li&gt;Similarity Search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distance Functions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numeric Distances&lt;/li&gt;
&lt;li&gt;String Distances&lt;/li&gt;
&lt;li&gt;Bit Vector Distances&lt;/li&gt;
&lt;li&gt;Byte Vector Distances&lt;/li&gt;
&lt;li&gt;Mahalanobis Distance&lt;/li&gt;
&lt;li&gt;Matrix Distance&lt;/li&gt;
&lt;li&gt;Aggregated Distance&lt;/li&gt;
&lt;li&gt;Java Distance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Statistics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crosstab&lt;/li&gt;
&lt;li&gt;Value Counter&lt;/li&gt;
&lt;li&gt;Linear Correlation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Spark Node Demo&lt;/h2&gt;
&lt;h3&gt;Spark on Hadoop&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2019-06-21-18-03-17" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/d623f1e4a074694948d241eddcfd7cda.png"&gt;&lt;/p&gt;
&lt;p&gt;This workflow demonstrates the usage of the Spark MLlib Decision Tree Learner and Spark Predictor. It also demonstrates the conversion of categorical columns into numerical columns which is necessary since the MLlib algorithms only support numerical features and labels.&lt;/p&gt;
&lt;p&gt;Requirements:
- KNIME Analytics Platform
    + KNIME Extension for Apache Spark
- Hadoop Cluster e.g. Hortonworks Sandbox (http://hortonworks.com/products/hortonworks-sandbox/)
    + Spark Job Server needs to be installed and configured
    + Apache Spark 1.2.1 to 2.2
For details see https://www.knime.org/knime-spark-executor&lt;/p&gt;
&lt;h3&gt;hive to spark to hive&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2019-06-21-18-17-07" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/03a59830f72d0202a20544231118d7e8.png"&gt;&lt;/p&gt;
&lt;p&gt;This workflow demonstrates the usage of the Hive to Spark and Spark to Hive nodes that allow you to transfer data between Apache Spark and Apache Hive.&lt;/p&gt;
&lt;p&gt;Requirements:
- KNIME Analytics Platform
    + KNIME Big Data Connectors
    + KNIME extension for Apache Spark
- Hadoop Cluster e.g. Hortonworks Sandbox (http://hortonworks.com/products/hortonworks-sandbox/)
    + Spark Job Server needs to be installed and configured
    + Apache Spark 1.2.1 to 2.2
For details see https://www.knime.org/knime-spark-executor and
https://www.knime.org/knime-big-data-connectors&lt;/p&gt;
&lt;h3&gt;Comprehensive Model Learning Mass Prediction&lt;/h3&gt;
&lt;p&gt;&lt;img alt="2019-06-21-19-04-32" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/de973d6d1b357b57b90339aaec169358.png"&gt;&lt;/p&gt;
&lt;p&gt;This workflow demonstrates the usage of the Spark Compiled Model Predictor node which converts a given PMML model into machine code and uses the compiled model to predict vast amounts of data in parallel within Apache Spark.&lt;/p&gt;
&lt;p&gt;Requirements:
- KNIME Analytics Platform
    + KNIME Ensemble Learning Wrappers
    + KNIME Extension for Apache Spark
- Hadoop Cluster e.g. Hortonworks Sandbox (http://hortonworks.com/products/hortonworks-sandbox/)
    + Spark Job Server needs to be installed and configured
    + Apache Spark 1.2.1 to 2.2
For details see https://www.knime.org/knime-spark-executor  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;XMind: ZEN - Trial Version&lt;/em&gt;&lt;/p&gt;</content><category term="bigdata"></category><category term="knime"></category></entry><entry><title>MysqlBinlog 详解</title><link href="xixuebin.github.io/2019-06-19-193732-ch.html" rel="alternate"></link><published>2019-06-19T19:37:32+08:00</published><updated>2019-06-19T19:37:32+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-06-19:xixuebin.github.io/2019-06-19-193732-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;blockquote&gt;
&lt;p&gt;Mariadb/mysql提供了4中不同的日志，分别是错误日志（error.log）、普通日志（general log）、慢日志（slow log）以及二进制日志（binlog）。错误日志记录了系统启动、运行以及停止过程中遇到的一些问题；普通日志记录了Mariadb执行的所有语句以及语句开始执行的时间等信息，用户可以选择性的打开它；慢日志记录了Mariadb所有慢查询的相关信息；而二进制日志则以事件的形式记录了mariadb的库表结构以及表数据的所有变更信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Mysql Binlog&lt;/h1&gt;
&lt;h2&gt;binlog的作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;复制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Mariadb/mysql的主从结构中，主库的binlog记录了主库的所有更改操作，从库通过读取主库的binlog，在本地重放获取的binlog，这样从库就拥有和主库相同的数据，达到复制目的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;binlog记录了数据库的所有更改信息，所以当Mariadb/mysql发生崩溃的时候，能够以最近备份点作为起点，然后执行在备份点之后产生的binlog中所有事件，实现数据库最大可能的恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index文件按照书序记录了Mariadb/Mysql使用的所有binlog文件，管理binlog文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariadb.com/kb/en/library/binary-log/"&gt;https://mariadb.com/kb/en/library/binary-log/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/skymyyang/p/7798670.html"&gt;https://www.cnblogs.com/skymyyang/p/7798670.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="database"></category><category term="binlog"></category><category term="mysql"></category></entry><entry><title>Debezium介绍和使用</title><link href="xixuebin.github.io/2019-05-30-141229-ch.html" rel="alternate"></link><published>2019-05-30T14:12:29+08:00</published><updated>2019-05-30T14:12:29+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-05-30:xixuebin.github.io/2019-05-30-141229-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;介绍&lt;/h1&gt;
&lt;h2&gt;什么是Debezium&lt;/h2&gt;
&lt;p&gt;Debezium是一个开源项目，为捕获数据更改(change data capture,CDC)提供了一个低延迟的流式处理平台。你可以安装并且配置Debezium去监控你的数据库，然后你的应用就可以消费对数据库的每一个行级别(row-level)的更改。只有已提交的更改才是可见的，所以你的应用不用担心事务(transaction)或者更改被回滚(roll back)。Debezium为所有的数据库更改事件提供了一个统一的模型，所以你的应用不用担心每一种数据库管理系统的错综复杂性。另外，由于Debezium用持久化的、有副本备份的日志来记录数据库数据变化的历史，因此，你的应用可以随时停止再重启，而不会错过它停止运行时发生的事件，保证了所有的事件都能被正确地、完全地处理掉。&lt;/p&gt;
&lt;p&gt;监控数据库，并且在数据变动的时候获得通知一直是很复杂的事情。关系型数据库的触发器可以做到，但是只对特定的数据库有效，而且通常只能更新数据库内的状态(无法和外部的进程通信)。一些数据库提供了监控数据变动的API或者框架，但是没有一个标准，每种数据库的实现方式都是不同的，并且需要大量特定的知识和理解特定的代码才能运用。确保以相同的顺序查看和处理所有更改，同时最小化影响数据库仍然非常具有挑战性。&lt;/p&gt;
&lt;p&gt;Debezium提供了模块为你做这些复杂的工作。一些模块是通用的，并且能够适用多种数据库管理系统，但在功能和性能方面仍有一些限制。另一些模块是为特定的数据库管理系统定制的，所以他们通常可以更多地利用数据库系统本身的特性来提供更多功能。&lt;/p&gt;
&lt;h2&gt;基础架构&lt;/h2&gt;
&lt;p&gt;Debezium是一个捕获数据更改(CDC)平台，并且利用Kafka和Kafka Connect实现了自己的持久性、可靠性和容错性。每一个部署在Kafka Connect分布式的、可扩展的、容错性的服务中的connector监控一个上游数据库服务器，捕获所有的数据库更改，然后记录到一个或者多个Kafka topic(通常一个数据库表对应一个kafka topic)。Kafka确保所有这些数据更改事件都能够多副本并且总体上有序(Kafka只能保证一个topic的单个分区内有序)，这样，更多的客户端可以独立消费同样的数据更改事件而对上游数据库系统造成的影响降到很小(如果N个应用都直接去监控数据库更改，对数据库的压力为N，而用debezium汇报数据库更改事件到kafka，所有的应用都去消费kafka中的消息，可以把对数据库的压力降到1)。另外，客户端可以随时停止消费，然后重启，从上次停止消费的地方接着消费。每个客户端可以自行决定他们是否需要exactly-once或者at-least-once消息交付语义保证，并且所有的数据库或者表的更改事件是按照上游数据库发生的顺序被交付的。&lt;/p&gt;
&lt;p&gt;对于不需要或者不想要这种容错级别、性能、可扩展性、可靠性的应用，他们可以使用内嵌的Debezium connector引擎来直接在应用内部运行connector。这种应用仍需要消费数据库更改事件，但更希望connector直接传递给它，而不是持久化到Kafka里。&lt;/p&gt;
&lt;h2&gt;常见使用场景&lt;/h2&gt;
&lt;h3&gt;缓存失效(Cache invalidation)&lt;/h3&gt;
&lt;p&gt;在缓存中缓存的条目(entry)在源头被更改或者被删除的时候立即让缓存中的条目失效。如果缓存在一个独立的进程中运行(例如Redis，Memcache，Infinispan或者其他的)，那么简单的缓存失效逻辑可以放在独立的进程或服务中，从而简化主应用的逻辑。在一些场景中，缓存失效逻辑可以更复杂一点，让它利用更改事件中的更新数据去更新缓存中受影响的条目。&lt;/p&gt;
&lt;h3&gt;简化单体应用(Simplifying monolithic applications)&lt;/h3&gt;
&lt;p&gt;许多应用更新数据库，然后在数据库中的更改被提交后，做一些额外的工作：更新搜索索引，更新缓存，发送通知，运行业务逻辑，等等。这种情况通常称为双写(dual-writes)，因为应用没有在一个事务内写多个系统。这样不仅应用逻辑复杂难以维护，而且双写容易丢失数据或者在一些系统更新成功而另一些系统没有更新成功的时候造成不同系统之间的状态不一致。使用捕获更改数据技术(change data capture,CDC)，在源数据库的数据更改提交后，这些额外的工作可以被放在独立的线程或者进程(服务)中完成。这种实现方式的容错性更好，不会丢失事件，容易扩展，并且更容易支持升级。&lt;/p&gt;
&lt;h3&gt;共享数据库(Sharing databases)&lt;/h3&gt;
&lt;p&gt;当多个应用共用同一个数据库的时候，一个应用提交的更改通常要被另一个应用感知到。一种实现方式是使用消息总线，尽管非事务性(non-transactional)的消息总线总会受上面提到的双写(dual-writes)影响。但是，另一种实现方式，即Debezium，变得很直接：每个应用可以直接监控数据库的更改，并且响应更改。&lt;/p&gt;
&lt;h3&gt;数据集成(Data integration)&lt;/h3&gt;
&lt;p&gt;数据通常被存储在多个地方，尤其是当数据被用于不同的目的的时候，会有不同的形式。保持多系统的同步是很有挑战性的，但是可以通过使用Debezium加上简单的事件处理逻辑来实现简单的ETL类型的解决方案.&lt;/p&gt;
&lt;h3&gt;命令查询职责分离&lt;/h3&gt;
&lt;p&gt;在命令查询职责分离(Command Query Responsibility Separation,CQRS)架构模式中，更新数据使用了一种数据模型，读数据使用了一种或者多种数据模型。由于数据更改被记录在更新侧(update-side)，这些更改将被处理以更新各种读展示。所以CQRS应用通常更复杂，尤其是他们需要保证可靠性和全序(totally-ordered)处理。Debezium和CDC可以使这种方式更可行：写操作被正常记录，但是Debezium捕获数据更改，并且持久化到全序流里，然后供那些需要异步更新只读视图的服务消费。写侧(write-side)表可以表示面向领域的实体(domain-oriented entities)，或者当CQRS和Event Sourcing结合的时候，写侧表仅仅用做追加操作命令事件的日志。&lt;/p&gt;
&lt;h1&gt;Debezium:kafka 连接器配置&lt;/h1&gt;
&lt;p&gt;kafka提供两种连接器&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;connect-standalone.sh&lt;/code&gt;用于测试开发&lt;/h2&gt;
&lt;h2&gt;&lt;code&gt;connect-distributed.sh&lt;/code&gt;用于正式环境线上&lt;/h2&gt;
&lt;h3&gt;distributed模式常用API&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /connectors
&lt;span class="c1"&gt;# return a list of active connectors 返回活跃的connectors&lt;/span&gt;

POST /connectors
&lt;span class="c1"&gt;#create a new connector; the request body should be a JSON object containing a string name field and an object config field with the connector configuration parameters  创建一个新的connector&lt;/span&gt;

GET /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#get information about a specific connector 获取指定connetor的信息&lt;/span&gt;

GET /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/config
&lt;span class="c1"&gt;#get the configuration parameters for a specific connector 获取指定connector的配置信息&lt;/span&gt;

PUT /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/config
&lt;span class="c1"&gt;#update the configuration parameters for a specific connector 更新指定connector的配置信息&lt;/span&gt;

GET /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/status
&lt;span class="c1"&gt;#get current status of the connector, including if it is running, failed, paused, etc., which worker it is assigned to, error information if it has failed, and the state of all its tasks 获取指定connector状态&lt;/span&gt;

GET /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/tasks
&lt;span class="c1"&gt;#get a list of tasks currently running for a connector 获取指定connector正在运行的task&lt;/span&gt;

GET /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/tasks/&lt;span class="o"&gt;{&lt;/span&gt;taskid&lt;span class="o"&gt;}&lt;/span&gt;/status
&lt;span class="c1"&gt;#get current status of the task, including if it is running, failed, paused, etc., which worker it is assigned to, and error information if it has failed 获取指定connector的task状态信息&lt;/span&gt;

PUT /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/pause
&lt;span class="c1"&gt;#pause the connector and its tasks, which stops message processing until the connector is resumed 暂停connector和它的task&lt;/span&gt;

PUT /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/resume
&lt;span class="c1"&gt;#resume a paused connector (or do nothing if the connector is not paused) 恢复一个被暂停的connector&lt;/span&gt;

POST /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/restart
&lt;span class="c1"&gt;#restart a connector (typically because it has failed) 重启一个connector &lt;/span&gt;

POST /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;/tasks/&lt;span class="o"&gt;{&lt;/span&gt;taskId&lt;span class="o"&gt;}&lt;/span&gt;/restart
&lt;span class="c1"&gt;#restart an individual task (typically because it has failed) 重启一个task&lt;/span&gt;

DELETE /connectors/&lt;span class="o"&gt;{&lt;/span&gt;name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#delete a connector, halting all tasks and deleting its configuration 删除一个connector&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/sweatOtt/article/details/82430724"&gt;https://blog.csdn.net/sweatOtt/article/details/82430724&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://debezium.io/docs/connectors/mysql/"&gt;https://debezium.io/docs/connectors/mysql/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.tencent.com/developer/article/1406851"&gt;https://cloud.tencent.com/developer/article/1406851&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.confluent.io/current/connect/references/restapi.html"&gt;https://docs.confluent.io/current/connect/references/restapi.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/lzufeng/article/details/81606825"&gt;Debezium的MySQL连接器的工作原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="bigdata"></category><category term="debezium"></category></entry><entry><title>Redash环境搭建及二次开发</title><link href="xixuebin.github.io/2019-05-28-103541-ch.html" rel="alternate"></link><published>2019-05-28T10:35:41+08:00</published><updated>2019-05-28T10:35:41+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-05-28:xixuebin.github.io/2019-05-28-103541-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;blockquote&gt;
&lt;p&gt;Redash 是一款开源的 BI 工具，提供了基于 web 的数据库查询和数据可视化功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Mac安装redash依赖&lt;/h1&gt;
&lt;p&gt;Redash依赖redis和postgres作为缓存和元数据存储,所以在部署之前先要安装Redis和PostgreSQL&lt;/p&gt;
&lt;h2&gt;mac安装redis&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install redis
brew services start redis //启动redis
brew services stop redis
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;mac安装postgreSQL&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install postgresql
brew services start postgresq
initdb /usr/local/var/postgre //初始化数据库
brew services restart postgresql //重启数据库
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装&lt;/h1&gt;
&lt;h2&gt;安装python依赖包&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt -r requirements_dev.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装nodejs的包&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install  //安装node的包
npm run build //进行一次完整build
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;在开发环境中,使用默认的配置能满足绝大多数的需求,如果要覆盖默认配置.需要在redash的根目录下设置一个.env文件,在该文件中设置环境变量,覆盖默认的.&lt;/p&gt;
&lt;p&gt;查看所有变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/run ./manage.py check_settings
&lt;span class="nv"&gt;JSON_AS_ASCII&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;AUTH_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; api_key
&lt;span class="nv"&gt;MAIL_DEFAULT_SENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;RATELIMIT_STRATEGY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; fixed-window
&lt;span class="nv"&gt;FEATURE_AUTO_PUBLISH_NAMED_QUERIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;HSTS_MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;31556926&lt;/span&gt;
&lt;span class="nv"&gt;ENFORCE_HTTPS_PERMANENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SESSION_REFRESH_EACH_REQUEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;CELERY_BROKER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redis://localhost:6379/0
&lt;span class="nv"&gt;REDIS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redis://localhost:6379/0
&lt;span class="nv"&gt;TIME_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; HH:mm
&lt;span class="nv"&gt;SQLALCHEMY_COMMIT_ON_TEARDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;ALLOW_PARAMETERS_IN_EMBEDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;JOB_EXPIRY_TIME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;43200&lt;/span&gt;
&lt;span class="nv"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;KYLIN_OFFSET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;LDAP_SEARCH_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;username&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_AUTHORIZE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://yourauthn.com/oauth2.0/authorize
&lt;span class="nv"&gt;COOKIES_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;MAIL_MAX_EMAILS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;REMEMBER_COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SENTRY_DSN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_CHECK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;STATSD_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="nv"&gt;QUERY_RESULTS_CLEANUP_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;REMEMBER_COOKIE_HTTPONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;MULTI_ORG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;asctime&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;PID:%&lt;span class="o"&gt;(&lt;/span&gt;process&lt;span class="o"&gt;)&lt;/span&gt;d&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;levelname&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;]&lt;/span&gt; %&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;s
&lt;span class="nv"&gt;RATELIMIT_SWALLOW_ERRORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;QLOUD_ACCESS_TOKEN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://yourauthn.com/oauth2.0/accessToken
&lt;span class="nv"&gt;FRAME_OPTIONS_ALLOW_FROM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;RATELIMIT_HEADER_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; X-RateLimit-Limit
&lt;span class="nv"&gt;JSONIFY_MIMETYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; application/json
&lt;span class="nv"&gt;PROXIES_COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_OAUTH_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;ACCESS_CONTROL_REQUEST_METHOD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; GET, POST, PUT
&lt;span class="nv"&gt;ACCESS_CONTROL_ALLOW_ORIGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; set&lt;span class="o"&gt;([])&lt;/span&gt;
&lt;span class="nv"&gt;EVENT_REPORTING_WEBHOOKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;RATELIMIT_HEADERS_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;RATELIMIT_HEADER_RESET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; X-RateLimit-Reset
&lt;span class="nv"&gt;ENFORCE_FILE_SAVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;LDAP_LOGIN_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;HSTS_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;LIMITER_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redis://localhost:6379/0
&lt;span class="nv"&gt;STATSD_USE_TAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; DD/MM/YY
&lt;span class="nv"&gt;DASHBOARD_REFRESH_INTERVALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;, &lt;span class="m"&gt;300&lt;/span&gt;, &lt;span class="m"&gt;600&lt;/span&gt;, &lt;span class="m"&gt;1800&lt;/span&gt;, &lt;span class="m"&gt;3600&lt;/span&gt;, &lt;span class="m"&gt;43200&lt;/span&gt;, &lt;span class="m"&gt;86400&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;FEATURE_POLICY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;CELERY_RESULT_EXPIRES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;14400&lt;/span&gt;
&lt;span class="nv"&gt;DATASOURCE_SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c292a0a3aa32397cdb050e233733900f
&lt;span class="nv"&gt;FEATURE_SHOW_QUERY_RESULTS_COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;SESSION_COOKIE_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;SESSION_COOKIE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; session
&lt;span class="nv"&gt;REMOTE_USER_LOGIN_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;CONTENT_SECURITY_POLICY_REPORT_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;LOGGER_HANDLER_POLICY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; always
&lt;span class="nv"&gt;SQLALCHEMY_RECORD_QUERIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QLOUD_CLIENT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; qloud10070901oauth21
&lt;span class="nv"&gt;ALERTS_DEFAULT_MAIL_SUBJECT_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;({&lt;/span&gt;state&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;alert_name&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;MAIL_USE_SSL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;QLOUD_AUTH_STOMP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;61613&lt;/span&gt;
&lt;span class="nv"&gt;GOOGLE_CLIENT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SQLALCHEMY_NATIVE_UNICODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;MAX_CONTENT_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;LDAP_HOST_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;LDAP_SEARCH_DN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QUERY_RESULTS_CLEANUP_MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="nv"&gt;PERMANENT_SESSION_LIFETIME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt; days, &lt;span class="m"&gt;0&lt;/span&gt;:00:00
&lt;span class="nv"&gt;PAGE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_CLIENT_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; OUO10070901JN32rewffFE3
&lt;span class="nv"&gt;SQLALCHEMY_MAX_OVERFLOW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QLOUD_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://yourauthn.com
&lt;span class="nv"&gt;LDAP_SSL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;TRAP_HTTP_EXCEPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;FEATURE_ALLOW_CUSTOM_JS_VISUALIZATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;REMOTE_USER_HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; X-Forwarded-Remote-User
&lt;span class="nv"&gt;LDAP_BIND_DN_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;PRESERVE_CONTEXT_ON_EXCEPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;BIGQUERY_HTTP_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;
&lt;span class="nv"&gt;ENFORCE_HTTPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SQLALCHEMY_ECHO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;STATIC_ASSETS_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /Users/xixuebin/PycharmProjects/huaruan/qloud-redash/redash/settings/../../client/dist/
&lt;span class="nv"&gt;CONTENT_SECURITY_POLICY_REPORT_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SESSION_COOKIE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QLOUD_AUTH_STOMP_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; qloudstomp.service.sd
&lt;span class="nv"&gt;ACCESS_CONTROL_ALLOW_CREDENTIALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SQLPARSE_FORMAT_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;keyword_case&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;upper&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;reindent&amp;#39;&lt;/span&gt;: True&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;GOOGLE_CLIENT_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;ACCESS_CONTROL_ALLOW_HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Content-Type
&lt;span class="nv"&gt;LDAP_AUTH_METHOD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; SIMPLE
&lt;span class="nv"&gt;LDAP_DISPLAY_NAME_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; displayName
&lt;span class="nv"&gt;HSTS_PRELOAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;LOGGER_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redash.app
&lt;span class="nv"&gt;KYLIN_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;50000&lt;/span&gt;
&lt;span class="nv"&gt;LDAP_BIND_DN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QUERY_RESULTS_CLEANUP_COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c292a0a3aa32397cdb050e233733900f
&lt;span class="nv"&gt;CONTENT_SECURITY_POLICY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; default-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; style-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unsafe-inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; script-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unsafe-eval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; font-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt; data:&lt;span class="p"&gt;;&lt;/span&gt; img-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt; http: https: data:&lt;span class="p"&gt;;&lt;/span&gt; object-src &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; frame-ancestors &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; frame-src redash.io&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_AUTH_DOMAIN_CHECK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;STATSD_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redash
&lt;span class="nv"&gt;LOG_LEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; INFO
&lt;span class="nv"&gt;APPLICATION_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;SERVER_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;LDAP_CUSTOM_USERNAME_PROMPT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; LDAP/AD/SSO username:
&lt;span class="nv"&gt;PREFERRED_URL_SCHEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http
&lt;span class="nv"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;TEMPLATES_AUTO_RELOAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;MAIL_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;SCHEMAS_REFRESH_SCHEDULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="nv"&gt;CELERYD_WORKER_LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;asctime&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;PID:%&lt;span class="o"&gt;(&lt;/span&gt;process&lt;span class="o"&gt;)&lt;/span&gt;d&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;levelname&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;processName&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;]&lt;/span&gt; %&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;s
&lt;span class="nv"&gt;ALLOW_SCRIPTS_IN_USER_INPUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;FRAME_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; deny
&lt;span class="nv"&gt;SQLALCHEMY_POOL_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;MAIL_ASCII_ATTACHMENTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;MAIL_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; localhost
&lt;span class="nv"&gt;QLOUD_AUTH_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_PROFILE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://yourauthn.com/oauth2.0/profile?access_token&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;RATELIMIT_HEADER_REMAINING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; X-RateLimit-Remaining
&lt;span class="nv"&gt;RATELIMIT_HEADER_RETRY_AFTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Retry-After
&lt;span class="nv"&gt;LDAP_EMAIL_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mail
&lt;span class="nv"&gt;USE_X_SENDFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;GOOGLE_OAUTH_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; postgresql:///postgres
&lt;span class="nv"&gt;SQLALCHEMY_DISABLE_POOL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;MAIL_USE_TLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SESSION_COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SCHEMA_RUN_TABLE_SIZE_CALCULATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;SQLALCHEMY_BINDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;PAGE_SIZE_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;, &lt;span class="m"&gt;50&lt;/span&gt;, &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;LOG_STDOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;TABLE_CELL_MAX_JSON_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;50000&lt;/span&gt;
&lt;span class="nv"&gt;QLOUD_USERS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http://qmsauthz.pditdop.service.sd/users
&lt;span class="nv"&gt;KYLIN_ACCEPT_PARTIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;FEATURE_DISABLE_REFRESH_QUERIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;QUERY_REFRESH_INTERVALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;, &lt;span class="m"&gt;300&lt;/span&gt;, &lt;span class="m"&gt;600&lt;/span&gt;, &lt;span class="m"&gt;900&lt;/span&gt;, &lt;span class="m"&gt;1800&lt;/span&gt;, &lt;span class="m"&gt;3600&lt;/span&gt;, &lt;span class="m"&gt;7200&lt;/span&gt;, &lt;span class="m"&gt;10800&lt;/span&gt;, &lt;span class="m"&gt;14400&lt;/span&gt;, &lt;span class="m"&gt;18000&lt;/span&gt;, &lt;span class="m"&gt;21600&lt;/span&gt;, &lt;span class="m"&gt;25200&lt;/span&gt;, &lt;span class="m"&gt;28800&lt;/span&gt;, &lt;span class="m"&gt;32400&lt;/span&gt;, &lt;span class="m"&gt;36000&lt;/span&gt;, &lt;span class="m"&gt;39600&lt;/span&gt;, &lt;span class="m"&gt;43200&lt;/span&gt;, &lt;span class="m"&gt;86400&lt;/span&gt;, &lt;span class="m"&gt;604800&lt;/span&gt;, &lt;span class="m"&gt;1209600&lt;/span&gt;, &lt;span class="m"&gt;2592000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;EXPLAIN_TEMPLATE_LOADING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;THROTTLE_LOGIN_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;/hour
&lt;span class="nv"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; redis://localhost:6379/0
&lt;span class="nv"&gt;DESTINATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.destinations.email&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.slack&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.webhook&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.hipchat&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.mattermost&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.chatwork&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.pagerduty&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.destinations.hangoutschat&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;SCHEMAS_REFRESH_QUEUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; celery
&lt;span class="nv"&gt;SQLALCHEMY_POOL_RECYCLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;CELERYD_WORKER_TASK_LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;asctime&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;PID:%&lt;span class="o"&gt;(&lt;/span&gt;process&lt;span class="o"&gt;)&lt;/span&gt;d&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;levelname&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;][&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;processName&lt;span class="o"&gt;)&lt;/span&gt;s&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;task_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;task_name&lt;span class="o"&gt;)&lt;/span&gt;s &lt;span class="nv"&gt;task_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;%&lt;span class="o"&gt;(&lt;/span&gt;task_id&lt;span class="o"&gt;)&lt;/span&gt;s %&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;s
&lt;span class="nv"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;RATELIMIT_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;MAIL_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;QLOUD_LOGOUT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://yourauthn.com/logout?service&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;JSONIFY_PRETTYPRINT_REGULAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;SQLALCHEMY_POOL_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;PROPAGATE_EXCEPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; None
&lt;span class="nv"&gt;TRAP_BAD_REQUEST_ERRORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;STATSD_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8125&lt;/span&gt;
&lt;span class="nv"&gt;JSON_SORT_KEYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;SESSION_COOKIE_HTTPONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;SEND_FILE_MAX_AGE_DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:00:00
&lt;span class="nv"&gt;MAIL_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;
&lt;span class="nv"&gt;QUERY_RUNNERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.query_runner.athena&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.big_query&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.google_spreadsheets&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.graphite&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.mongodb&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.couchbase&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.mysql&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.pg&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.url&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.influx_db&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.elasticsearch&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.amazon_elasticsearch&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.presto&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.databricks&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.hive_ds&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.impala_ds&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.vertica&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.clickhouse&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.yandex_metrica&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.rockset&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.treasuredata&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.sqlite&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.dynamodb_sql&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.mssql&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.memsql_ds&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.mapd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.jql&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.google_analytics&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.axibase_tsd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.salesforce&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.query_results&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.prometheus&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.qubole&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.db2&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.druid&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.kylin&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.drill&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.uptycs&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.snowflake&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;redash.query_runner.phoenix&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;REFERRER_POLICY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; strict-origin-when-cross-origin
&lt;span class="nv"&gt;INVITATION_TOKEN_MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;604800&lt;/span&gt;
&lt;span class="nv"&gt;CONTENT_SECURITY_POLICY_NONCE_IN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;HSTS_INCLUDE_SUBDOMAINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/run ./manage.py database create_tables
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在创建数据库的时候,如果有异常,请检查数据库的配置.配置类似:&lt;code&gt;export SQLALCHEMY_DATABASE_URI=postgresql://postgres@XX.XX.XX.XX:15432/postgre&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;服务启动&lt;/h3&gt;
&lt;p&gt;Redash主要的进程有2个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web server&lt;/li&gt;
&lt;li&gt;Celery worker(s) &amp;amp; Scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发环境中,我们也可以运行Webpack's dev server or watch utiliy, 命令如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web server: &lt;code&gt;bin/run ./manage.py runserver --debugger --reload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Celery: &lt;code&gt;./bin/run celery worker --app=redash.worker --beat --Qscheduled_queries,queries,celery -c2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Webpack dev server: &lt;code&gt;npm run start&lt;/code&gt;
如果一切服务运行正常,可访问页面&lt;a href="http://127.0.0.1:5000"&gt;http://127.0.0.1:5000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;与Auth集成&lt;/h1&gt;
&lt;p&gt;Redash本身支持smal协议,也可以使用GOOGLE账号进行登录,使用google账号登录的时候,后跳使用的就是Oauth协议.我们这里介绍使用OAuth2与自己的认证集成的过程.&lt;/p&gt;
&lt;h2&gt;创建.env文件&lt;/h2&gt;
&lt;p&gt;创建.env文件,填写需要使用的参数,例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;qloud10070901oauth21
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_CLIENT_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OUO10070901JN32rewffFE3
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_ACCESS_TOKEN_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://yourauthn.com/oauth2.0/accessToken
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_AUTHORIZE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://yourauthn.com/oauth2.0/authorize
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_BASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://yourauthn.com
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_PROFILE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://yourauthn.com/oauth2.0/profile?access_token&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_LOGOUT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://yourauthn.com/logout?service&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_USERS_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://qmsauthz.pditdop.service.sd/users
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_AUTH_DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;redash.com
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_AUTH_DOMAIN_CHECK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_AUTH_STOMP_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;qloudstomp.service.sd
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;REDASH_YOUR_AUTH_STOMP_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;61613&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;获取设置的环境变量值&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QLOUD_CLIENT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_CLIENT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_CLIENT_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_ACCESS_TOKEN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_ACCESS_TOKEN_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_AUTHORIZE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_AUTHORIZE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_BASE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_PROFILE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_PROFILE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_LOGOUT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_LOGOUT_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_USERS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_USERS_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_AUTH_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_AUTH_DOMAIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_AUTH_DOMAIN_CHECK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TRUE&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_AUTH_DOMAIN_CHECK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_AUTH_STOMP_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_AUTH_STOMP_ADDRESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;QLOUD_AUTH_STOMP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDASH_YOUR_AUTH_STOMP_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61613&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;QLOUD_OAUTH_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QLOUD_CLIENT_ID&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;QLOUD_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;添加认证代码&lt;/h2&gt;
&lt;p&gt;redash的认证相关的代码都是在redash.authentication目录下,我们创建一个自己的认证文件your_oauth.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ssl&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_oauthlib.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OAuth&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redash.authentication&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_and_login_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logout_and_redirect_to_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_next_path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;redash.authentication.org_resolving&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_org&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qloud_oauth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;oauth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;blueprint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qloud_oauth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_create_default_https_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_create_unverified_context&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;qloud_remote_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qloud&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qloud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_BASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;authorize_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_AUTHORIZE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;request_token_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;request_token_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
                                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_AUTHORIZE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_ACCESS_TOKEN_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_PROFILE_URL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="p"&gt;},&lt;/span&gt;
                         &lt;span class="n"&gt;access_token_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_ACCESS_TOKEN_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;access_token_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_CLIENT_ID&lt;/span&gt;
                         &lt;span class="p"&gt;},&lt;/span&gt;
                         &lt;span class="n"&gt;access_token_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qloud&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# headers = {&amp;#39;Authorization&amp;#39;: &amp;#39;OAuth {}&amp;#39;.format(access_token)}&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;access token is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# logger.info(&amp;#39;header is %s&amp;#39;, headers)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requst url is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_PROFILE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_PROFILE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed getting user profile (response code 401).&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attributes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_AUTH_DOMAIN_CHECK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;all user will sync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;domain is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_AUTH_DOMAIN_CHECK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_AUTH_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="nd"&gt;@blueprint.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;org_slug&amp;gt;/oauth/qloud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;authorize_org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;org_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org_slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="nd"&gt;@blueprint.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/oauth/qloud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.callback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;next_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redash.index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org_slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Callback url: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Next is: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qloud_remote_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@blueprint.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/oauth/qloud_callback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorized&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qloud_remote_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorized_response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;access_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access token missing in call back request.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Validation error. Please retry.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Validation error. Please retry.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user profile is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# id  mapping to name&lt;/span&gt;
    &lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;org_slug&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Organization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_by_slug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;org_slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_org&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;verify_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User tried to login with unauthorized domain name: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; (org: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your Qloud Apps account ({}) isn&amp;#39;t allowed.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="c1"&gt;# check failed, please logout&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash.logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;picture_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;?sz=40&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;picture_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_and_login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;picture_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;logout_and_redirect_to_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;unsafe_next_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redash.index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;next_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_next_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsafe_next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;修改login,登录跳转到自己的登录页面&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_qloud_auth_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MULTI_ORG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;qloud_auth_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qloud_oauth.authorize_org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;qloud_auth_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qloud_oauth.authorize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qloud_auth_url&lt;/span&gt;

&lt;span class="c1"&gt;# 修改方法def login(org_slug=None),添加如下代码&lt;/span&gt;

&lt;span class="n"&gt;qloud_auth_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_qloud_auth_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_OAUTH_ENABLED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redirect to qloud auth &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;qloud_auth_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qloud_auth_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;修改登录函数,实现sso登出&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@routes.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_scoped_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_OAUTH_ENABLED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redirect to qloud auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;logout url &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_LOGOUT_URL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;get_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/qloud-auth/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_LOGOUT_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qloud-auth/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QLOUD_LOGOUT_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qloud-auth/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;redash默认的用户登录信息是在客户端的cookie中存储的,无法实现从sso登出之后,实现redash登录,如果需要实现的话,应该修改redsh的session存储
在SSO登出的时候,通知redash在Server端删除session.等下次客户端访问的时候,进行cookie的删除.具体做法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#在app.py中,导入flask_session&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="c1"&gt;#在create_app方法中添加如下代码&lt;/span&gt;

&lt;span class="c1"&gt;# set session in redis&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SESSION_TYPE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SESSION_KEY_PREFIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redash-session:&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SESSION_REDIS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在SSO回调的方法中,删除用户session&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#该方法为sso的回调方法&lt;/span&gt;
&lt;span class="nd"&gt;@routes.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_scoped_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/qloud-auth/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;qloud_auth_logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;begin to qloud-auth logout with post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logoutRequest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request data is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_name &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_by_name_and_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_id &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;__delete_server_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoResultFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do not found user with request body &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;begin to qloud-auth logout with get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__delete_server_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash-session:*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;session value is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;V&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在loader_user的时候,进行session查询和判断,没有找到session,通知客户端,删除cookie&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__check_server_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redash-session:*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;session value is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_id_with_identity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="nd"&gt;@login_manager.user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_current_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Users who logged in prior to https://github.com/getredash/redash/pull/3174 going live are going&lt;/span&gt;
&lt;span class="sd"&gt;    to have their (integer) user_id as their session user identifier.&lt;/span&gt;
&lt;span class="sd"&gt;    These session user identifiers will be updated the first time they visit any page so we add special&lt;/span&gt;
&lt;span class="sd"&gt;    logic to allow a frictionless transition.&lt;/span&gt;
&lt;span class="sd"&gt;    This logic will be removed 2-4 weeks after going live, and users who haven&amp;#39;t&lt;/span&gt;
&lt;span class="sd"&gt;    visited any page during that time will simply have to log in again.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;session is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_legacy_session_identifier is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;is_legacy_session_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_legacy_session_identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_by_id_and_org&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_legacy_session_identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;__check_server_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id_with_identity&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# if server session dose not exist,note client to delete cookie&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_fresh&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_fresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;cookie_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REMEMBER_COOKIE_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remember_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cookie_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;remember&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clear&amp;#39;&lt;/span&gt;

            &lt;span class="n"&gt;user_logged_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_current_object&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoResultFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;/h2&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redash.io/"&gt;https://redash.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redash.io/help/open-source/dev-guide/setup"&gt;https://redash.io/help/open-source/dev-guide/setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redash.io/help/open-source/dev-guide/docker"&gt;https://redash.io/help/open-source/dev-guide/docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/9e91aa8782da"&gt;https://www.jianshu.com/p/9e91aa8782da&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getredash/redash"&gt;https://github.com/getredash/redash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Redash"></category></entry><entry><title>使用python链接stompy</title><link href="xixuebin.github.io/2019-05-28-100323-ch.html" rel="alternate"></link><published>2019-05-28T10:03:23+08:00</published><updated>2019-05-28T10:03:23+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-05-28:xixuebin.github.io/2019-05-28-100323-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;STOMP协议详解&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。STOMP协议的前身是TTMP协议（一个简单的基于文本的协议），专为消息中间件设计。STOMP是一个非常简单和容易实现的协议，其设计灵感源自于HTTP的简单性。尽管STOMP协议在服务器端的实现可能有一定的难度，但客户端的实现却很容易。例如，可以使用Telnet登录到任何的STOMP代理，并与STOMP代理进行交互。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Stomp的实现&lt;/h1&gt;
&lt;p&gt;业界已经有很多优秀的Stomp的服务器/客户端的开源实现.&lt;/p&gt;
&lt;h2&gt;STOMP服务器&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目名&lt;/th&gt;
&lt;th align="center"&gt;兼容STOMP的版本&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apache Apollo&lt;/td&gt;
&lt;td align="center"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;ActiveMQ的继承者 http://activemq.apache.org/apollo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache ActiveMQ&lt;/td&gt;
&lt;td align="center"&gt;1.0 1.1&lt;/td&gt;
&lt;td align="left"&gt;流行的开源消息服务器 http://activemq.apache.org/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HornetQ&lt;/td&gt;
&lt;td align="center"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;来自JBoss的消息中间件 http://www.jboss.org/hornetq&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ&lt;/td&gt;
&lt;td align="center"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;基于Erlang、支持多种协议的消息Broker，通过插件支持STOMP协议 http://www.rabbitmq.com/plugins.html#rabbitmq-stomp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stampy&lt;/td&gt;
&lt;td align="center"&gt;1.2&lt;/td&gt;
&lt;td align="left"&gt;STOMP 1.2规范的一个Java实现 http://mrstampy.github.com/Stampy/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StompServer&lt;/td&gt;
&lt;td align="center"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;一个轻量级的纯Ruby实现的STOMP服务器 http://stompserver.rubyforge.org/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;STOMP客户端&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目名&lt;/th&gt;
&lt;th align="left"&gt;兼容STOMP的版本&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;activemessaging&lt;/td&gt;
&lt;td align="left"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;Ruby客户端库 http://code.google.com/p/activemessaging/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onstomp&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1&lt;/td&gt;
&lt;td align="left"&gt;Ruby客户端库 https://rubygems.org/gems/onstomp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache CMS&lt;/td&gt;
&lt;td align="left"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;C++客户端库 http://activemq.apache.org/cms/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Net::STOMP::Client&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;Perl客户端库 http://search.cpan.org/dist/Net-STOMP-Client/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gozirra&lt;/td&gt;
&lt;td align="left"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;Java客户端库 http://www.germane-software.com/software/Java/Gozirra/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libstomp&lt;/td&gt;
&lt;td align="left"&gt;1.0&lt;/td&gt;
&lt;td align="left"&gt;C客户端库，基于APR库 http://stomp.codehaus.org/C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stampy&lt;/td&gt;
&lt;td align="left"&gt;1.2&lt;/td&gt;
&lt;td align="left"&gt;Java客户端库 http://mrstampy.github.com/Stampy/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stomp.js&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1&lt;/td&gt;
&lt;td align="left"&gt;JavaScript客户端库 http://jmesnil.net/stomp-websocket/doc/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stompest&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;Python客户端库，全功能实现，包括同步和异步 https://github.com/nikipore/stompest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StompKit&lt;/td&gt;
&lt;td align="left"&gt;1.2&lt;/td&gt;
&lt;td align="left"&gt;Objective-C客户端库，事件驱动 https://github.com/mobile-web-messaging/StompKit/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stompngo&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;Go客户端库 https://github.com/gmallard/stompngo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stomp.py&lt;/td&gt;
&lt;td align="left"&gt;1.0 1.1 1.2&lt;/td&gt;
&lt;td align="left"&gt;Python客户端库 https://github.com/jasonrbriggs/stomp.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tStomp&lt;/td&gt;
&lt;td align="left"&gt;1.1&lt;/td&gt;
&lt;td align="left"&gt;TCL客户端库 https://github.com/siemens/tstomp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;STOMP协议分析&lt;/h2&gt;
&lt;p&gt;STOMP协议与HTTP协议很相似，它基于TCP协议，使用了以下命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CONNECT&lt;/li&gt;
&lt;li&gt;SEND&lt;/li&gt;
&lt;li&gt;SUBSCRIBE&lt;/li&gt;
&lt;li&gt;UNSUBSCRIBE&lt;/li&gt;
&lt;li&gt;BEGIN&lt;/li&gt;
&lt;li&gt;COMMIT&lt;/li&gt;
&lt;li&gt;ABORT&lt;/li&gt;
&lt;li&gt;ACK&lt;/li&gt;
&lt;li&gt;NACK&lt;/li&gt;
&lt;li&gt;DISCONNECT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;STOMP的客户端和服务器之间的通信是通过“帧”（Frame）实现的，每个帧由多“行”（Line）组成。
第一行包含了命令，然后紧跟键值对形式的Header内容。
第二行必须是空行。
第三行开始就是Body内容，末尾都以空字符结尾。
STOMP的客户端和服务器之间的通信是通过MESSAGE帧、RECEIPT帧或ERROR帧实现的，它们的格式相似。&lt;/p&gt;
&lt;h1&gt;Stomp的python Demo&lt;/h1&gt;
&lt;p&gt;在demo中,我们选择的类库是stomp.py, 使用的版本是4.1.20,&lt;code&gt;stomp.py==4.1.20&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;stomp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;engine.common&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;case_log&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_call_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;******************Receive New Data******************&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;****************************************************&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stomp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionListener&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;received an error &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;received a headers &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;received a message &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# key = headers.get(&amp;#39;ack&amp;#39;, None)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessSendOrRecv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;61613&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stomp init&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stomp init.[{0}]:[{1}]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stomp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection12&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="n"&gt;call_back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;default_call_back&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logicServerQueue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;lstnr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;call_back&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip: {0}, port: {1} ,connected!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;case_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip: {0}, port: {1} ,connected!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;QLOUD_TEST_ENGINE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        发布信息到事业总线,发送消息到testQueue队列，指定consumerId=&amp;#39;88.3@6006&lt;/span&gt;
&lt;span class="sd"&gt;        :param destination: 接收消息的队列名称&lt;/span&gt;
&lt;span class="sd"&gt;        :param message: 消息内容&lt;/span&gt;
&lt;span class="sd"&gt;        :return: &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# print(&amp;quot;start to send message...&amp;quot;)&lt;/span&gt;
        &lt;span class="n"&gt;case_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Start to send message......&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recv_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;QLOUD_TEST_ENGINE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;subscription_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        从testQueue队列中接收消息，用selector过滤，只接收consumerId = &amp;#39;88.3@6006&amp;#39;的消息&lt;/span&gt;
&lt;span class="sd"&gt;        :param destination: 消息发送到的队列名称&lt;/span&gt;
&lt;span class="sd"&gt;        :param subscription_id: 消息订阅者的ID&lt;/span&gt;
&lt;span class="sd"&gt;        :return: None&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;case_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Listen Topic:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subscription_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ack_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receipt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receipt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;receipt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Send ACK Message, keyID:{0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;run forever&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stompmess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessSendOrRecv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30211&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;123456&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;order&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;stompmess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEST_ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscription_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9527&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stompmess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEST_ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;send_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;stompmess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# stompmess.disconnect()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/jhfyuf/article/details/86800382"&gt;https://blog.csdn.net/jhfyuf/article/details/86800382&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Stompy"></category></entry><entry><title>Java线程池原理及简单介绍</title><link href="xixuebin.github.io/2019-04-28-093340-ch.html" rel="alternate"></link><published>2019-04-28T09:33:40+08:00</published><updated>2019-04-28T09:33:40+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-28:xixuebin.github.io/2019-04-28-093340-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;线程池简介&lt;/h1&gt;
&lt;p&gt;多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元的闲置时间，增加处理器单元的吞吐能力。
    假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。
    如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。
                一个线程池包括以下四个基本组成部分：
                1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；
                2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；
                3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；
                4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。
线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。&lt;/p&gt;
&lt;h2&gt;继承体系&lt;/h2&gt;
&lt;h2&gt;原理分析&lt;/h2&gt;
&lt;h3&gt;核心参数分析&lt;/h3&gt;
&lt;h3&gt;线程创建规则&lt;/h3&gt;
&lt;h3&gt;资源回收&lt;/h3&gt;
&lt;h3&gt;排队策略&lt;/h3&gt;
&lt;h3&gt;拒绝策略&lt;/h3&gt;
&lt;h3&gt;提交任务&lt;/h3&gt;
&lt;h3&gt;关闭线程池&lt;/h3&gt;
&lt;h2&gt;几种线程池&lt;/h2&gt;
&lt;h1&gt;重要操作&lt;/h1&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.tencent.com/developer/article/1109643"&gt;Java线程池原理分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category></entry><entry><title>Kylo的安装</title><link href="xixuebin.github.io/2019-04-10-142510-ch.html" rel="alternate"></link><published>2019-04-10T14:25:10+08:00</published><updated>2019-04-10T14:25:10+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-10:xixuebin.github.io/2019-04-10-142510-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Kylo介绍&lt;/h1&gt;
&lt;p&gt;Kylo是一个基于Apache Hadoop和Apache Spark构建的功能丰富的数据湖平台.它提供了完整的数据湖解决方案,支持自动发数据摄取,数据准备和数据发现.它集成了有关元数据的捕获,安全和数据质量的最佳实践,包含和许多用Apache Spark和Apache hive进行数据湖操作的例子.&lt;/p&gt;
&lt;p&gt;另外Kylo还提供了灵活的数据处理框架(基于Apache NIFI),用于构建批处理或者流处理管道模板,以及在不影响数据治理要求的情况下实现自动服务功能.Kylo有一个集成的元数据服务器,目前与Mysql和Postgres等数据库兼容.此外Kylo可以与Apache Ranger或Sentry以及CDH Navigator或Ambari集成，以进行集群监控。&lt;/p&gt;
&lt;p&gt;Kylo的Web应用程序层提供面向业务用户的功能，包括数据分析师，数据管理员，数据科学家和IT运营人员。它利用Apache NiFi作为其调度程序和编排引擎，为设计具有200个处理器（数据连接器和转换）的新类型管道提供集成框架。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install MySQL (password: hadoop)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install mysql-server OR apt-get install mariadb-server &lt;span class="o"&gt;(&lt;/span&gt;recommand&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ensure that “/opt/” has root privileges.&lt;/li&gt;
&lt;li&gt;Download Java8 and extract to /opt/java8.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvf jdk-8u92-linux-x64.tar.gz
mv jdk1.8.0_92 java8
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Download Scala and extract data into /opt/scala2.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvf scala-2.12.2.tgz
mv scala-2.12.2 scala2
&lt;span class="c1"&gt;#wget https://downloads.lightbend.com/scala/2.12.2/scala-2.12.2.tgz -P /opt/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Download Spark2 and extract data into /opt/spark2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#wget http://d3kbcqa49mib13.cloudfront.net/spark-2.1.0-bin-hadoop2.7.tgz -P /opt/&lt;/span&gt;
tar -xvf spark-2.1.0-bin-hadoop2.7.tgz
mv spark-2.1.0-bin-hadoop2.7 spark2
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Download Maven3 using binary and extract data into /opt/maven3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# wget http://mirror.fibergrid.in/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz -P /opt/&lt;/span&gt;
tar -xvf apache-maven-3.5.0-bin.tar.gz
mv apache-maven-3.5.0 maven3
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Set environment variables in ~/.bashrc &amp;amp; “/etc/profile (for all users)” file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/java8
&lt;span class="nv"&gt;JRE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/java8/jre
&lt;span class="nv"&gt;SCALA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/scala2
&lt;span class="nv"&gt;SPARK_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/spark2
&lt;span class="nv"&gt;MAVEN_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/maven3
&lt;span class="nv"&gt;M2_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/maven3
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$JRE_HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$MAVEN_HOME&lt;/span&gt;/bin$:&lt;span class="nv"&gt;$M2_HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$SCALA_HOME&lt;/span&gt;/bin:&lt;span class="nv"&gt;$SPARK_HOME&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test Configuration&lt;/h2&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.treselle.com/blog/kylo-setup-for-data-lake-management/"&gt;Kylo的安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="bigdata"></category><category term="kylo"></category></entry><entry><title>Aws Athena Add Column</title><link href="xixuebin.github.io/2019-04-03-170411-ch.html" rel="alternate"></link><published>2019-04-03T17:04:11+08:00</published><updated>2019-04-03T17:04:11+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-03:xixuebin.github.io/2019-04-03-170411-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;AWS Athena添加列&lt;/h1&gt;
&lt;p&gt;在给AWS athena添加新的字段的时候,aws文档给出的方案主要是删除重新创建table,因为athena的数据本身是外部数据,我们删除的的只是元数据.本身这种操作方法没有问题,但是如果在我们的数据量非常大的时候,分区较多的情况下回出现新创建的表需要花费很长时间去重新load分区,这段时间内,没有load进来的数据,不能对外提供服务.&lt;/p&gt;
&lt;h2&gt;AWS文档中的在末尾添加列&lt;/h2&gt;
&lt;p&gt;如果您以 Athena 支持的任何格式（如 Parquet、ORC、Avro、JSON、CSV 和 TSV）创建表，则可以在表的末尾添加新的列。如果您使用 ORC 格式，必须配置 ORC 以便按名称读取。Parquet 默认是按名称读取的。有关信息，请参阅 ORC 和 Parquet 中的索引访问。&lt;/p&gt;
&lt;p&gt;在以下示例中，将删除现有 Parquet 表，并添加新 Parquet 表，在表的末尾新增 &lt;code&gt;comment&lt;/code&gt; 列：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;orders_parquet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;EXTERNAL&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;orders_parquet&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderkey&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderstatus&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;totalprice&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderdate&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderpriority&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;clerk&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shippriority&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;STORED&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;PARQUET&lt;/span&gt;
&lt;span class="k"&gt;LOCATION&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3://schema_updates/orders_parquet/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在以下示例中，将删除现有 CSV 表，并添加新 CSV 表，在表的末尾新增 &lt;code&gt;comment&lt;/code&gt; 列：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;orders_csv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;EXTERNAL&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;orders_csv&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderkey&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderstatus&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;totalprice&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderdate&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;orderpriority&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;clerk&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shippriority&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="k"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;ROW&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;DELIMITED&lt;/span&gt; &lt;span class="n"&gt;FIELDS&lt;/span&gt; &lt;span class="n"&gt;TERMINATED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;LOCATION&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3://schema_updates/orders_csv/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过和同事的研究,其实可以在不删除表的情况下修改athena的schema信息,操作方法是使用gule来更新athena的元数据.&lt;/p&gt;
&lt;h2&gt;通过glue给athana添加列&lt;/h2&gt;
&lt;p&gt;操作过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在glue页面,选择数据库,表的tab项目&lt;/li&gt;
&lt;li&gt;选择要操作的表,点击进入&lt;/li&gt;
&lt;li&gt;选择添加列&lt;/li&gt;
&lt;li&gt;输入列名,类型,列编号(字段顺序),是否是分区键&lt;/li&gt;
&lt;li&gt;操作完,点击保存之后,可以到athena页面看到新加的字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="2019-04-03-17-16-06" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/1f0c0024fdf3ec52e6c0694df15d5ab1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2019-04-03-17-21-49" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/b03e472b3bd2d4444e386b3829791485.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2019-04-03-17-18-05" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/0e615830d694d2f97862343313c23dd1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2019-04-03-17-20-09" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/d4a363cbf6455b7c55c4c4bdfafb2ba0.png"&gt;&lt;/p&gt;
&lt;p&gt;使用这种方法,不用重新建表,不需要重新load分区&lt;/p&gt;
&lt;h2&gt;通过类似impala的语法,直接操作athena&lt;/h2&gt;
&lt;p&gt;同事说也可以通过类似impala的语法,直接操作athena,添加列.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test_hive&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkg_name&lt;/span&gt; &lt;span class="n"&gt;STRING&lt;/span&gt; &lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add new field pkg_name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test_hive&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gift&lt;/span&gt; &lt;span class="n"&gt;STRING&lt;/span&gt; &lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add new field gift&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/zh_cn/athena/latest/ug/handling-schema-updates-chapter.html"&gt;Aws Athena处理结构更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="athena"></category><category term="glue"></category></entry><entry><title>数据湖</title><link href="xixuebin.github.io/2019-04-02-183955-ch.html" rel="alternate"></link><published>2019-04-02T18:39:55+08:00</published><updated>2019-04-02T18:39:55+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-02:xixuebin.github.io/2019-04-02-183955-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;什么是数据湖&lt;/h1&gt;
&lt;p&gt;数据库是一个集中式数据存储库,允许你以任意规模存储所有结构化好非结构化数据.你可以按原样存储数据(无需先对数据进行结构化处理),并运行不同类型的分析.从数据可视化到数据分析,机器学习等等.&lt;/p&gt;
&lt;h1&gt;为什么需要数据湖&lt;/h1&gt;
&lt;h1&gt;数据仓库架构&lt;/h1&gt;
&lt;p&gt;数据仓库是一种体系结构,而不是一种技术,数据仓库最为核心的内容分为2类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于关系数据库的多维模型&lt;/li&gt;
&lt;li&gt;基于数据立方体的OLAP查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2019-04-02-19-13-13" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/e7ebfe5f5621fdd149bcd0b3e2b65674.png"&gt;&lt;/p&gt;
&lt;p&gt;数据仓库体系结构中包含了从外部数据源或者数据库中抽取数据的ETL工具.ETL工具还负责数据的转换,清洗,然后加载到数据仓库的存储中.一般来说,数据都会加载到存取速度较慢的存储中,以元数据的方式保存下来.&lt;/p&gt;
&lt;p&gt;为了提高查询效率,原始数据会按主题分类,以聚合的方式存到数据集市中,称之为数据聚合.&lt;/p&gt;
&lt;p&gt;原始数据往往有多条聚合路径,时间维度是一个最基本的内置聚合路径,行政级别划分,产品属性也都是比较常见的聚合路径.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2019-04-02-19-22-48" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/c28a1170349bc28c3125717fcdccfc1e.png"&gt;&lt;/p&gt;
&lt;p&gt;数据仓库体系中还包括前端查询工具,报表工具和数据挖掘工具,被称为front-end.&lt;/p&gt;
&lt;p&gt;最后数据仓库体系中都包含一个构建数据仓库的元数据仓库.&lt;/p&gt;
&lt;p&gt;元数据仓库包含数据库schema,view用于ETL的metadata,用于数据聚合的metadata,用于报表呈现的metadata和SQL模板等.数据仓库往往采用meta data driver的架构设计,这个元数据仓库至关重要.&lt;/p&gt;
&lt;p&gt;维度是观察事物的角度,也是数据数据库事实表中用来描述数据分类的层次结构.维度在数据中就是表示为列，在SQL中用作过滤和分组。对数据进行多个维度的抽象,并借助数据库的select,group by 等基本操作形成的olap多维数据操作被称为多维数据模型.&lt;/p&gt;
&lt;h1&gt;数据立方体&lt;/h1&gt;
&lt;p&gt;数据立方体只是多维模型的一个说法,立方体只有三维,但是多维模型不仅限于三维模型,可以组合跟多维度的.&lt;/p&gt;
&lt;h1&gt;数据湖和数据仓库对比&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;数据仓库&lt;/th&gt;
&lt;th&gt;数据湖&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;来自事务系统、运营数据库和业务线应用程序的关系数据&lt;/td&gt;
&lt;td&gt;来自 IoT 设备、网站、移动应用程序、社交媒体和企业应用程序的非关系和关系数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;设计在数据仓库实施之前（写入型 Schema）&lt;/td&gt;
&lt;td&gt;写入在分析时（读取型 Schema）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性价比&lt;/td&gt;
&lt;td&gt;更快查询结果会带来较高存储成本&lt;/td&gt;
&lt;td&gt;更快查询结果只需较低存储成本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据质量&lt;/td&gt;
&lt;td&gt;可作为重要事实依据的高度监管数据&lt;/td&gt;
&lt;td&gt;任何可以或无法进行监管的数据（例如原始数据）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户&lt;/td&gt;
&lt;td&gt;业务分析师&lt;/td&gt;
&lt;td&gt;数据科学家、数据开发人员和业务分析师（使用监管数据）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分析&lt;/td&gt;
&lt;td&gt;批处理报告、BI 和可视化&lt;/td&gt;
&lt;td&gt;机器学习、预测分析、数据发现和分析&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;数据湖的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据存储 大容量低成本&lt;/li&gt;
&lt;li&gt;数据保真度 数据湖以原始的格式保存数据&lt;/li&gt;
&lt;li&gt;数据使用 数据湖中的数据可以方便的被使用&lt;/li&gt;
&lt;li&gt;延迟绑定 数据湖提供灵活的,面向任务的数据绑定,不需要提前定义数据模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.tencent.com/developer/article/1086221"&gt;深度|从数据仓库到数据湖——浅谈数据架构演进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hyperj.net/2017/2017-09-06-data-lake-architecture/"&gt;数据湖架构读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cn/big-data/datalakes-and-analytics/what-is-a-data-lake/"&gt;https://aws.amazon.com/cn/big-data/datalakes-and-analytics/what-is-a-data-lake/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="bigdata"></category></entry><entry><title>flink系列文章</title><link href="xixuebin.github.io/2019-04-01-174716-ch.html" rel="alternate"></link><published>2019-04-01T17:47:16+08:00</published><updated>2019-04-01T17:47:16+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-01:xixuebin.github.io/2019-04-01-174716-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Flink 系列文章&lt;/h1&gt;
&lt;h2&gt;flink源码系列-监控&lt;/h2&gt;
&lt;!-- ## Apache Flink 介绍

## Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门

## Flink 配置文件详解

## Data Source 介绍

## 如何自定义 Data Source ？

## Data Sink 介绍

## 如何自定义 Data Sink ？

## Flink Data transformation(转换)

## 介绍 Flink 中的 Stream Windows

## Flink 中的几种 Time 详解

## Flink 读取 Kafka 数据写入到 ElasticSearch

## Flink 项目如何运行？

## Flink 读取 Kafka 数据写入到 Kafka

## Flink JobManager 高可用性配置

## Flink parallelism 和 Slot 介绍

## Flink 读取 Kafka 数据批量写入到 MySQL

## Flink 读取 Kafka 数据写入到 RabbitMQ

## Flink 读取 Kafka 数据写入到 HBase

## Flink 读取 Kafka 数据写入到 HDFS

## Flink 读取 Kafka 数据写入到 Redis

## Flink 读取 Kafka 数据写入到 Cassandra

## Flink 读取 Kafka 数据写入到 Flume

## Flink 读取 Kafka 数据写入到 InfluxDB

## Flink 读取 Kafka 数据写入到 RocketMQ

## 你上传的 jar 包藏到哪里去了

## 你的 Flink job 日志跑到哪里去了 --&gt;</content><category term="flink"></category></entry><entry><title>Maven：mirror和repository区别</title><link href="xixuebin.github.io/2019-04-01-144303-ch.html" rel="alternate"></link><published>2019-04-01T14:43:03+08:00</published><updated>2019-04-01T14:43:03+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-01:xixuebin.github.io/2019-04-01-144303-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Internal Repository&lt;/h1&gt;
&lt;p&gt;Internal Repository是指在局域网内部构建的repository,它跟central repository的区别仅仅在于url指向的是一个内网网址.&lt;/p&gt;
&lt;h1&gt;mirror&lt;/h1&gt;
&lt;p&gt;mirror相当于一个代理,它会拦截去指定的远程仓库下载构建的请求,然后从自己这里找出构件回送给客户端。配置mirror的目的一般是出于网速考虑&lt;/p&gt;
&lt;p&gt;关于maven如何查找pom.xml里dependencies里配置的插件，暂且不考虑本地仓库的存在maven会根据最终的repository集合里依次查找，如果查到了就从该仓库下载，并且停止对后续repository的查找。所以可以看出用户在pom.xml里配置repository时，repository的顺序还是挺重要的。&lt;/p&gt;
&lt;p&gt;mirror是配置在maven的settings.xml文件中&lt;/p&gt;
&lt;h2&gt;mirror的定义&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;planetmirror.com&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;PlanetMirror Australia&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://downloads.planetmirror.com/pub/maven2&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class="nt"&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;id, name是该镜像的唯一定义符。id用来区分不同的mirror元素.
url是该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。
mirrorOf是被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库&lt;a href="http://repo1.maven.org/maven2"&gt;http://repo1.maven.org/maven2&lt;/a&gt;的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致.&lt;/p&gt;
&lt;h2&gt;repository的定义&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;offical&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Maven Official Repository&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo1.maven.org/maven2&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;jboss&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Jboss Repository&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repository.jboss.org/nexus/content/groups/public-jboss/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/u011768325/article/details/49735397"&gt;https://blog.csdn.net/u011768325/article/details/49735397&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="集成工具"></category><category term="maven"></category></entry><entry><title>使用DruidAPI dump Druid数据</title><link href="xixuebin.github.io/2019-04-01-092732-ch.html" rel="alternate"></link><published>2019-04-01T09:27:32+08:00</published><updated>2019-04-01T09:27:32+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-04-01:xixuebin.github.io/2019-04-01-092732-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;p&gt;在使用druid的时候,有时候需要更新druid的数据,一般通用的做法是dump出原始数据,进行数据更新,然后再重新load进去.目前需要dump出数据的时候,需要使用overload,需要使用命令行工具进行操作,dump到文件中.可是当数据量比较大,我们需要并行操作的时候并行操作的话,就不好处理了.因为没有可用的api.昨天翻了下源码,修改了下&lt;code&gt;DumpSegment&lt;/code&gt;工具,可以实现类似API的调用.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.druid.cli&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.fasterxml.jackson.core.JsonGenerator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.fasterxml.jackson.core.JsonProcessingException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.base.Function&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.base.Strings&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.base.Throwables&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.collect.ImmutableList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.collect.Iterables&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.collect.Lists&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.collect.Maps&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.collect.Sets&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.util.concurrent.MoreExecutors&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.inject.Injector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.inject.Key&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.collections.bitmap.BitmapFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.collections.bitmap.ConciseBitmapFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.collections.bitmap.ImmutableBitmap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.collections.bitmap.RoaringBitmapFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.common.ISE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.common.guava.Accumulator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.common.guava.Sequence&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.common.guava.Sequences&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.metamx.common.logger.Logger&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.granularity.QueryGranularities&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.guice.annotations.Json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.jackson.DefaultObjectMapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.DruidProcessingConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.Query&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.QueryRunner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.QueryRunnerFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.QueryRunnerFactoryConglomerate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.SegmentDescriptor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.TableDataSource&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.dimension.DefaultDimensionSpec&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.filter.DimFilter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.metadata.metadata.ListColumnIncluderator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.metadata.metadata.SegmentAnalysis&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.metadata.metadata.SegmentMetadataQuery&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.query.spec.SpecificSegmentSpec&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.ColumnSelectorFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.Cursor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.DimensionSelector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.IndexIO&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.ObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.QueryableIndex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.QueryableIndexSegment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.QueryableIndexStorageAdapter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.column.BitmapIndex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.column.Column&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.column.ColumnConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.data.BitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.data.ConciseBitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.data.IndexedInts&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.data.RoaringBitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.druid.segment.filter.Filters&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.OutputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.EnumSet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Set&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.joda.time.DateTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.joda.time.DateTimeZone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.joda.time.chrono.ISOChronology&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.roaringbitmap.IntIterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDumpSegment3&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDumpSegment3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IndexIO&lt;/span&gt; &lt;span class="n"&gt;indexIO&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ColumnConfig&lt;/span&gt; &lt;span class="n"&gt;columnConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;columnConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DruidProcessingConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getFormatString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;processing-%s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;intermediateComputeSizeBytes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getNumThreads&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;columnCacheSizeBytes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultObjectMapper&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;indexIO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IndexIO&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnConfig&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;DumpType&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ROWS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;METADATA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;BITMAPS&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestDumpSegment3&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outputFileName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;filterJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;columnNamesFromCli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;timeISO8601&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dumpTypeString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DumpType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ROWS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;decompressBitmaps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;TestDumpSegment3&lt;/span&gt; &lt;span class="n"&gt;testDumpSegment3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TestDumpSegment3&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;


    &lt;span class="n"&gt;testDumpSegment3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;outputFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/Users/xixuebin/Downloads/123&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadIndex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;/Users/xixuebin/Downloads/0&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;//包含msooh文件的路径&lt;/span&gt;
    &lt;span class="o"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testDumpSegment3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runDump&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;args = [&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;Throwables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propagate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;


  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;runMetadata&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Injector&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                                              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                                              &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonGenerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AUTO_CLOSE_TARGET&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SegmentMetadataQuery&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SegmentMetadataQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TableDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SpecificSegmentSpec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SegmentDescriptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataInterval&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListColumnIncluderator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getColumnsToInclude&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;EnumSet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SegmentMetadataQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AnalysisType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;withOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OutputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;OutputStream&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;evaluateSequenceForSideEffects&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;Sequences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;executeQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SegmentAnalysis&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="nd"&gt;@Override&lt;/span&gt;
                      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SegmentAnalysis&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                      &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                          &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;Throwables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propagate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                      &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;runDump&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndexStorageAdapter&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QueryableIndexStorageAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getColumnsToInclude&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DimFilter&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filterJson&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filterJson&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DimFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cursors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCursors&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataInterval&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;withChronology&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ISOChronology&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstanceUTC&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
        &lt;span class="n"&gt;QueryGranularities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sequences&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;cursors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="nd"&gt;@Override&lt;/span&gt;
                  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;selectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;selectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;makeSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDone&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newLinkedHashMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeISO8601&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIME_COLUMN_NAME&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                          &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTimeZone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UTC&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                          &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                      &lt;span class="o"&gt;}&lt;/span&gt;

                      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonProcessingException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                      &lt;span class="o"&gt;}&lt;/span&gt;

                      &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;advance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;evaluateSequenceForSideEffects&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;runBitmaps&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Injector&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;BitmapFactory&lt;/span&gt; &lt;span class="n"&gt;bitmapFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBitmapFactoryForDimensions&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;BitmapSerdeFactory&lt;/span&gt; &lt;span class="n"&gt;bitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmapFactory&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;ConciseBitmapFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;bitmapSerdeFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConciseBitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmapFactory&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;RoaringBitmapFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;bitmapSerdeFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RoaringBitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ISE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="s"&gt;&amp;quot;Don&amp;#39;t know which BitmapSerdeFactory to use for BitmapFactory[%s]!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;bitmapFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getColumnsToInclude&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;withOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OutputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;OutputStream&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;JsonGenerator&lt;/span&gt; &lt;span class="n"&gt;jg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFactory&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;createGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeStartObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObjectField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bitmapSerdeFactory&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeFieldName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bitmaps&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeStartObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;BitmapIndex&lt;/span&gt; &lt;span class="n"&gt;bitmapIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBitmapIndex&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmapIndex&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeNullField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeFieldName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                  &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeStartObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bitmapIndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCardinality&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeFieldName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nullToEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmapIndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
                    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ImmutableBitmap&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bitmapIndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBitmap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decompressBitmaps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeStartArray&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;IntIterator&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rowNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                        &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rowNum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                      &lt;span class="o"&gt;}&lt;/span&gt;
                      &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeEndArray&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeBinary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmapSerdeFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObjectStrategy&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toBytes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;
                  &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeEndObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;

              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeEndObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeEndObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
              &lt;span class="n"&gt;jg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;Throwables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propagate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getColumnsToInclude&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;columnNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newLinkedHashSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnNamesFromCli&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Empty columnNames =&amp;gt; include all columns.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIME_COLUMN_NAME&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;Iterables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumnNames&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Remove any provided columns that do not exist in this segment.&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ImmutableList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getColumn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ImmutableList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnNames&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;withOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OutputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputFileName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;OutputStream&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputFileName&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;


  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;executeQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Injector&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryableIndex&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryRunnerFactoryConglomerate&lt;/span&gt; &lt;span class="n"&gt;conglomerate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueryRunnerFactoryConglomerate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryRunnerFactory&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conglomerate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;QueryRunner&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createRunner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QueryableIndexSegment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;segment&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getToolchest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;mergeResults&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mergeRunners&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MoreExecutors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sameThreadExecutor&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ImmutableList&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QueryRunner&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Maps&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;newHashMap&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;evaluateSequenceForSideEffects&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accumulate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Accumulator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;accumulate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;accumulated&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt; &lt;span class="nf"&gt;makeSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ColumnSelectorFactory&lt;/span&gt; &lt;span class="n"&gt;columnSelectorFactory&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDictionaryEncoding&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Special case for dimensions -&amp;gt; always wrap multi-value in arrays&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DimensionSelector&lt;/span&gt; &lt;span class="n"&gt;dimensionSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnSelectorFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeDimensionSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultDimensionSpec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDictionaryEncoding&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;hasMultipleValues&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;classOfObject&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;

          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;IndexedInts&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dimensionSelector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRow&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;retVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;retVal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimensionSelector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookupName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retVal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;classOfObject&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;

          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;IndexedInts&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dimensionSelector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRow&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dimensionSelector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lookupName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt; &lt;span class="n"&gt;maybeSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;columnSelectorFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maybeSelector&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maybeSelector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Selector failed to create (unrecognized column type?)&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not create selector for column[%s], returning null.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectColumnSelector&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="nf"&gt;classOfObject&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;

          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用该工具可以直接获取到dump文件的结果.例如在spark中引入该类,直接读取smoosh文件,经处理之后.输出parquet文件.&lt;/p&gt;</content><category term="druid"></category></entry><entry><title>Mac小技巧</title><link href="xixuebin.github.io/2019-03-31-184047-ch.html" rel="alternate"></link><published>2019-03-31T18:40:47+08:00</published><updated>2019-03-31T18:40:47+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-31:xixuebin.github.io/2019-03-31-184047-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Mac工具记录&lt;/h1&gt;
&lt;h2&gt;mac shell获取昨天时间&lt;/h2&gt;
&lt;p&gt;在mac下,date命令的参数和linux下稍有区别,如果用linux下的命令,会报错,mac下的命令参数如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date -v-1d +&lt;span class="s2"&gt;&amp;quot;%y%m%d&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#获取昨天的日期&lt;/span&gt;
date -v-1m +&lt;span class="s2"&gt;&amp;quot;%y%m%d&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#获取前一个月的日期&lt;/span&gt;
date -v-1y +&lt;span class="s2"&gt;&amp;quot;%y%m%d&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#获取去年今日日期&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install MySQL On Mac&lt;/h2&gt;
&lt;h3&gt;Install Homebrew&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install MySQL&lt;/h3&gt;
&lt;p&gt;在命令行输入&lt;code&gt;brew info mysql&lt;/code&gt;,应该返回&lt;code&gt;stable 5.7.15 (bottled)&lt;/code&gt;,暗转的时候输入&lt;code&gt;brew install mysql&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;额外的配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先安装brew服务&lt;code&gt;brew tap homebrew/services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动MySQL服务&lt;code&gt;brew services start mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查MySQL服务是否被Load进来&lt;code&gt;brew services list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nrollr/3f57fc15ded7dddddcc4e82fe137b58e"&gt;MySQL_macOS_Sierra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="工具"></category><category term="Mac"></category></entry><entry><title>Linux命令行工具</title><link href="xixuebin.github.io/2019-03-31-180919-ch.html" rel="alternate"></link><published>2019-03-31T18:09:19+08:00</published><updated>2019-03-31T18:09:19+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-31:xixuebin.github.io/2019-03-31-180919-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Linux 命令行工具&lt;/h1&gt;
&lt;h2&gt;ceho&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 除法,保留小数位&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scale=2;1234/1000&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; bc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jstat&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 查看 Java 进程的 GC 情况&lt;/span&gt;
&lt;span class="c1"&gt;# Usage: jstat -gcutil &amp;lt;pid&amp;gt; &amp;lt;interval_ms&amp;gt;&lt;/span&gt;
$ jstat -gcutil &lt;span class="m"&gt;24909&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
    S0     S1     E      O      P       YGC   YGCT     FGC   FGCT     GCT
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;98&lt;/span&gt;.56   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.86      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
  &lt;span class="m"&gt;40&lt;/span&gt;.77   &lt;span class="m"&gt;0&lt;/span&gt;.00  &lt;span class="m"&gt;99&lt;/span&gt;.16   &lt;span class="m"&gt;6&lt;/span&gt;.38  &lt;span class="m"&gt;46&lt;/span&gt;.87      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.147     &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.147
&lt;/pre&gt;&lt;/div&gt;</content><category term="工具"></category><category term="Linux"></category><category term="Shell"></category></entry><entry><title>Druid参考资料</title><link href="xixuebin.github.io/2019-03-31-123250-ch.html" rel="alternate"></link><published>2019-03-31T12:32:50+08:00</published><updated>2019-03-31T12:32:50+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-31:xixuebin.github.io/2019-03-31-123250-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Druid资料列表&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://blog.bcmeng.com/post/druid-storage.html"&gt;Druid Storage 原理&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href="http://druid.io/docs/latest/tutorials/tutorial-delete-data.html"&gt;Druid Delete Data&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href="https://blog.csdn.net/matrix_google/article/details/84069510"&gt;数据保留和删除规则配置&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href="https://medium.com/airbnb-engineering/druid-airbnb-data-platform-601c312f2a4c"&gt;How Druid enables analytics at Airbnb&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href="https://yuzhouwan.com/posts/5845/"&gt;Apache Druid：一款高效的 OLAP 引擎&lt;/a&gt;&lt;/h2&gt;</content><category term="druid"></category></entry><entry><title>druid的规则设置</title><link href="xixuebin.github.io/2019-03-29-232657-ch.html" rel="alternate"></link><published>2019-03-29T23:26:57+08:00</published><updated>2019-03-29T23:26:57+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-29:xixuebin.github.io/2019-03-29-232657-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Druid的规则意义&lt;/h1&gt;
&lt;p&gt;Druid的Coordinator节点使用规则去决定集群的数据是保留或者删除.&lt;/p&gt;
&lt;p&gt;Druid有三种类型的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load rules&lt;/li&gt;
&lt;li&gt;drop rules&lt;/li&gt;
&lt;li&gt;broadcast rules&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Load Rules&lt;/h2&gt;
&lt;h2&gt;Drop Rules&lt;/h2&gt;
&lt;h2&gt;Broadcast Rules&lt;/h2&gt;
&lt;h1&gt;Deleting data(删除数据)&lt;/h1&gt;
&lt;h2&gt;使用rule删除数据&lt;/h2&gt;
&lt;h2&gt;手动disable单个segment&lt;/h2&gt;
&lt;h2&gt;使用kill Task彻底删除数据&lt;/h2&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://druid.io/docs/latest/operations/rule-configuration.html"&gt;Druid rule configurtion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://druid.io/docs/latest/tutorials/tutorial-delete-data.html"&gt;Druid delete data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="druid"></category></entry><entry><title>flink源码系列-监控</title><link href="xixuebin.github.io/2019-03-28-203347-ch.html" rel="alternate"></link><published>2019-03-28T20:33:47+08:00</published><updated>2019-03-28T20:33:47+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-28:xixuebin.github.io/2019-03-28-203347-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;blockquote&gt;
&lt;p&gt;Flink对于指标监测有一套自己的实现，指标的统计方式有四种，这些指标都实现了Metric这个接口，而Metric这个接口只是一个标识，本身并没有定义如何方法接口.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Metric&lt;/h1&gt;
&lt;p&gt;metric的类集成关系如下:&lt;/p&gt;
&lt;p&gt;从图中可以看出，Metric这个接口有四个直接子类，分别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gauge —— 最简单的度量指标，只是简单的返回一个值，比如返回一个队列中当前元素的个数；&lt;/li&gt;
&lt;li&gt;Counter —— 计数器，在一些情况下，会比Gauge高效，比如通过一个AtomicLong变量来统计一个队列的长度；&lt;/li&gt;
&lt;li&gt;Meter —— 吞吐量的度量，也就是一系列事件发生的速率，例如TPS；&lt;/li&gt;
&lt;li&gt;Histogram —— 度量值的统计结果，如最大值、最小值、平均值，以及分布情况等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以MeterView为例，分析一个Metric的具体实现。MeterView还实现View接口，实现View接口的类，表示其会定期的执行update方法，进行数据的更新&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publicclassMeterViewimplementsMeter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//底层使用的计算器&lt;/span&gt;
    &lt;span class="cm"&gt;/**Theunderlyingcountermaintainingthecount.*/&lt;/span&gt;
    &lt;span class="n"&gt;privatefinalCountercounter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//计算平均值的时间跨度&lt;/span&gt;
    &lt;span class="cm"&gt;/**Thetime-spanoverwhichtheaverageiscalculated.*/&lt;/span&gt;
    &lt;span class="n"&gt;privatefinalinttimeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//包含历史数据的循环数组&lt;/span&gt;
    &lt;span class="cm"&gt;/**Circulararraycontainingthehistoryofvalues.*/&lt;/span&gt;
    &lt;span class="n"&gt;privatefinallong&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//当前时间在数组内的索引&lt;/span&gt;
    &lt;span class="cm"&gt;/**Theindexinthearrayforthecurrenttime.*/&lt;/span&gt;
    &lt;span class="n"&gt;privateinttime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//最近计算的比率&lt;/span&gt;
    &lt;span class="cm"&gt;/**Thelastratewecomputed.*/&lt;/span&gt;
    &lt;span class="n"&gt;privatedoublecurrentRate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;publicMeterView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inttimeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newSimpleCounter&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;publicMeterView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Countercounter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inttimeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//这里的操作是为了让时间跨度刚好是UPDATE_INTERVAL_SECONDS的整数倍&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;-(&lt;/span&gt;&lt;span class="n"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;UPDATE_INTERVAL_SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newlong&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;UPDATE_INTERVAL_SECONDS&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;publicvoidmarkEvent&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;publicvoidmarkEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longn&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;publiclonggetCount&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;returncounter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;publicdoublegetRate&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;returncurrentRate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;publicvoidupdate&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)%&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;currentRate&lt;/span&gt;&lt;span class="o"&gt;=((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;]-&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)%&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
            &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;timeSpanInSeconds&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从类的属性变量中可以看出，MeterView是在一个Counter计数器的基础之上，封装了一层，从而实现事件每秒的平均速率。以values这个长整型的数组，作为环形数组，实现对最新的历史数据的保存。 在构造函数中，会对入参timeSpanInSeconds这个时间跨度进行修正，使其刚好是UPDATE_INTERVAL_SECONDS的整数倍，另外values数组的长度是timeSpanInSeconds对UPDATE_INTERVAL_SECONDS倍数，再加上1，这样这个数组的最新数据和最老的数据之间的时间间隔就刚好是timeSpanInSeconds。 假设values数组的长度为n，则索引n-1处的统计值，和索引0处的统计值，时间间隔就是timeSpanInSeconds由于是环形数组，所以索引0处的统计值，和索引1处的统计值的时间间隔就是timeSpanInSeconds
所以索引i处的统计值，和索引(i+1)%n处的统计值，时间间隔是timeSpanInSeconds&lt;/p&gt;
&lt;p&gt;MetricGroup
为了便于对Metric进行方便的管理和区分，可以对Metric进行分组，MetricGroup就是用来实现这个功能的。 
MetricGroup的相关子类的继承关系如下所示。&lt;/p&gt;
&lt;p&gt;其中:
ProxyMetricGroup —— 这是一个代理类，就是把新Metric或者新的子MetricGroup的注册，委托给代理MetricGroup进行处理；
AbstractMetricGroup —— 对新增Metric和子MetricGroup的相关方法进行了实现；
在AbstractMetricGroup中有这些属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//用来保存这个MetricGroup的父MetricGroup&lt;/span&gt;
&lt;span class="n"&gt;protectedfinalAparent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//这个map，是用来保存当前MetricGroup中注册的Metric；&lt;/span&gt;
&lt;span class="n"&gt;privatefinalMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Metric&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//这个map，是用来保存当前MetricGroup中注册子MetricGroup；&lt;/span&gt;
&lt;span class="n"&gt;privatefinalMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;AbstractMetricGroup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在MetricGroup中，可以建立一个树状的结构，用来存储和归类相关的Metric。&lt;/p&gt;
&lt;p&gt;MetricReporter
MetricReporter是用来向外披露Metric的监测结果的接口。 
由于MetricReporter的子类在实例化时，都是通过反射机制，所以对于其实现子类，需要有一个公共，无参的构造函数，这个接口的定义如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publicinterfaceMetricReporter&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;voidopen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricConfigconfig&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;voidclose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;voidnotifyOfAddedMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Metricmetric&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;StringmetricName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MetricGroupgroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;voidnotifyOfRemovedMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Metricmetric&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;StringmetricName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MetricGroupgroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;open —— 由于子类都是用无参构造函数，通过反射进行实例化，所以相关初始化的工作都是放在这里进行的，并且这个方法需要在实例化后，就需要调用该方法进行相关初始化的工作；
close —— 这里就是在关闭时，进行资源回收等相关操作的；
notifyOfAddedMetric —— 当有一个新的Metric注册时，会调用该方法来通知MetricReporter； notifyOfRemovedMetric —— 当有一个Metric被移除时，通过这个方法来通知MetricReporter；
Metric Report的类集成图:&lt;/p&gt;
&lt;p&gt;从图上可以看出flink只是的report类型有:Slf4j,StatsD,Ganglia,Graphite,JMX,Prometheus,Datadog.
MetricRegistry
MetricGroup是用来对Metric进行分组管理，MetricReporter是用来对外披露Metric，而MetricRegistry就是这两者之间的桥梁，通过MetricRegistry，就可以让MetricReporter感知到在MetricGroup中的Metric发生的变化情况。 对于MetricRegistry这个接口，其实现为MetricRegistryImpl，而其在实例化时，构造函数的入参是一个MetricRegistryConfiguration实例。
MetricRegistryConfiguration
MetricRegistryConfiguration顾名思义，就是MetricRegistry的相关配置参数，主要有三个属性，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**flink中不同组件的范围格式*/&lt;/span&gt;
&lt;span class="n"&gt;privatefinalScopeFormatsscopeFormats&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**字符串的分隔符，这是一个全局的分隔符*/&lt;/span&gt;
&lt;span class="n"&gt;privatefinalchardelimiter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**配置中每个reporter的名称和其对应的配置对象的列表*/&lt;/span&gt;
&lt;span class="n"&gt;privatefinalList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些属性，都是从配置参数中获取而来，逻辑如下：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publicstaticMetricRegistryConfigurationfromConfiguration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configurationconfiguration&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/**获取scopeFormats*/&lt;/span&gt;
&lt;span class="n"&gt;ScopeFormatsscopeFormats&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;scopeFormats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ScopeFormats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exceptione&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failedtoparsescopeformat,usingdefaultscopeformats&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;scopeFormats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ScopeFormats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newConfiguration&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**获取分隔符*/&lt;/span&gt;
&lt;span class="n"&gt;chardelim&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_DELIMITER&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exceptione&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failedtoparsedelimiter,usingdefaultdelimiter.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**获取MetricReporter相关的配置信息，MetricReporter的配置格式是metrics.reporters=foo,bar*/&lt;/span&gt;
&lt;span class="n"&gt;finalStringdefinedReporters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;REPORTERS_LIST&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;definedReporters&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/**如果没有配置，则返回空集合*/&lt;/span&gt;
&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emptyList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/**按模式匹配分割，如上述的配置，则namedReporters={&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;}*/&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;namedReporters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;splitPattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;definedReporters&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;namedReporters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringnamedReporter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;namedReporters&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;*这里是获取一个代理配置对象，就是在原来配置对象的基础上，在查询key时，需要加上这里配置的前缀&lt;/span&gt;
&lt;span class="cm"&gt;    ，&lt;/span&gt;
&lt;span class="cm"&gt;*如metrics.reporter.foo.，这样就可以获取特定reporter的配置&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;DelegatingConfigurationdelegatingConfiguration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newDelegatingConfiguration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;ConfigConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;METRICS_REPORTER_PREFIX&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;namedReporter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;namedReporter&lt;/span&gt;&lt;span class="o"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;delegatingConfiguration&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;returnnewMetricRegistryConfiguration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scopeFormats&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;reporterConfigurations&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ScopeFormat&lt;/p&gt;
&lt;p&gt;上述的ScopeFormats也是配置对象中获取的，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publicstaticScopeFormatsfromConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configurationconfig&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;StringjmFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_JM&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringjmJobFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_JM_JOB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringtmFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_TM&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringtmJobFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_TM_JOB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringtaskFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_TASK&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringoperatorFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MetricOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SCOPE_NAMING_OPERATOR&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;returnnewScopeFormats&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmFormat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;jmJobFormat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tmFormat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tmJobFormat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;taskFormat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;operatorFormat&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ScopeFormat的类继承关系如下:&lt;/p&gt;
&lt;p&gt;从图中可以看出，Flink中的每个组件，都有对应的格式。
首先看下ScopeFormat中的主要属性对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**这是原生格式，比如&amp;lt;host&amp;gt;.jobmanager，如果为空，则是&amp;lt;empty&amp;gt;*/&lt;/span&gt;
&lt;span class="n"&gt;privatefinalStringformat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**format按照分割符分割后的数组，如template={&amp;quot;&amp;lt;host&amp;gt;&amp;quot;,&amp;quot;jobmanager”}，被&amp;lt;&amp;gt;包裹的元素，是变量元素*/&lt;/span&gt;
&lt;span class="n"&gt;privatefinalString&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**这是template数组中，变量元素的索引，如&amp;quot;&amp;lt;host&amp;gt;&amp;quot;是变量，在template中的索引是0，则templatePos={0}&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
&lt;span class="n"&gt;privatefinalint&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;templatePos&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**这个是template中变量元素对应的真实的值，在values数组中的位置，详见构造函数和#bindVariables方法&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
&lt;span class="n"&gt;privatefinalint&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;valuePos&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里以JobManagerScopeFormat为例进行分析说明，在ScopeFormats中，默认传给JobManagerScopeFormat的构造函数的入参值是 .jobmanager 。 则JobManagerScopeFormat的构造过程如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**format的默认值是&amp;lt;host&amp;gt;.jobmanager*/&lt;/span&gt;
&lt;span class="n"&gt;publicJobManagerScopeFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stringformat&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;newString&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;
&lt;span class="n"&gt;SCOPE_HOST&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着看起父类ScopeFormat的构造过程：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**接上面，入参值为format=&amp;quot;&amp;lt;host&amp;gt;.jobmanager&amp;quot;，parent=null，variables={&amp;quot;&amp;lt;host&amp;gt;&amp;quot;}*/&lt;/span&gt;
&lt;span class="n"&gt;protectedScopeFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stringformat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ScopeFormatparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;formatisnull&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/**将format这个字符串分割，rawComponents={&amp;quot;&amp;lt;host&amp;gt;&amp;quot;,&amp;quot;jobmanager&amp;quot;}*/&lt;/span&gt;
&lt;span class="n"&gt;finalString&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SCOPE_SEPARATOR&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/**根据rawComponents的第一个元素是为&amp;quot;*&amp;quot;，来判断是否要继承父组的范围*/&lt;/span&gt;
&lt;span class="n"&gt;finalbooleanparentAsPrefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCOPE_INHERIT_PARENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentAsPrefix&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/**需要继承父组的范围，而父组有是null，则抛出异常*/&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;thrownewIllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Componentscopeformatrequiresparentprefix&lt;/span&gt;
&lt;span class="s"&gt;    (startswith&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SCOPE_INHERIT_PARENT&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;),butthiscomponenthasnoparent(isrootcomponent).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**如果以&amp;quot;*.&amp;quot;开头，则format至少需要有3个字符，否则就是无效字符，设置为&amp;quot;&amp;lt;empty&amp;gt;&amp;quot;*/&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;empty&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;parentTemplate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;intparentLen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parentTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**将父组的范围和自身的范围，合并到一起*/&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newString&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parentLen&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arraycopy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentTemplate&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;parentLen&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arraycopy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;parentLen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/**不需要继承父组的范围，则直接赋值，format=&amp;quot;&amp;lt;host&amp;gt;.jobmanager&amp;quot;，template={&amp;quot;&amp;lt;host&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    ,&amp;quot;jobmanager&amp;quot;}*/&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;()?&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;empty&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rawComponents&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**将variables={&amp;quot;&amp;lt;host&amp;gt;&amp;quot;}转换为map{&amp;quot;&amp;lt;host&amp;gt;&amp;quot;-&amp;gt;0}*/&lt;/span&gt;
&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;varToValuePos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;arrayToMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;templatePos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;valuePos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inti&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
&lt;span class="n"&gt;finalStringcomponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="cm"&gt;/**检查当前这个组件是否是一个变量*/&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/**这是一个变量，则从上面的map中，获取其索引*/&lt;/span&gt;
&lt;span class="n"&gt;IntegerreplacementPos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;varToValuePos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replacementPos&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;templatePos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;valuePos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replacementPos&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;templatePos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integerListToArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;templatePos&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valuePos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integerListToArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valuePos&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过这个构造过程，ScopeFormat中的四个属性的值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jobmanager&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="err"&gt;“”&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;jobmanager&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;templatePos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;valuePos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于JobManagerScopeFormat来说，构建一个具体的范围数组的逻辑如下：&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
publicString[]formatScope(Stringhostname){
/&lt;strong&gt;获取template数组的一份拷贝，深拷贝*/
finalString[]template=copyTemplate();
finalString[]values={hostname};
/&lt;/strong&gt;使用hostname替换掉template中索引为0的元素&lt;host&gt;&lt;em&gt;/
returnbindVariables(template,values);
}
protectedfinalString[]copyTemplate(){
String[]copy=newString[template.length];
System.arraycopy(template,0,copy,0,template.length);
returncopy;
}
/&lt;/em&gt;&lt;em&gt;在结合这个逻辑，就知道ScopeFormat中的属性valuePos的作用了&lt;/em&gt;/
protectedfinalString[]bindVariables(String[]template,String[]values){
finalintlen=templatePos.length;
for(inti=0;i&amp;lt;len;i++){
template[templatePos[i]]=values[valuePos[i]];
}
returntemplate;
}&lt;/p&gt;
&lt;p&gt;MetricRegistryImpl
﻿﻿在获取了MetricRegistryConfiguration实例后，在看MetricRegistryImpl的构造函数的实现逻辑。&lt;/p&gt;
&lt;p&gt;
1
this.executor=Executors.newSingleThreadScheduledExecutor(newExecutorThreadFactory("Flink
    -MetricRegistry"));&lt;/p&gt;
&lt;p&gt;这里给executor这个属性，设置了一个单线程可调度的执行器。 接下来主要看下对MetricReporter相关的初始化工作。&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
/&lt;strong&gt;变量配置中配置的reporter的配置*/
for(Tuple2&lt;String,Configuration&gt;reporterConfiguration:reporterConfigurations){
StringnamedReporter=reporterConfiguration.f0;
/&lt;/strong&gt;reporterConfig是Configuration的子类DelegatingConfiguration，会肯定定义的前缀来找key&lt;em&gt;/
ConfigurationreporterConfig=reporterConfiguration.f1;
/&lt;strong&gt;获取MetricReporter的具体实现子类的全限定类型，配置的key如：metrics.reporter.foo.class*/
finalStringclassName=reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX
    ,null);
if(className==null){
LOG.error("Noreporterclasssetforreporter"+namedReporter+".Metricsmightnotbeexposed
    /reported.");
continue;
}
try{
/&lt;/strong&gt;获取配置的定期执行的时间间隔，key的格式如：metrics.reporter.foo.interval&lt;/em&gt;/
StringconfiguredPeriod=reporterConfig.getString(ConfigConstants
    .METRICS_REPORTER_INTERVAL_SUFFIX,null);
TimeUnittimeunit=TimeUnit.SECONDS;
longperiod=10;
if(configuredPeriod!=null){
try{
String[]interval=configuredPeriod.split("");
period=Long.parseLong(interval[0]);
timeunit=TimeUnit.valueOf(interval[1]);
}
catch(Exceptione){
LOG.error("Cannotparsereportintervalfromconfig:"+configuredPeriod+
"-pleaseusevalueslike'10SECONDS'or'500MILLISECONDS'."+
"Usingdefaultreportinginterval.");
}
}
/&lt;strong&gt;实例化MetricReporter的子类*/
Class&amp;lt;?&amp;gt;reporterClass=Class.forName(className);
MetricReporterreporterInstance=(MetricReporter)reporterClass.newInstance();
/&lt;/strong&gt;构造MetricConfig的实例，并把reporterConfig中的配置key-value都添加到metricConfig中&lt;em&gt;/
MetricConfigmetricConfig=newMetricConfig();
reporterConfig.addAllToProperties(metricConfig);
LOG.info("Configuring{}with{}.",reporterClass.getSimpleName(),metricConfig);
/&lt;strong&gt;这里就是reporter进行初始化操作的地方*/
reporterInstance.open(metricConfig);
/&lt;/strong&gt;如果reporter实现了Scheduled接口，则通过executor进行定期调度执行，执行时间间隔就是上面获取的时
    间间隔&lt;/em&gt;/
if(reporterInstanceinstanceofScheduled){
LOG.info("Periodicallyreportingmetricsinintervalsof{}{}forreporter{}oftype{}."
    ,period,timeunit.name(),namedReporter,className);
/&lt;strong&gt;将reporter封装成一个task，并调度定期更新执行*/
executor.scheduleWithFixedDelay(
newMetricRegistryImpl.ReporterTask((Scheduled)reporterInstance),period,period
    ,timeunit);
}else{
LOG.info("Reportingmetricsforreporter{}oftype{}.",namedReporter,className);
}
/&lt;/strong&gt;将reporter添加到集合中&lt;em&gt;/
reporters.add(reporterInstance);
/&lt;/em&gt;&lt;em&gt;获取reporter定制化的分隔符，如果没有设置，则设置为全局分割符&lt;/em&gt;/
StringdelimiterForReporter=reporterConfig.getString(ConfigConstants
    .METRICS_REPORTER_SCOPE_DELIMITER,String.valueOf(globalDelimiter));
if(delimiterForReporter.length()!=1){
LOG.warn("Failedtoparsedelimiter'{}'forreporter'{}',usingglobaldelimiter'{}'."
    ,delimiterForReporter,namedReporter,globalDelimiter);
delimiterForReporter=String.valueOf(globalDelimiter);
}
this.delimiters.add(delimiterForReporter.charAt(0));
}
catch(Throwablet){
LOG.error("Couldnotinstantiatemetricsreporter{}.Metricsmightnotbeexposed/reported."
    ,namedReporter,t);
}
}
其中Schedule接口，只有一个report接口。&lt;/p&gt;
&lt;p&gt;
1
2
3
publicinterfaceScheduled{
voidreport();
}
实现Scheduled接口的reporter，表示其需要被定期调度执行，定期执行的就是其report方法，没有实现Scheduled接口的reporter方法，是不会被定期调度的。
Slf4jReporter这个MetricReporter的子类就实现了Scheduled接口，而其report方法，就是将注册的Metric的信息打印到日志里；
JMXReporter这个子类是没有实现Scheduled接口的，但可以通过JMX服务来获取注册的Metric的信息。
添加Metric的过程
Metric的添加逻辑的入口在AbstractMetricGroup的addMetric方法中，逻辑如下：&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
protectedvoidaddMetric(Stringname,Metricmetric){
if(metric==null){
LOG.warn("Ignoringattemptedregistrationofametricduetobeingnullforname{}.",name);
return;
}
/&lt;strong&gt;只有group仍然打开的情况下,才添加这个metric*/
synchronized(this){
if(!closed){
/&lt;/strong&gt;
&lt;em&gt;在没有进行"contains"校验下,立即进行put操作,来优化常见的情况(没有碰撞)
&lt;/em&gt;碰撞的情况后面会处理。
&lt;em&gt;/
Metricprior=metrics.put(name,metric);
/&lt;strong&gt;检查与其他度量名称的冲突*/
if(prior==null){
/&lt;/strong&gt;这个名字还没有其他指标，也就是与注册在当前group下的metric没有名称冲突&lt;/em&gt;/
if(groups.containsKey(name)){
/&lt;strong&gt;与注册在group下的子groups的名称由冲突，这里给出warn日志,而不是fail
    ,因为metrics是工具,当使用错误时,不应该使得程序失败*/
LOG.warn("Namecollision:Addingametricwiththesamenameasametricsubgroup:'"+
name+"'.Metricmightnotgetproperlyreported."+Arrays.toString
    (scopeComponents));
}
/&lt;/strong&gt;这里就是桥梁起作用的地方&lt;em&gt;/
registry.register(metric,name,this);
}
else{
/&lt;/em&gt;&lt;em&gt;有碰撞,放回原来的metric&lt;/em&gt;/
metrics.put(name,prior);
LOG.warn("Namecollision:GroupalreadycontainsaMetricwiththename'"+
name+"'.Metricwillnotbereported."+Arrays.toString(scopeComponents));
}
}
}
}
上述逻辑就是把Metric注册到当前Group中，接着看调用了MetricRegistry的register里的逻辑。&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
publicvoidregister(Metricmetric,StringmetricName,AbstractMetricGroupgroup){
synchronized(lock){
if(isShutdown()){
LOG.warn("Cannotregistermetric,becausetheMetricRegistryhasalreadybeenshutdown.");
}else{
if(reporters!=null){
/&lt;strong&gt;通知所有的reporters，注册了一个metric，以及对应的metricName，group*/
for(inti=0;i&lt;reporters.size();i++){
MetricReporterreporter=reporters.get(i);
try{
if(reporter!=null){
/**
*这里会将group，以及这个reporter在reporters这个列表中的索引，一起封装到FrontMetr
    icGroup这个代理类中
*这里封装索引的目的，是可以通过#getDelimiter方法，获取这个reporter配置的特制分
    隔符
*/
FrontMetricGroupfront=newFrontMetricGroup&lt;AbstractMetricGroup&lt;?&gt;&amp;gt;(i,group);
/&lt;/strong&gt;然后调用reporter的接口方法，通知reporter&lt;em&gt;/
reporter.notifyOfAddedMetric(metric,metricName,front);
}
}catch(Exceptione){
LOG.warn("Errorwhileregisteringmetric.",e);
}
}
}
try{
/&lt;strong&gt;如果queryService不为null，则也通知它*/
if(queryService!=null){
MetricQueryService.notifyOfAddedMetric(queryService,metric,metricName,group);
}
}catch(Exceptione){
LOG.warn("Errorwhileregisteringmetric.",e);
}
try{
/&lt;/strong&gt;如果metric实现了View接口，则将其添加到定期更新的viewUpdater中&lt;/em&gt;/
if(metricinstanceofView){
if(viewUpdater==null){
viewUpdater=newViewUpdater(executor);
}
viewUpdater.notifyOfAddedView((View)metric);
}
}catch(Exceptione){
LOG.warn("Errorwhileregisteringmetric.",e);
}
}
}
}
从上述逻辑，可以看出MetricRegistry所起的桥梁作用了，它会再依次通知配置的各个reporter，前面已经介绍过AbstractReporter这个抽象子类实现。
View接口
View接口的定义如下:&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
6
7
publicinterfaceView{
/&lt;strong&gt;metrics更新的间隔*/
intUPDATE_INTERVAL_SECONDS=5;
/&lt;/strong&gt;被定期调用进行metric更新的方法*/
voidupdate();
}
实现了View接口的Metric，需要定期的调用update方法，进行状态的更新，而这个定期更新的功能是通过ViewUpdater实现的，其构造函数中，就是在executor中添加了一个定期执行的task。&lt;/p&gt;
&lt;p&gt;
1
2
3
publicViewUpdater(ScheduledExecutorServiceexecutor){
executor.scheduleWithFixedDelay(newViewUpdaterTask(lock,toAdd,toRemove),5
    ,UPDATE_INTERVAL_SECONDS,TimeUnit.SECONDS);
}
新增一个Metric时，通知viewUpdater时的逻辑如下:&lt;/p&gt;
&lt;p&gt;
1
2
3
4
5
publicvoidnotifyOfAddedView(Viewview){
synchronized(lock){
toAdd.add(view);
}
}
就是想toAdd这个Set中添加一个新的元素，通过lock这个锁来实现同步。 
而ViewUpdaterTask的run方法中，就会调用注册的Metric的update方法，同时更新几个Set。逻辑如下：&lt;/p&gt;
&lt;p&gt;publicvoidrun(){
for(ViewtoUpdate:this.views){
toUpdate.update();
}
synchronized(lock){
views.addAll(toAdd);
toAdd.clear();
views.removeAll(toRemove);
toRemove.clear();
}
}
MetricQueryService
在MetricRegistryImpl中有一个属性queryService，是一个ActorRef，对应的具体实现是MetricQueryService。在MetricQueryService中也维护了注册的各种Metric，并且也是从MetricRegistry那里接受Metric的添加和删除的消息.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**用来接收Metric添加的消息*/&lt;/span&gt;
&lt;span class="n"&gt;publicstaticvoidnotifyOfAddedMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActorRefservice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Metricmetric&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;StringmetricName&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;AbstractMetricGroupgroup&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newAddMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metricName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/**用于接收Metric删除的消息*/&lt;/span&gt;
&lt;span class="n"&gt;publicstaticvoidnotifyOfRemovedMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActorRefservice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Metricmetric&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newRemoveMetric&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MetricQueryService在接收到这类消息后，会在onReceive方法中根据不同的消息类型进行相应的处理，添加和删除Metric就是在四类Metric对应的map属性上进行相应的添加删除操作。以此来实现对Metric信息的维护。 onReceive方法中还会接收到一类消息，叫CreateDump消息，接收到这个消息后，就会把当前所有的Metric数据进行序列化操作，得到一个MetricDumpSerialization.MetricSerializationResult序列化后的结果实例，并发送给请求者。 对于Metric的序列化和反序列化的实现都在MetricDumpSerialization这个类中。
通过MetricDumpSerializer进行序列化，序列化后的结果为MetricSerializationResult；
通过MetricDumpDeserializer进行反序列化，反序列化后的结果为MetricDump；&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;https://blog.csdn.net/qq_21653785/article/details/79625601&lt;/p&gt;</content><category term="flink"></category></entry><entry><title>idea-查询athena</title><link href="xixuebin.github.io/2019-03-28-164917-ch.html" rel="alternate"></link><published>2019-03-28T16:49:17+08:00</published><updated>2019-03-28T16:49:17+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-28:xixuebin.github.io/2019-03-28-164917-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;blockquote&gt;
&lt;p&gt;在使用aws的云服务的时候,我们把数据存储在s3上,如果要查询数据,可以使用aws的athena服务.athena基于Presto构建,可以查询S3的数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;使用idea访问aws服务&lt;/h1&gt;
&lt;h2&gt;配置idea的数据驱动&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2019-03-28-17-41-37" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/6729ff99f8724a5acef8de67643cdbf4.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名称填写athena&lt;/li&gt;
&lt;li&gt;驱动类选择&lt;code&gt;com.simbaathena.jdbc42.Driver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dialect 选择&lt;code&gt;Generic SQL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;URL templates格式如下:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jdbc:awsathena://athena.[{host::eu-west-1}].amazonaws.com[:{port::443}][\?&amp;lt;;,UID={user:param},PWD={password:param},{:identifier}={:param}&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击保存之后,在左侧的列表中可以看见一个Athena的Driver项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创建连接&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2019-03-28-17-50-15" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/13d0d1a867083cc315b96c3ea9fcf566.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name选项输入自己的连接名字&lt;/li&gt;
&lt;li&gt;user输入自己aws的access key&lt;/li&gt;
&lt;li&gt;password输入自己aws的Secret key&lt;/li&gt;
&lt;li&gt;url按照之前的连接填写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样操作之后就可以在idea中访问到aws的athena服务了.&lt;/p&gt;
&lt;h2&gt;查询数据&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2019-03-28-17-57-44" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/75ab08930b16aecd9752f7f7316b33ad.png"&gt;&lt;/p&gt;
&lt;p&gt;这样就可以和其他数据源一样操作athena上的数据了.&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/datagrip/2018/05/25/using-aws-athena-from-intellij-based-ide/"&gt;using-aws-athena-from-intellij-based-ide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://poplindata.com/infrastructure/setting-up-aws-athena-datasource-in-jetbrains-datagrip/"&gt;Setting up AWS Athena datasource in JetBrains DataGrip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/zh_cn/athena/latest/ug/connect-with-jdbc.html"&gt;将Athena与JDBC驱动程序结合使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://s3.amazonaws.com/athena-downloads/drivers/JDBC/SimbaAthenaJDBC_2.0.6/docs/Simba+Athena+JDBC+Driver+Install+and+Configuration+Guide.pdf"&gt;aws driver 安装与说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="athena"></category><category term="idea"></category></entry><entry><title>linux小技巧</title><link href="xixuebin.github.io/2019-03-28-161315-ch.html" rel="alternate"></link><published>2019-03-28T16:13:15+08:00</published><updated>2019-03-28T16:13:15+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-28:xixuebin.github.io/2019-03-28-161315-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;Linux 常见操作&lt;/h1&gt;
&lt;h2&gt;ubuntu crontab日志存储&lt;/h2&gt;
&lt;p&gt;ubuntu的crontab的日志默认存储在&lt;code&gt;/var/log/syslog&lt;/code&gt;中,如要查看的话,可以使用&lt;code&gt;grep CRON /var/log/syslog&lt;/code&gt;查看&lt;/p&gt;
&lt;p&gt;也可配置,输出到其他路径下.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 打开文件&lt;/span&gt;
/etc/rsyslog.d/50-default.conf
&lt;span class="c1"&gt;# 查找cron.* 并且注释掉&lt;/span&gt;
&lt;span class="c1"&gt;# 执行服务&lt;/span&gt;
sudo service rsyslog restart
&lt;span class="c1"&gt;# 这样就可以看见日志输出到cron.log中了&lt;/span&gt;
/var/log/cron.log
&lt;/pre&gt;&lt;/div&gt;</content><category term="工具"></category><category term="Linux"></category></entry><entry><title>flink四层运行模型</title><link href="xixuebin.github.io/2019-03-25-172756-ch.html" rel="alternate"></link><published>2019-03-25T17:27:56+08:00</published><updated>2019-03-25T17:27:56+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-25:xixuebin.github.io/2019-03-25-172756-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;执行计划ExecutionGraph的生成&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;flink的运行时执行计划为ExecutionGraph,是JobManager运行时候的抽象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;StreamGraph和JobGraph都是在client生成的,但是ExecutionGrap是在JobMaster端生成的.&lt;/p&gt;
&lt;h2&gt;客户端JobGraph的提交&lt;/h2&gt;
&lt;p&gt;客户端的&lt;code&gt;JobGraph&lt;/code&gt;生成之后,通过&lt;code&gt;LeaderRetrivalService&lt;/code&gt;获取&lt;code&gt;JobManager&lt;/code&gt;的地址,然后将&lt;code&gt;JobGraph&lt;/code&gt;提交给&lt;code&gt;JobManager&lt;/code&gt;去执行.flink的核心进程通信是通过Akka来完成的.&lt;code&gt;JobManager&lt;/code&gt;,&lt;code&gt;TaskManager&lt;/code&gt;都是一个Akka system,所以在提交的时候需要先生成一个客户端actor与&lt;code&gt;JobManager&lt;/code&gt;交互,然后执行rpc命令.&lt;/p&gt;
&lt;p&gt;下面方法发送一个&lt;code&gt;JobGraph&lt;/code&gt;到&lt;code&gt;JobManager&lt;/code&gt;.这个方法会一直block直到job返回或者&lt;code&gt;JobManager&lt;/code&gt;不在处于alive状态.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;JobExecutionResult&lt;/span&gt; &lt;span class="nf"&gt;submitJobAndWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ActorSystem&lt;/span&gt; &lt;span class="n"&gt;actorSystem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;HighAvailabilityServices&lt;/span&gt; &lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JobGraph&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FiniteDuration&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;sysoutLogUpdates&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ClassLoader&lt;/span&gt; &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;JobExecutionException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JobListeningContext&lt;/span&gt; &lt;span class="n"&gt;jobListeningContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;submitJob&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;actorSystem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sysoutLogUpdates&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;awaitJobResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobListeningContext&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真正提交Job并且返回JobListeningContext&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;JobListeningContext&lt;/span&gt; &lt;span class="nf"&gt;submitJob&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;ActorSystem&lt;/span&gt; &lt;span class="n"&gt;actorSystem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HighAvailabilityServices&lt;/span&gt; &lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;JobGraph&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FiniteDuration&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;sysoutLogUpdates&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ClassLoader&lt;/span&gt; &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actorSystem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The actorSystem must not be null.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The high availability services must not be null.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The jobGraph must not be null.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The timeout must not be null.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// for this job, we create a proxy JobClientActor that deals with all communication with&lt;/span&gt;
    &lt;span class="c1"&gt;// the JobManager. It forwards the job submission, checks the success/failure responses, logs&lt;/span&gt;
    &lt;span class="c1"&gt;// update messages, watches for disconnect between client and JobManager, ...&lt;/span&gt;

    &lt;span class="n"&gt;Props&lt;/span&gt; &lt;span class="n"&gt;jobClientActorProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JobSubmissionClientActor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createActorProps&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobManagerLeaderRetriever&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HighAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_JOB_ID&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sysoutLogUpdates&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ActorRef&lt;/span&gt; &lt;span class="n"&gt;jobClientActor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;actorSystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;actorOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobClientActorProps&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;submissionFuture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ask&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;jobClientActor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobClientMessages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SubmitJobAndWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AkkaUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;INF_TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobListeningContext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;submissionFuture&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;jobClientActor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;highAvailabilityServices&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交Job的基本流程如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="2019-04-08-19-10-30" src="http://xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/xixuebin-blog-images.oss-cn-beijing.aliyuncs.com/images/c6b5327e6f2d279637026cdb277a41e1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动&lt;code&gt;JobClientActor&lt;/code&gt;用来和&lt;code&gt;JobManager&lt;/code&gt;交互&lt;/li&gt;
&lt;li&gt;启动&lt;code&gt;LeaderRetrievalService&lt;/code&gt;获取&lt;code&gt;JobManager&lt;/code&gt;的地址&lt;/li&gt;
&lt;li&gt;上传用户Jar包&lt;/li&gt;
&lt;li&gt;提交SubmitJob命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JobManager执行生成计划&lt;/h2&gt;
&lt;p&gt;客户端上传完jar包和JobGraph，flink 会进一步解析封装成运行时的执行计划&lt;code&gt;ExecutionGraph&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;执行计划ExecutionGraph的生成&lt;/h3&gt;
&lt;p&gt;flink的运行时执行计划为&lt;code&gt;ExecutionGraph&lt;/code&gt;，&lt;code&gt;ExecutionGraph&lt;/code&gt;对应之前的&lt;code&gt;JobGraph&lt;/code&gt;，一个&lt;code&gt;ExecutionGraph&lt;/code&gt;包含多个 &lt;code&gt;ExecutionJobVertex&lt;/code&gt;节点&lt;code&gt;JobGraph&lt;/code&gt;的&lt;code&gt;JobVertex&lt;/code&gt;，每个&lt;code&gt;ExecutionJobVertex&lt;/code&gt;节点的并发子&lt;code&gt;task&lt;/code&gt;对应一个&lt;code&gt;ExecutionVertex&lt;/code&gt;，每个&lt;code&gt;ExecutionVertex&lt;/code&gt;的一次attempt执行被抽象为一次&lt;code&gt;Execution&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;client生成JobGraph之后，就通过submitJob提交至JobMaster。在其构造函数中，会生成ExecutionGraph.下面代码是&lt;code&gt;ExecutionGraph&lt;/code&gt;的构造函数.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;JobInformation&lt;/span&gt; &lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ScheduledExecutorService&lt;/span&gt; &lt;span class="n"&gt;futureExecutor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Executor&lt;/span&gt; &lt;span class="n"&gt;ioExecutor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;rpcTimeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;RestartStrategy&lt;/span&gt; &lt;span class="n"&gt;restartStrategy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FailoverStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="n"&gt;failoverStrategyFactory&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SlotProvider&lt;/span&gt; &lt;span class="n"&gt;slotProvider&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ClassLoader&lt;/span&gt; &lt;span class="n"&gt;userClassLoader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;BlobWriter&lt;/span&gt; &lt;span class="n"&gt;blobWriter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;allocationTimeout&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futureExecutor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jobInformation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blobWriter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blobWriter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jobInformationOrBlobKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlobWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serializeAndTryOffload&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobId&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;blobWriter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;futureExecutor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futureExecutor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ioExecutor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ioExecutor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;slotProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slotProvider&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scheduler&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;userClassLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Preconditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userClassLoader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;userClassLoader&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intermediateResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verticesInCreationOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentExecutions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jobStatusListeners&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CopyOnWriteArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;executionListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CopyOnWriteArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stateTimestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;JobStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stateTimestamps&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;JobStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CREATED&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ordinal&lt;/span&gt;&lt;span class="o"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rpcTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rpcTimeout&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allocationTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocationTimeout&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;restartStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;restartStrategy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;kvStateLocationRegistry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;KvStateLocationRegistry&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobId&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;getAllVertices&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verticesFinished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AtomicInteger&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;globalModVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1L&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// the failover strategy must be instantiated last, so that the execution graph&lt;/span&gt;
    &lt;span class="c1"&gt;// is ready by the time the failover strategy sees it&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;failoverStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failoverStrategyFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;null failover strategy&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;schedulingFuture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Job recovers via failover strategy: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;failoverStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStrategyName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从构造函数中可以看到&lt;code&gt;EexcutionGraph&lt;/code&gt;为维护Job信息,运行的Task信息,状态切换信息等.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExecutionGraph&lt;/code&gt;的构建是在JobManager的构造函数中.具体方法为&lt;code&gt;createAndRestoreExecutionGraph&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;executionGraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createAndRestoreExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobManagerJobMetricGroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ExecutionGraph&lt;/span&gt; &lt;span class="nf"&gt;createAndRestoreExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JobManagerJobMetricGroup&lt;/span&gt; &lt;span class="n"&gt;currentJobManagerJobMetricGroup&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ExecutionGraph&lt;/span&gt; &lt;span class="n"&gt;newExecutionGraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentJobManagerJobMetricGroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CheckpointCoordinator&lt;/span&gt; &lt;span class="n"&gt;checkpointCoordinator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCheckpointCoordinator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkpointCoordinator&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// check whether we find a valid checkpoint&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;checkpointCoordinator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;restoreLatestCheckpointedState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;newExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllVertices&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// check whether we can restore from a savepoint&lt;/span&gt;
            &lt;span class="n"&gt;tryRestoreExecutionGraphFromSavepoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSavepointRestoreSettings&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过层层调用,真正执行的方法是&lt;code&gt;public static ExecutionGraph buildGraph&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;checkNotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;job graph cannot be null&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jobName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;JobID&lt;/span&gt; &lt;span class="n"&gt;jobId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobID&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FailoverStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="n"&gt;failoverStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;FailoverStrategyLoader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFailoverStrategy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobManagerConfig&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;JobInformation&lt;/span&gt; &lt;span class="n"&gt;jobInformation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobInformation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;jobName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerializedExecutionConfig&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJobConfiguration&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUserJarBlobKeys&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClasspaths&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// create a new execution graph, if none exists so far&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionGraph&lt;/span&gt; &lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;executionGraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prior&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;prior&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ExecutionGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;jobInformation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;futureExecutor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ioExecutor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;rpcTimeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;restartStrategy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;failoverStrategy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;slotProvider&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;blobWriter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;allocationTimeout&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not create the ExecutionGraph.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// set the basic properties&lt;/span&gt;

&lt;span class="c1"&gt;//setScheduleMode schedule mode固定是EAGER的&lt;/span&gt;
&lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setScheduleMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getScheduleMode&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setQueuedSchedulingAllowed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllowQueuedScheduling&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setJsonPlan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JsonPlanGenerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;generatePlan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cannot create JSON plan for job&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// give the graph an empty plan&lt;/span&gt;
    &lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setJsonPlan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// initialize the vertices that have a master initialization hook&lt;/span&gt;
&lt;span class="c1"&gt;// file output formats create directories here, input formats create splits&lt;/span&gt;

&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;initMasterStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Running initialization on master for job {} ({}).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 按拓扑顺序，获取所有的JobVertex列表&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JobVertex&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVertices&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;executableClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInvokableClassName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executableClass&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;executableClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobSubmissionException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;The vertex &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;) has no invokable class.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParallelism&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ExecutionConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PARALLELISM_AUTO_MAX&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parallelismForAutoMax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobSubmissionException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;PARALLELISM_AUTO_MAX_ERROR_MESSAGE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setParallelism&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parallelismForAutoMax&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initializeOnMaster&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobExecutionException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;Cannot initialize task &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Successfully ran initialization on master in {} ms.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;initMasterStart&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1_000_000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// topologically sort the job vertices and attach the graph to the existing one&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JobVertex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sortedTopology&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVerticesSortedTopologicallyFromSources&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDebugEnabled&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Adding {} vertices from job graph {} ({}).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sortedTopology&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;jobName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;executionGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;attachJobGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedTopology&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后一行，&lt;code&gt;ExecutionGraph.attachJobGraph&lt;/code&gt;方法是比较关键的方法,该方法构建婉节点,生成执行计划DAG：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;attachJobGraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JobVertex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;topologiallySorted&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Attaching {} topologically sorted vertices to existing job graph with {} &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;vertices and {} intermediate results.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;topologiallySorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;intermediateResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ExecutionJobVertex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;newExecJobVertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;topologiallySorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;createTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;//遍历Job vertex&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JobVertex&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;topologiallySorted&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInputVertex&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isStoppable&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isStoppable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// 根据Job vertex创建对应的ExecutionVertex&lt;/span&gt;
        &lt;span class="c1"&gt;// create the execution job vertex and attach it to the graph&lt;/span&gt;
        &lt;span class="n"&gt;ExecutionJobVertex&lt;/span&gt; &lt;span class="n"&gt;ejv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ExecutionJobVertex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;rpcTimeout&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;globalModVersion&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;createTimestamp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// 将创建的ExecutionJobVertex与前置的IntermediateResult连接起来&lt;/span&gt;
        &lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connectToPredecessors&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intermediateResults&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ExecutionJobVertex&lt;/span&gt; &lt;span class="n"&gt;previousTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putIfAbsent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previousTask&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered two job vertices with ID %s : previous=[%s] / new=[%s]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;previousTask&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntermediateResult&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProducedDataSets&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;IntermediateResult&lt;/span&gt; &lt;span class="n"&gt;previousDataSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intermediateResults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putIfAbsent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previousDataSet&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Encountered two intermediate data set with ID %s : previous=[%s] / new=[%s]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;previousDataSet&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verticesInCreationOrder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;numVerticesTotal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParallelism&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;newExecJobVertices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ejv&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;terminationFuture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CompletableFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;failoverStrategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notifyNewVertices&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newExecJobVertices&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法中的&lt;code&gt;connectToPredecessors&lt;/code&gt;是链接执行节点的关键方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;connectToPredecessors&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IntermediateDataSetID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntermediateResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;intermediateDataSets&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//获取输入的JobEdge列表&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JobEdge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDebugEnabled&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting ExecutionJobVertex %s (%s) to %d predecessors.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 遍历每条JobEdge&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;JobEdge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDebugEnabled&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSource&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting input %d of vertex %s (%s) to intermediate result referenced via ID %s.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSourceId&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting input %d of vertex %s (%s) to intermediate result referenced via predecessor %s (%s).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;jobVertex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSource&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getProducer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getID&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSource&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getProducer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// fetch the intermediate result via ID. if it does not exist, then it either has not been created, or the order&lt;/span&gt;
        &lt;span class="c1"&gt;// in which this method is called for the job vertices is not a topological order&lt;/span&gt;
        &lt;span class="c1"&gt;// 获取当前JobEdge的输入所对应的IntermediateResult&lt;/span&gt;
        &lt;span class="n"&gt;IntermediateResult&lt;/span&gt; &lt;span class="n"&gt;ires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intermediateDataSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSourceId&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ires&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JobException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cannot connect this job graph to the previous graph. No previous intermediate result found for ID &amp;quot;&lt;/span&gt;
                    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSourceId&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 将IntermediateResult加入到当前ExecutionJobVertex的输入中。&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ires&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 为IntermediateResult注册consumer consumerIndex跟IntermediateResult的出度相关&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;consumerIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ires&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerConsumer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parallelism&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ExecutionVertex&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taskVertices&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="c1"&gt;// 将ExecutionVertex与IntermediateResult关联起来&lt;/span&gt;
            &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connectSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ires&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerIndex&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改方法最后通过一个connectSource方法将ExecutionVertex链接起来.有两种链接策略&lt;code&gt;POINT_WISE&lt;/code&gt;和&lt;code&gt;ALL_TO_ALL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POINTWISE&lt;/li&gt;
&lt;li&gt;Each producing sub task is connected to one or more subtask(s) of the consuming task.&lt;/li&gt;
&lt;li&gt;ALL_TO_ALL&lt;/li&gt;
&lt;li&gt;Each producing sub task is connected to each sub task of the consuming task.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体来说,如果是非shuffle的操作就是&lt;code&gt;POINTWISE&lt;/code&gt;,否则就是&lt;code&gt;ALL_TO_ALL&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;connectSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntermediateResult&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JobEdge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;consumerNumber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DistributionPattern&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDistributionPattern&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;IntermediateResultPartition&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;sourcePartitions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPartitions&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;ExecutionEdge&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;POINTWISE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;edges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connectPointwise&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourcePartitions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ALL_TO_ALL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;edges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connectAllToAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourcePartitions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;        default:&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unrecognized distribution pattern.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inputEdges&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inputNumber&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// add the consumers to the source&lt;/span&gt;
    &lt;span class="c1"&gt;// for now (until the receiver initiated handshake is in place), we need to register the&lt;/span&gt;
    &lt;span class="c1"&gt;// edges as the execution graph&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEdge&lt;/span&gt; &lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSource&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;addConsumer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ee&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行到这里的时候,&lt;code&gt;ExecutionGraph&lt;/code&gt;就已经生成了.&lt;/p&gt;</content><category term="bigdata"></category><category term="flink"></category></entry><entry><title>pcap</title><link href="xixuebin.github.io/2019-03-25-163106-ch.html" rel="alternate"></link><published>2019-03-25T16:31:06+08:00</published><updated>2019-03-25T16:31:06+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-25:xixuebin.github.io/2019-03-25-163106-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;PCAP(packet capture)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In the field of computer network administration, pcap (packet capture) consists of an application programming interface (API) for capturing network traffic. Unix-like systems implement pcap in the libpcap library; Windows uses a port of libpcap known as WinPcap. Monitoring software may use libpcap and/or WinPcap to capture packets travelling over a network and, in newer versions, to transmit packets on a network at the link layer, as well as to get a list of network interfaces for possible use with libpcap or WinPcap. The pcap API is written in C, so other languages such as Java, .NET languages, and scripting languages generally use a wrapper; no such wrappers are provided by libpcap or WinPcap itself. C++ programs may link directly to the C API or use an object-oriented wrapper.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PCAP 是一组抓取网络流量的接口组合&lt;/li&gt;
&lt;li&gt;在类unix的系统上PCAP接口的实现是libpcap,在windows系统上是WinPcap&lt;/li&gt;
&lt;li&gt;PCAP API都是用C写的.所以其他语言如java,net.或者脚本语言,如果要使用的话,都是对这些类库的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;libpcap最初由美国劳伦斯伯克力国家实验室网络研究小组的tcpdump开发人员开发。它是tcpdump的低级数据包捕获,捕获文件读取和捕获文件分析的类库,tcpdump基于libpcap实现。&lt;/p&gt;
&lt;p&gt;主要作用:&lt;/p&gt;
&lt;p&gt;捕获各种数据包，例如：网络流量统计
过滤网络数据包，例如：过滤掉本地上的一些数据，类似防火墙
分析网络数据包，例如：分析网络协议，数据的采集
存储网络数据包，例如：保存捕获的数据以为将来进行分析&lt;/p&gt;
&lt;p&gt;libpcap的抓包框架&lt;/p&gt;
&lt;p&gt;利用libpcap函数库开发应用程序的步骤&lt;/p&gt;
&lt;p&gt;打开网络设备
设置过滤规则
捕获数据
关闭网络设备&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/le4f/pcap-analyzer"&gt;https://github.com/le4f/pcap-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/danielStudy/p/7007689.html"&gt;https://www.cnblogs.com/danielStudy/p/7007689.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.wireshark.org/Development/LibpcapFileFormat"&gt;https://wiki.wireshark.org/Development/LibpcapFileFormat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pcap"></category></entry><entry><title>Markdown文件渲染html</title><link href="xixuebin.github.io/2019-03-24-224640-sh.html" rel="alternate"></link><published>2019-03-24T22:46:40+08:00</published><updated>2019-03-24T22:46:40+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-24:xixuebin.github.io/2019-03-24-224640-sh.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;p&gt;本地使用markdown写的文档,在查看的时候,希望直接渲染成html&lt;/p&gt;
&lt;p&gt;工具
&lt;a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk"&gt;Markdown Viewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/simov/markdown-viewer#path-matching-priority"&gt;Markdown Viewer GIT 地址&lt;/a&gt;&lt;/p&gt;</content><category term="工具"></category></entry><entry><title>我的工具链</title><link href="xixuebin.github.io/2019-03-24-2242-java.html" rel="alternate"></link><published>2019-03-24T22:42:07+08:00</published><updated>2019-03-24T22:42:07+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-24:xixuebin.github.io/2019-03-24-2242-java.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;我的开发工具链&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Markdown文件渲染html.md"&gt;渲染markdown文档成html显示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;博客文章写作工作&lt;/h1&gt;
&lt;h2&gt;pelican&lt;/h2&gt;
&lt;h2&gt;vscode&lt;/h2&gt;
&lt;p&gt;vscode用到的插件列表:&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/vvkee/vscode-aliyun-upload-image"&gt;aliyun oss upload image&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该插件可以直接上传图片到阿里云上,并生成访问连接,mac下的快捷键是shit+p,配置参数如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;地区，在阿里云对象存储中bucket的概览里面有EndPoint（地域节点），oss-cn-hongkong.aliyuncs.com中的oss-cn-hongkong就是region&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;aliyun.region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;accessKeyId（RAM中生成的accessKeyId）&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;aliyun.accessKeyId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;accessKeySecret（RAM中生成的accessKeySecret）&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;aliyun.accessKeySecret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;输入你的bucket名称&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;aliyun.bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;remotePath，您的存储目录，例如要把文件存在http://${你的yuming&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;/images/png，则这里填写images/png）&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;aliyun.remotePath&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;阿里云oss域名，可以定义自己的域名，需要在oss中配置，支持https&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;aliyun.domain&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;本地文件，用于临时缓存（默认:&lt;/span&gt; &lt;span class="err"&gt;/tmp/.aliyun）&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;aliyun.localPath&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/.aliyun&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/yzhang-gh/vscode-markdown"&gt;Markdown All in One&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以完成vscode上,写markdown的大部分需求&lt;/p&gt;</content><category term="工具"></category></entry><entry><title>vs-code配置优化</title><link href="xixuebin.github.io/vs-code-2019-03-22-1829-ch.html" rel="alternate"></link><published>2019-03-22T18:29:59+08:00</published><updated>2019-03-22T18:29:59+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2019-03-22:xixuebin.github.io/vs-code-2019-03-22-1829-ch.html</id><summary type="html">&lt;p&gt;Summary&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;!-- https://code.visualstudio.com/docs/editor/userdefinedsnippets --&gt;

&lt;h1&gt;自动补全和智能感知&lt;/h1&gt;
&lt;h2&gt;通过自动以的包路径增强感知功能&lt;/h2&gt;
&lt;p&gt;对于那些安装在非标准位置的包,可以通过在设置中指定&lt;code&gt;python.autoComplete.extraPaths&lt;/code&gt;路径的值,实现智能感知.例如对于aws-glue-libs安装在自定义路径中,可以这样实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python.autoComplete.extraPaths&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/Users/xixuebin/PycharmProjects/yeahmobi/aws-glue-libs&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;添加多个路径到pythonPath中&lt;/h2&gt;
&lt;p&gt;我们开启了&lt;code&gt;python.autoComplete.extraPaths&lt;/code&gt;配置项后,可以在我们的代码中,自动补全,可是当我们运行的时候,还是找不到类库,是因为我们没有把我们的类库添加到python的路径中去.&lt;/p&gt;
&lt;p&gt;添加方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在setting.json中添加环境变量文件
  &lt;code&gt;python.envFile": "${workspaceFolder}/.env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在环境变量文件中添加我们的库路径
  &lt;code&gt;PYTHONPATH="C:\path\to\a;C:\path\to\b"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;比较完整的一个vscode 开发python的一个配置&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.disableInstallationCheck&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.pylintEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.maxNumberOfProblems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.pylintPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pylint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.terminal.activateEnvironment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.pep8Enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.pep8Args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--ignore=E303&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--max-line-length=120&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.linting.enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.pythonPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/xixuebin/PycharmProjects/py_env/yeahmobi-3.7/bin/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.autoComplete.extraPaths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;${env:SPARK_HOME}/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;${env:SPARK_HOME}/python/pyspark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;/Users/xixuebin/PycharmProjects/yeahmobi/aws-glue-libs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;/Users/xixuebin/PycharmProjects/yeahmobi/aws-glue-libs/awsglue&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.formatting.provider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;autopep8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.formatting.autopep8Args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--max-line-length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;120&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;--experimental&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;editor.formatOnSave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.envFile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${workspaceFolder}/.vscode/.env&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;写markdown文章&lt;/h1&gt;
&lt;p&gt;最近发现使用vscode写markdown文章,并完成文章的维护非常流畅&lt;/p&gt;
&lt;h2&gt;涉及插件&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个插件可以完成markdown写作80的功能&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/file-imports"&gt;Markdown Preview Enhanced&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;非常棒的一个插件,可以实时预览,导出各种格式,实时预览&lt;/p&gt;
&lt;h1&gt;注意事项&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vscode的setting.json 要生效的话,必须重启vscode&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/python/editing"&gt;VScode edit doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/41471578/visual-studio-code-how-to-add-multiple-paths-to-python-path"&gt;VSCode add multiple path to python path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="工具"></category></entry><entry><title>Spring使用环境变量控制配置文件加载</title><link href="xixuebin.github.io/spring-env-config-2018-08-30-1827-ch.html" rel="alternate"></link><published>2018-08-30T18:27:53+08:00</published><updated>2018-08-30T18:27:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-08-30:xixuebin.github.io/spring-env-config-2018-08-30-1827-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Spring环境变量的配置&lt;/h1&gt;
&lt;h2&gt;环境变量&lt;/h2&gt;
&lt;p&gt;项目中需要用到很多配置文件，不同环境的配置文件是不一样的，因此如果只用一个配置文件，势必会造成配置文件混乱，这里提供一种利用环境变量控制配置文件加载的方法.如果是linux环境，则修改tomcat的文件即可，具体为：../{tomcat_path}/bin/catalina.sh，找到&lt;code&gt;JAVA_OPTS=$JAVA_OPTS&lt;/code&gt;，加上参数即可，例如：&lt;code&gt;JAVA_OPTS="$JAVA_OPTS -Dconfig_env=test&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;系统配置文件&lt;/h2&gt;
&lt;p&gt;假设我们的开发环境分为dev、uat和生产环境，则我们可以在系统中设置三个配置文件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config_dev.properties&lt;/code&gt;、&lt;code&gt;config_test.properties&lt;/code&gt;、&lt;code&gt;config_prod.properties&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;Spring加载&lt;/h2&gt;
&lt;p&gt;Spring配置文件在加载时，设置“固定名+变量名”的方式进行加载，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 读取配置文件 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;context:property-placeholder&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;classpath:config_${config_env}.properties&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ignore-unresolvable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的config_${config_env}.properties在不同的环境中就能加载不同的配置文件了。&lt;/p&gt;</content><category term="java"></category><category term="spring"></category><category term="config"></category></entry><entry><title>基于Storm、Esper CEP及Spark构建异常交易行为风险监控系统</title><link href="xixuebin.github.io/risk-controller-2018-08-24-1550-ch.html" rel="alternate"></link><published>2018-08-24T10:27:02+08:00</published><updated>2018-08-24T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-08-24:xixuebin.github.io/risk-controller-2018-08-24-1550-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;2015年以来，随着股市的持续火爆，中国证监会、证券业协会先后发布相关文件，要求对证券公司外部信息系统接入风险加强行业监管和自律。其中要求证券公司应当建立投资者证券、资金账户风险监测模型，动态监测账户交易行为特征、客户交易终端定位信息、账户资金进出等情况，及时发现借助信息系统外部接入、非法接入网上交易接口等方式开展的违规拆分账户、出借账户或违反账户实名制等违法违规行为线索，并及时予以处理。同时，根据交易所的相关规定，对于出现某些异常交易行为的，交易所会对相关投资者发出书面警示，或者直接采取暂停投资者账户当日交易、限制投资者账户交易等措施。为了更好地应对此类风险，我们利用最新的大数据相关技术，实现对海量交易数据进行各类复杂的实时与离线相结合的异常交易行为分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;业务需求&lt;/h1&gt;
&lt;h2&gt;事前风控&lt;/h2&gt;
&lt;p&gt;事前风控可对交易指令先进行风险监控,通过监控的交易质量才提交给交易系统进行处理,未通过监控的交易指令将直接予以拒绝.事前风控要求处理时间很短.&lt;/p&gt;</content><category term="storm"></category><category term="spark"></category><category term="risk controller"></category></entry><entry><title>YCSB Result to Graph</title><link href="xixuebin.github.io/ycsb-result-to-graph-2018-06-04-0658-ch.html" rel="alternate"></link><published>2018-06-04T22:06:58+08:00</published><updated>2018-06-04T22:06:58+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-06-04:xixuebin.github.io/ycsb-result-to-graph-2018-06-04-0658-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;To generate visualize graph from ycsb testing results&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;YCSB是一个NOSQL的基准性能测试的工具,测试方便简单,但是却不能以图标的方式展示结果.&lt;/p&gt;
&lt;p&gt;ycsb2graph 网上开源的一个结果转化工具&lt;/p&gt;</content><category term="ycsb"></category></entry><entry><title>Aerospike Install</title><link href="xixuebin.github.io/aerospike-install-date-2018-05-29-0658-ch.html" rel="alternate"></link><published>2018-05-29T22:06:58+08:00</published><updated>2018-05-29T22:06:58+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-05-29:xixuebin.github.io/aerospike-install-date-2018-05-29-0658-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;安装和配置Aerospike&lt;/h1&gt;
&lt;h2&gt;Install Aerospike&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -O aerospike.tgz &lt;span class="s1"&gt;&amp;#39;https://www.aerospike.com/download/server/latest/artifact/ubuntu12&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# for ubuntu 14.04, replace ubuntu12 with ubuntu14&lt;/span&gt;
&lt;span class="c1"&gt;# for ubuntu 16.04, replace ubuntu12 with ubuntu16&lt;/span&gt;
tar -xvf aerospike.tgz
&lt;span class="nb"&gt;cd&lt;/span&gt; aerospike-server-community-*-ubuntu12*
&lt;span class="c1"&gt;# for ubuntu 14.04, replace &amp;quot;ubuntu12&amp;quot; with ubuntu14&lt;/span&gt;
sudo ./asinstall &lt;span class="c1"&gt;# will install the .deb packages&lt;/span&gt;
sudo service aerospike start &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
sudo tail -f /var/log/aerospike/aerospike.log &lt;span class="p"&gt;|&lt;/span&gt; grep cake
&lt;span class="c1"&gt;# Wait for it. &amp;quot;service ready: soon there will be cake!&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# For systemd based installations, check in the journald facility.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Config Aerospike&lt;/h2&gt;
&lt;p&gt;Aerospike使用一个单独的配置文件来配置数据库,位置默认在/etc/aersopike/aerospike.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service &lt;span class="o"&gt;{}&lt;/span&gt;               &lt;span class="c1"&gt;# Tuning parameters and process owner&lt;/span&gt;

network &lt;span class="o"&gt;{&lt;/span&gt;                &lt;span class="c1"&gt;# Used to configure intracluster and application-node&lt;/span&gt;
                         &lt;span class="c1"&gt;# communications&lt;/span&gt;
    service &lt;span class="o"&gt;{}&lt;/span&gt;           &lt;span class="c1"&gt;# Tools/Application communications protocol&lt;/span&gt;
    fabric &lt;span class="o"&gt;{}&lt;/span&gt;            &lt;span class="c1"&gt;# Intracluster communications protocol&lt;/span&gt;
    info &lt;span class="o"&gt;{}&lt;/span&gt;              &lt;span class="c1"&gt;# Administrator telnet console protocol&lt;/span&gt;
    heartbeat &lt;span class="o"&gt;{}&lt;/span&gt;         &lt;span class="c1"&gt;# Cluster formation protocol&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

cluster &lt;span class="o"&gt;{}&lt;/span&gt;               &lt;span class="c1"&gt;# (Optional) Configure rack-aware clustering&lt;/span&gt;

xdr &lt;span class="o"&gt;{&lt;/span&gt;                    &lt;span class="c1"&gt;# (Aerospike Enterprise only) Configure Cross&lt;/span&gt;
                         &lt;span class="c1"&gt;# Datacenter Replication&lt;/span&gt;
    datacenter &amp;lt;name&amp;gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;# Remote datacenter node list&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

namespace &amp;lt;name&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;       &lt;span class="c1"&gt;# Define namespace record policies and storage engine&lt;/span&gt;
    storage &lt;span class="o"&gt;{}&lt;/span&gt;           &lt;span class="c1"&gt;# Configure persistence or lack of persistence&lt;/span&gt;
    &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;               &lt;span class="c1"&gt;# (Optional) Set specific record policies&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aersopike的namespace需要在配置文件中进行配置,不能创建.&lt;/p&gt;
&lt;h2&gt;集群方式Config Aerospike&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Aerospike database configuration file for use with systemd.&lt;/span&gt;

service &lt;span class="o"&gt;{&lt;/span&gt;
  paxos-single-replica-limit &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Number of nodes where the replica count is automatically reduced to 1.&lt;/span&gt;
  proto-fd-max &lt;span class="m"&gt;15000&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

logging &lt;span class="o"&gt;{&lt;/span&gt;
  file /opt/aerospike/log/aerospike.log  &lt;span class="o"&gt;{&lt;/span&gt;
    context any info
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

network &lt;span class="o"&gt;{&lt;/span&gt;
  service &lt;span class="o"&gt;{&lt;/span&gt;
    address any
    port &lt;span class="m"&gt;3000&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  heartbeat &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;#mode multicast&lt;/span&gt;
    &lt;span class="c1"&gt;#multicast-group 239.1.99.222&lt;/span&gt;
    &lt;span class="c1"&gt;#port 9918&lt;/span&gt;

    mode mesh
    port &lt;span class="m"&gt;3002&lt;/span&gt; &lt;span class="c1"&gt;# Heartbeat port for this node&lt;/span&gt;
    &lt;span class="c1"&gt;# To use unicast-mesh heartbeats, remove the 3 lines above, and see&lt;/span&gt;
    &lt;span class="c1"&gt;# aerospike_mesh.conf for alternative.&lt;/span&gt;
    &lt;span class="c1"&gt;# add all cluster node address here&lt;/span&gt;
    mesh-seed-address-port &lt;span class="m"&gt;10&lt;/span&gt;.*.*.* &lt;span class="m"&gt;3002&lt;/span&gt;
    mesh-seed-address-port &lt;span class="m"&gt;10&lt;/span&gt;.*.*.* &lt;span class="m"&gt;3002&lt;/span&gt;
    mesh-seed-address-port &lt;span class="m"&gt;10&lt;/span&gt;.*.*.* &lt;span class="m"&gt;3002&lt;/span&gt;

    interval &lt;span class="m"&gt;150&lt;/span&gt;
    timeout &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  fabric &lt;span class="o"&gt;{&lt;/span&gt;
    port &lt;span class="m"&gt;3001&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  info &lt;span class="o"&gt;{&lt;/span&gt;
    port &lt;span class="m"&gt;3003&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

namespace &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  replication-factor &lt;span class="m"&gt;1&lt;/span&gt;
  memory-size 5G
  default-ttl 0d &lt;span class="c1"&gt;# 30 days, use 0 to never expire/evict.&lt;/span&gt;

  storage-engine memory
&lt;span class="o"&gt;}&lt;/span&gt;

namespace bar &lt;span class="o"&gt;{&lt;/span&gt;
  replication-factor &lt;span class="m"&gt;2&lt;/span&gt;
  memory-size 4G
  default-ttl 30d &lt;span class="c1"&gt;# 30 days, use 0 to never expire/evict.&lt;/span&gt;

  storage-engine memory

  &lt;span class="c1"&gt;# To use file storage backing, comment out the line above and use the&lt;/span&gt;
  &lt;span class="c1"&gt;# following lines instead.&lt;/span&gt;
&lt;span class="c1"&gt;# storage-engine device {&lt;/span&gt;
&lt;span class="c1"&gt;#   file /opt/aerospike/data/bar.dat&lt;/span&gt;
&lt;span class="c1"&gt;#   filesize 16G&lt;/span&gt;
&lt;span class="c1"&gt;#   data-in-memory true # Store data in memory in addition to file.&lt;/span&gt;
&lt;span class="c1"&gt;# }&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Network Configuration&lt;/h2&gt;
&lt;p&gt;Aerospike的数据库的网络配置有一些关键的端口,供其他节点或者工具使.&lt;/p&gt;
&lt;style&gt;
table th:first-of-type {
    width: 170px;
}
table th:nth-of-type(2) {
    width: 110px;
}
&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Name&lt;/th&gt;
&lt;th align="left"&gt;Default Port&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Service&lt;/td&gt;
&lt;td align="left"&gt;3000&lt;/td&gt;
&lt;td align="left"&gt;Application, Tools, and Remote XDR use the Service port for database operations and cluster state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Fabric&lt;/td&gt;
&lt;td align="left"&gt;3001&lt;/td&gt;
&lt;td align="left"&gt;Intra-cluster communication port. Replica writes, migrations, and other node-to-node communications use the Fabric port.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Mesh Heartbeat&lt;/td&gt;
&lt;td align="left"&gt;3002&lt;/td&gt;
&lt;td align="left"&gt;Heartbeat protocol ports are used to form and maintain the cluster. (Only one heartbeat port may be configured.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Multicast Heartbeat&lt;/td&gt;
&lt;td align="left"&gt;9918&lt;/td&gt;
&lt;td align="left"&gt;Heartbeat protocol ports are used to form and maintain the cluster. (Only one heartbeat port may be configured.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Info&lt;/td&gt;
&lt;td align="left"&gt;3003&lt;/td&gt;
&lt;td align="left"&gt;Telnet port that implements a plain text protocol for administrators to issue info commands. For more information, see asinfo documentation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Configuring Strong Consistency&lt;/h2&gt;
&lt;p&gt;通过处理配置namespace的强一致性,需要进行一下配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保NTP服务已经配置&lt;/li&gt;
&lt;li&gt;Make sure you have NTP configured&lt;/li&gt;
&lt;li&gt;添加配置文件条目来表示强一直性namespace&lt;/li&gt;
&lt;li&gt;配置初始的roster&lt;/li&gt;
&lt;li&gt;配置节点的ID&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install ntp
vi /etc/ntp.conf
sudo systemctl reload ntp.service
sudo ntpq -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加节点ID,修改配置文件&lt;code&gt;/etc/aerospike/aerospike.conf&lt;/code&gt;,添加&lt;code&gt;node-id&lt;/code&gt;属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service &lt;span class="o"&gt;{&lt;/span&gt;
    user root
    group root
    service-threads &lt;span class="m"&gt;4&lt;/span&gt;
    transaction-queues &lt;span class="m"&gt;4&lt;/span&gt;
    transaction-threads-per-queue &lt;span class="m"&gt;4&lt;/span&gt;
    nsup-period &lt;span class="m"&gt;16&lt;/span&gt;
    proto-fd-max &lt;span class="m"&gt;15000&lt;/span&gt;

    node-id a1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在希望保持强一致性的节点上添加属性&lt;code&gt;strong-consistency true&lt;/code&gt;和属性&lt;code&gt;default-ttl 0&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;namespace &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    replication-factor &lt;span class="m"&gt;2&lt;/span&gt;
    memory-size 1G
    default-ttl &lt;span class="m"&gt;0&lt;/span&gt;
    strong-consistency &lt;span class="nb"&gt;true&lt;/span&gt;
    storage-engine device &lt;span class="o"&gt;{&lt;/span&gt;
       file /var/lib/aerospike/test.dat
       filesize 4G
       data-in-memory &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置日志&lt;/h2&gt;
&lt;p&gt;配置日志路径和级别&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logging &lt;span class="o"&gt;{&lt;/span&gt;
    file /var/log/aerospike/aerospike.log &lt;span class="o"&gt;{&lt;/span&gt;
        context any info
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看存在的log路径&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~$ asinfo -v logs
     requested value  logs
     value is  &lt;span class="m"&gt;0&lt;/span&gt;:/var/log/aerospike/aerospike.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;SQL语句操作&lt;/h1&gt;
&lt;h2&gt;Aql 操作&lt;/h2&gt;
&lt;p&gt;查询结果以json输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aql&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; key_send &lt;span class="nb"&gt;true&lt;/span&gt;
aql&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; output json
aql&amp;gt; &lt;span class="nb"&gt;set&lt;/span&gt; record_print_metadata &lt;span class="nb"&gt;true&lt;/span&gt;
.... Insert records ...
aql&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; * from test.links
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;PK&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;key9&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;digest&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;fLBhK40CvGA9J891weFg6dbysyE=&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ttl&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;2591983&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;gen&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;bins&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1590&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;link_type&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;visibility&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;abc81&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Truncate Set&lt;/p&gt;
&lt;p&gt;deleting all the data in a namespace or a set &lt;code&gt;TRUNCATE &amp;lt;ns&amp;gt;[.&amp;lt;set&amp;gt;] [upto &amp;lt;LUT&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aql&amp;gt; show sets&lt;span class="p"&gt;;&lt;/span&gt;
+------------------+--------+----------------+-----------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; disable-eviction &lt;span class="p"&gt;|&lt;/span&gt; ns     &lt;span class="p"&gt;|&lt;/span&gt; set-enable-xdr &lt;span class="p"&gt;|&lt;/span&gt; objects   &lt;span class="p"&gt;|&lt;/span&gt; stop-writes-count &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; memory_data_bytes &lt;span class="p"&gt;|&lt;/span&gt; truncate_lut   &lt;span class="p"&gt;|&lt;/span&gt; tombstones &lt;span class="p"&gt;|&lt;/span&gt;
+------------------+--------+----------------+-----------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ycsb&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;use-default&amp;quot;&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1000000&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usertable&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1172000000&amp;quot;&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;265285359958&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;
+------------------+--------+----------------+-----------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:3000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.001 secs&lt;span class="o"&gt;)&lt;/span&gt;

OK

aql&amp;gt; TRUNCATE  ycsb.usertable&lt;span class="p"&gt;;&lt;/span&gt;
OK

aql&amp;gt; show sets&lt;span class="p"&gt;;&lt;/span&gt;
+------------------+--------+----------------+---------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; disable-eviction &lt;span class="p"&gt;|&lt;/span&gt; ns     &lt;span class="p"&gt;|&lt;/span&gt; set-enable-xdr &lt;span class="p"&gt;|&lt;/span&gt; objects &lt;span class="p"&gt;|&lt;/span&gt; stop-writes-count &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;         &lt;span class="p"&gt;|&lt;/span&gt; memory_data_bytes &lt;span class="p"&gt;|&lt;/span&gt; truncate_lut   &lt;span class="p"&gt;|&lt;/span&gt; tombstones &lt;span class="p"&gt;|&lt;/span&gt;
+------------------+--------+----------------+---------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ycsb&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;use-default&amp;quot;&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usertable&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;265356458309&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt;
+------------------+--------+----------------+---------+-------------------+-------------+-------------------+----------------+------------+
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:3000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.001 secs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install Aerospike AMC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下载AMC文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.aerospike.com/download/amc/4.0.19/"&gt;下载页面&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用root用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tar -xvf aerospike-amc-&amp;lt;version&amp;gt;.tar.gz -C /
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /opt/amc/bin/uninstall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认端口是8081&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/amc start

sudo /etc/init.d/amc stop

sudo /etc/init.d/amc restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;操作命令&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aql&amp;gt; TRUNCATE  ycsb.usertable
OK
aql&amp;gt; show sets&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aerospike.com/docs/amc/install/linux/any/index.html"&gt;AMC Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aerospike.com/docs/amc/user_guide"&gt;AMC 管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/u011344514/article/details/53082757"&gt;Aerospike数据库配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/songhuiqiao/article/details/50262565"&gt;Aerospike工具集——ascli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/songhuiqiao/article/details/50262647"&gt;Aerospike工具集——aql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aoyouzi.iteye.com/blog/2283751"&gt;Aerospike使用介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aerospike.com/docs/reference/configuration"&gt;MANIPULATING RUNTIME CONFIGURATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aerospike.com/docs/operations/configure/namespace/storage"&gt;Namespace Storage Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aerospike"></category></entry><entry><title>YSCB Aerospike Benchmarks</title><link href="xixuebin.github.io/yscb-aerospike-benchmarks-date-2018-05-29-0658-ch.html" rel="alternate"></link><published>2018-05-29T22:06:58+08:00</published><updated>2018-05-29T22:06:58+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-05-29:xixuebin.github.io/yscb-aerospike-benchmarks-date-2018-05-29-0658-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;YCSB核心参数&lt;/h1&gt;
&lt;h2&gt;核心YCSB属性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;workload：要使用的工作量类（例如com.yahoo.ycsb.workloads.CoreWorkload）&lt;/li&gt;
&lt;li&gt;db：要使用的数据库类。可选地，这在命令行可以指定（默认：com.yahoo.ycsb.BasicDB）&lt;/li&gt;
&lt;li&gt;exporter：要是用的测量结果的输出类（默认：com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter）&lt;/li&gt;
&lt;li&gt;exportfile：用于替代stdout的输出文件路径（默认：未定义/输出到stdout）&lt;/li&gt;
&lt;li&gt;threadcount：YCSB客户端的线程数。可选地，这可以在命令行指定（默认：1）&lt;/li&gt;
&lt;li&gt;measurementtype：支持的测量结果类型有直方图和时间序列（默认：直方图）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;核心工作量包属性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fieldcount：一条记录中的字段数（默认：10）&lt;/li&gt;
&lt;li&gt;fieldlength：每个字段的大小（默认：100）&lt;/li&gt;
&lt;li&gt;readallfields：是否应该读取所有字段（true）或者只有一个字段（false）（默认：true）&lt;/li&gt;
&lt;li&gt;readproportion：读操作的比例（默认：0.95）&lt;/li&gt;
&lt;li&gt;updateproportion：更新操作的比例（默认：0.05）&lt;/li&gt;
&lt;li&gt;insertproportion：插入操作的比例（默认：0）&lt;/li&gt;
&lt;li&gt;scanproportion：遍历操作的比例（默认：0）&lt;/li&gt;
&lt;li&gt;readmodifywriteproportion：读-修改-写一条记录的操作的比例（默认：0）&lt;/li&gt;
&lt;li&gt;requestdistribution：选择要操作的记录的分布——均匀分布（uniform）、Zipfian分布（zipfian）或者最近分布（latest）（默认：uniform）&lt;/li&gt;
&lt;li&gt;maxscanlength：对于遍历操作，最大的遍历记录数（默认：1000）&lt;/li&gt;
&lt;li&gt;scanlengthdistribution：对于遍历操作，要遍历的记录数的分布，在1到maxscanlength之间（默认：uniform）&lt;/li&gt;
&lt;li&gt;insertorder：记录是否应该有序插入（ordered），或者是哈希顺序（hashed）（默认：hashed）&lt;/li&gt;
&lt;li&gt;operationcount：要进行的操作数数量&lt;/li&gt;
&lt;li&gt;maxexecutiontime：最大的执行时间（单位为秒）。当操作数达到规定值或者执行时间达到规定最大值时基准测试会停止。&lt;/li&gt;
&lt;li&gt;table：表的名称（默认：usertable）&lt;/li&gt;
&lt;li&gt;recordcount：装载进数据库的初始记录数（默认：0）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Workload文件&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;文件名&lt;/th&gt;
&lt;th align="left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloada&lt;/td&gt;
&lt;td align="left"&gt;Update heavy workload. This workload has a mix of 50/50 reads and writes. An application example is a session store recording recent actions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloadb&lt;/td&gt;
&lt;td align="left"&gt;Read mostly workload. This workload has a 95/5 reads/write mix. Application example: photo tagging; add a tag is an update, but most operations are to read tags.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloadc&lt;/td&gt;
&lt;td align="left"&gt;Read only. This workload is 100% read. Application example: user profile cache, where profiles are constructed elsewhere (e.g., Hadoop).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloadd&lt;/td&gt;
&lt;td align="left"&gt;Read latest workload. In this workload, new records are inserted, and the most recently inserted records are the most popular. Application example: user status updates; people want to read the latest.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloade&lt;/td&gt;
&lt;td align="left"&gt;Short ranges. In this workload, short ranges of records are queried, instead of individual records. Application example: threaded conversations, where each scan is for the posts in a given thread (assumed to be clustered by thread id).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;workloadf&lt;/td&gt;
&lt;td align="left"&gt;Read-modify-write. In this workload, the client will read a record, modify it, and write back the changes. Application example: user database, where user records are read and modified by the user or to record user activity.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;测量结果属性&lt;/h2&gt;
&lt;p&gt;这些属性被应用于每一个测量结果类型：&lt;/p&gt;
&lt;p&gt;直方图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;histogram.buckets：直方图输出的区间数（默认：1000）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时间序列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timeseries.granularity：时间序列输出的粒度（默认：1000）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;测试步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;启动aersopike&lt;/li&gt;
&lt;li&gt;安装java &amp;amp; maven  &lt;/li&gt;
&lt;li&gt;配置YSCB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git clone YCSB and compile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone http://github.com/brianfrankcooper/YCSB.git
&lt;span class="nb"&gt;cd&lt;/span&gt; YCSB
mvn -pl com.yahoo.ycsb:aerospike-binding -am clean package
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;设置Aerospike链接参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数列表如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;as.host - The Aerospike cluster to connect to &lt;span class="o"&gt;(&lt;/span&gt;default: localhost&lt;span class="o"&gt;)&lt;/span&gt;
as.port - The port to connect to &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="m"&gt;3000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
as.user - The user to connect as &lt;span class="o"&gt;(&lt;/span&gt;no default&lt;span class="o"&gt;)&lt;/span&gt;
as.password - The password &lt;span class="k"&gt;for&lt;/span&gt; the user &lt;span class="o"&gt;(&lt;/span&gt;no default&lt;span class="o"&gt;)&lt;/span&gt;
as.timeout - The transaction and connection timeout &lt;span class="o"&gt;(&lt;/span&gt;in ms, default: &lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
as.namespace - The namespace to be used &lt;span class="k"&gt;for&lt;/span&gt; the benchmark &lt;span class="o"&gt;(&lt;/span&gt;default: ycsb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加以上参数到workload文件中,或者在命令行中进行设置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./bin/ycsb load aerospike -s -P workloads/workloada -p as.timeout&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt; &amp;gt;outputLoad.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;加载数据进行测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加载数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./bin/ycsb load aerospike -s -P workloads/workloada &amp;gt;outputLoad.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行workload测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./bin/ycsb run aerospike -s -P workloads/workloada &amp;gt;outputRun.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;测试结果&lt;/h1&gt;
&lt;p&gt;机器选用AWS EC2 r4.2xlarge&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#机器配置&lt;/span&gt;
ami-id: ami-817bf7fe
ami-launch-index: &lt;span class="m"&gt;0&lt;/span&gt;
ami-manifest-path: &lt;span class="o"&gt;(&lt;/span&gt;unknown&lt;span class="o"&gt;)&lt;/span&gt;
ancestor-ami-ids: unavailable
availability-zone: us-east-1a
block-device-mapping: ami
root
instance-action: none
instance-id: i-03a11e19b65304182
instance-type: r4.2xlarge
local-hostname: ip-172-31-86-235.ec2.internal
local-ipv4: &lt;span class="m"&gt;172&lt;/span&gt;.31.86.235
kernel-id: unavailable
mac: unavailable
profile: default-hvm
product-codes: b3dl4415quatdndl4qa6kcu45
public-hostname: ec2-52-70-30-23.compute-1.amazonaws.com
public-ipv4: &lt;span class="m"&gt;52&lt;/span&gt;.70.30.23
public-keys: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0b1TrSLW4MsUcMuF2KmObHE8Mdj1aXXN2Px84dvVuvfLtK78tpytfg6Ty7hYA8OkFNYu0HAxfPKcSU5NoRp7I/DpXlRJWIER4/3yTh3q72QuqrrALWjxVerC4vIaeisS/fPclLZCGLKvw9naiSRj+7sYCGagfxgGX8RSW09EnYDICO3euSYD0CpVm/UtgpT0EyE4DksPlihoZ6up6XWyOX/tqeRT58zpDKSVJLPk1yN26+HPft/WUp30NZdDdrDYpEFzVo1DRrbHYx5ko0s+C1EYcQyEmn85vuFYMFR+fk2YfHCCtDvWJbIAXT6VNi3oT0GiV8SvdnifqpaZfkjxx air&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
ramdisk-id: unavailable
reserveration-id: unavailable
security-groups: launch-wizard-6
user-data: unavailable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试对比了Aerospike和Redis,相同的测试文件,测试数据量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#导入数据&lt;/span&gt;

&lt;span class="c1"&gt;#导入&lt;/span&gt;
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;#读取&lt;/span&gt;
&lt;span class="c1"&gt;#单线程&lt;/span&gt;
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 多线程&lt;/span&gt;
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; 

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;# 多线程&lt;/span&gt;

./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;4&lt;/span&gt;


&lt;span class="c1"&gt;# Aerospike混合模式(内存+SSD)&lt;/span&gt;

&lt;span class="c1"&gt;# 单线程写&lt;/span&gt;

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;277&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;65119&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;950&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;58&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;.13, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;78&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;83&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;92&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;116&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;144831&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;13809&lt;/span&gt;.198306992288
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.029689776360033417
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.029689776360033417
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;70&lt;/span&gt;.4026765
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;52&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;11063&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;78&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;84&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

&lt;span class="c1"&gt;# 三个线程写&lt;/span&gt;

./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;78&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;164&lt;/span&gt;.67, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;49519&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1138&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt;.15, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;660&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;61576&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;32480&lt;/span&gt;.187085877613
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.06820839288034299
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.06820839288034299
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;164&lt;/span&gt;.66666666666666
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;78&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;330&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;330&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;330&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;89&lt;/span&gt;.620958
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;11551&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;113&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;129&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

&lt;span class="c1"&gt;# 五个线程写入&lt;/span&gt;
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;71&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;138&lt;/span&gt;.4, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44942&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5879&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt;.49, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;158&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;305&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5683&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;41042&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;48730&lt;/span&gt;.568685736565
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.10964377954290727
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.10964377954290727
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;138&lt;/span&gt;.4
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;71&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;351&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;351&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;351&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.3683945
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;11543&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;135&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;160&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

&lt;span class="c1"&gt;# 十个线程写入&lt;/span&gt;
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;10&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 十个线程写入有问题,Device overload&lt;/span&gt;


&lt;span class="c1"&gt;# 单线程读&lt;/span&gt;
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20424&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2671&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;387&lt;/span&gt;.33, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;439&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;511&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;885&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;77952&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2565&lt;/span&gt;.6814449917897
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.008979885057471264
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.008979885057471264
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;387&lt;/span&gt;.18972
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;302&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;9951&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;463&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;520&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;


&lt;span class="c1"&gt;# 三个线程读&lt;/span&gt;
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;71&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64420&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3104&lt;/span&gt;.6258925799443
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.010866190624029805
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.010866190624029805
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;962&lt;/span&gt;.887505
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;334&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;137983&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1048&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1118&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;139&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;71&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;270&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;270&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;270&lt;/span&gt;


&lt;span class="c1"&gt;# 五个线程读&lt;/span&gt;
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;13531&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3883&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;339&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1629&lt;/span&gt;.31, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1686&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2087&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2831&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3375&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;278&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;113&lt;/span&gt;.8, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;278&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;278&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;278&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;278&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64423&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3104&lt;/span&gt;.4813187836644
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.010865684615742825
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.010865684615742825
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1606&lt;/span&gt;.554975
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;339&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;52191&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1714&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1977&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;113&lt;/span&gt;.8
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;278&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;278&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;278&lt;/span&gt;


十个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;10&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;13542&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9711&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;335&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3235&lt;/span&gt;.66, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3327&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5243&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7179&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9207&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;315&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;.7, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;83&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;315&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;315&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;315&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64428&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3104&lt;/span&gt;.2403923759857
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.012416961569503943
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.012416961569503943
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3213&lt;/span&gt;.940835
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;335&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;13879&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3361&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;5231&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;90&lt;/span&gt;.7
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;56&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;315&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;315&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;315&lt;/span&gt;


Aerospike纯内存模式

单线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;161738&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4651&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;57&lt;/span&gt;.25, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;61&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;77&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;119589&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;16723&lt;/span&gt;.946182341184
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.04264606276497002
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.04264606276497002
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;277&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;57&lt;/span&gt;.702708
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;10223&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;68&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

三个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;253209&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3099&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;65&lt;/span&gt;.4, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;71&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;77&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;86&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;193&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45921&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43553&lt;/span&gt;.05851353411
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.09146142287842164
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.09146142287842164
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;147&lt;/span&gt;.66666666666666
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;82&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;264&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;264&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;264&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;65&lt;/span&gt;.9657435
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;15855&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;75&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

五个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22288&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1127&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;.32, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;78&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;134&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1031&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;30470&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;65638&lt;/span&gt;.33278634722
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.14768624876928127
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.14768624876928127
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;137&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;78&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;285&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;285&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;285&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;71&lt;/span&gt;.697445
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;25039&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;122&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;


十个个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;10&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1122&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;.75, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;61&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;86&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;20067&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;99666&lt;/span&gt;.1185030149
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;47&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.234215378482085
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;47&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.234215378482085
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;135&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;84&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;281&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;281&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;281&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;91&lt;/span&gt;.5198
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;18383&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;157&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;205&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

&lt;span class="m"&gt;30&lt;/span&gt;个线程
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;30&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;528&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt;.96, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;398&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;528&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;528&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;528&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;783487&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17135&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;159&lt;/span&gt;.13, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;416&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1064&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4711&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55565&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;143975&lt;/span&gt;.52416089264
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;62&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;109&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.19616665166921626
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;62&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;109&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.19616665166921626
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;186&lt;/span&gt;.03333333333333
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;616&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;528&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;616&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;199&lt;/span&gt;.100356125
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;67327&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;386&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;657&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;

&lt;span class="m"&gt;50&lt;/span&gt;个线程写入
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;50&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;874&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.21, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;427&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;874&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;874&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;874&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;163036&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9639&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt;.97, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;297&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;537&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1841&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5107&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51316&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;155896&lt;/span&gt;.7963208356
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;224&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;209&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.407280380388183
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;224&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;209&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.407280380388183
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;.08
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1524&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;874&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1524&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;307&lt;/span&gt;.86758725
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;87935&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1262&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;

&lt;span class="m"&gt;50&lt;/span&gt;个线程写入
./bin/ycsb load  aerospike -s -P workloads/workloada -threads &lt;span class="m"&gt;100&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;39&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;857&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;58&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;146&lt;/span&gt;.92, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;222&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;857&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;857&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;857&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;176135&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7999&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;193&lt;/span&gt;.02, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;459&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;967&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2303&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5735&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;52413&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;152633&lt;/span&gt;.8885391029
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;93&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1774368954267071
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;93&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1774368954267071
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;417&lt;/span&gt;.09
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;58&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1672&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1290&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1626&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;611&lt;/span&gt;.524326625
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;32&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;128063&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1275&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2143&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;

单线程读

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;293&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;108583&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;18419&lt;/span&gt;.08954440382
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;140&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.12893362681082673
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;140&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.12893362681082673
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;52&lt;/span&gt;.4631315
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;37&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;20399&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;58&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;63&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;293&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;293&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;293&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;293&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;293&lt;/span&gt;


三个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;3&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;316&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;81&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;165&lt;/span&gt;.67, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;316&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;316&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;316&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;316&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43375&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;46109&lt;/span&gt;.51008645533
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.12219020172910663
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.12219020172910663
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;62&lt;/span&gt;.6534445
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;15703&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;70&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;76&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;165&lt;/span&gt;.66666666666666
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;81&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;316&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;316&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;316&lt;/span&gt;

五个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;103&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;152&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;28681&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;69732&lt;/span&gt;.57557267878
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.18479132526759875
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.18479132526759875
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64&lt;/span&gt;.124509
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;14383&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;79&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;113&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;152&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;103&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;319&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;319&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;319&lt;/span&gt;

&lt;span class="m"&gt;10&lt;/span&gt;个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;10&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1279&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;291&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;134&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;220&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;291&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;291&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;291&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;18443&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;108442&lt;/span&gt;.22740335086
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;47&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2982161253592149
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;47&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2982161253592149
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;82&lt;/span&gt;.236286
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42079&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;140&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;192&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;134&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;67&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;

&lt;span class="m"&gt;30&lt;/span&gt;个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;30&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1025602&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17199&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;133&lt;/span&gt;.29, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;395&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1462&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4247&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;66&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.25, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;281&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;46534&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;171917&lt;/span&gt;.30777496024
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;317&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;249&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5350926204495637
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;317&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;249&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5350926204495637
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;164&lt;/span&gt;.349840875
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;40255&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;328&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;563&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;200&lt;/span&gt;.5
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;66&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;677&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;610&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;677&lt;/span&gt;

&lt;span class="m"&gt;50&lt;/span&gt;个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -threads &lt;span class="m"&gt;50&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt;
READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;813646&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;21743&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;244&lt;/span&gt;.89, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;418&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1264&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3899&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8231&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1695&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;52&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;.8, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;708&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1695&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1695&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1695&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;44723&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;178878&lt;/span&gt;.8766406547
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;307&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;260&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5813563490821277
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;307&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;260&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5813563490821277
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;271&lt;/span&gt;.708472375
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;117887&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;559&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1262&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;258&lt;/span&gt;.32
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;52&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1695&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;913&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1695&lt;/span&gt;

Redis纯内存模式

单线程写
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;237260&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;8429&lt;/span&gt;.570934839418
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;796&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3354969232066088
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;796&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3354969232066088
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;636&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;636&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;636&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;636&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;636&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;116&lt;/span&gt;.440391
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;86&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64735&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;133&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;145&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;


三个线程写
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;236&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;86448&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1991&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;82&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;136&lt;/span&gt;.44, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;158&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;182&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1013&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;94240&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;21222&lt;/span&gt;.410865874364
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;333&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;289&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.30666383701188454
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;333&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;289&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.30666383701188454
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;236&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;49&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;610&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;610&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;610&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;138&lt;/span&gt;.401187
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;26543&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;170&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;193&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;



五个线程写
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9967&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1157&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;.59, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;245&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;274&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;936&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1133&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;90488&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;22102&lt;/span&gt;.37821589603
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;399&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;308&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.34037662452479883
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;399&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;308&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.34037662452479883
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;153&lt;/span&gt;.2
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;599&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;599&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;599&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;223&lt;/span&gt;.079013
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;94&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;41343&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;364&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;


十个线程写
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;82456&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11023&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;367&lt;/span&gt;.43, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;560&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1349&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3605&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;83363&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;23991&lt;/span&gt;.459040581554
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;400&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;295&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.35387402084857794
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;400&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;295&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.35387402084857794
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;115&lt;/span&gt;.2
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;700&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;700&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;700&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;412&lt;/span&gt;.339896
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;94&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42271&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;555&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;698&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;




单线程读取
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;583&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;112345&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;17802&lt;/span&gt;.305398549113
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;153&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1361876362989007
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;153&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1361876362989007
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;54&lt;/span&gt;.270917
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;19919&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;65&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;583&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;583&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;583&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;583&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;583&lt;/span&gt;


三个线程读取
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;574&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;43&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;227&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;574&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;574&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;574&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;574&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;38662&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51730&lt;/span&gt;.381252909836
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;90&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.23020019657544877
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;90&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.23020019657544877
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55&lt;/span&gt;.706724
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;24&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;10447&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;63&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;71&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;227&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;574&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;574&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;574&lt;/span&gt;


五个线程读取
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;5&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;704&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;36&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;175&lt;/span&gt;.2, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;704&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;704&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;704&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;704&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;35947&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55637&lt;/span&gt;.46626978608
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;90&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;84&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2336773583331015
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;90&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;84&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2336773583331015
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;87&lt;/span&gt;.411347
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;15071&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;102&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;113&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;175&lt;/span&gt;.2
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;704&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;704&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;704&lt;/span&gt;

十个线程读取
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;102&lt;/span&gt;.3, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33351&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;59968&lt;/span&gt;.216845072115
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;91&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;83&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.24886809990704925
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;91&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;83&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.24886809990704925
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;163&lt;/span&gt;.037283
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;34&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;18351&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;229&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;246&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;102&lt;/span&gt;.3
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;33&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;638&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;638&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;638&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aersopike 远程测试&lt;/p&gt;
&lt;p&gt;客户端机器配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ip-172-31-81-214:/opt/YCSB# ec2metadata
ami-id: ami-817bf7fe
ami-launch-index: &lt;span class="m"&gt;0&lt;/span&gt;
ami-manifest-path: &lt;span class="o"&gt;(&lt;/span&gt;unknown&lt;span class="o"&gt;)&lt;/span&gt;
ancestor-ami-ids: unavailable
availability-zone: us-east-1a
block-device-mapping: ami
root
instance-action: none
instance-id: i-088ef2e45636f598b
instance-type: m4.xlarge
local-hostname: ip-172-31-81-214.ec2.internal
local-ipv4: &lt;span class="m"&gt;172&lt;/span&gt;.31.81.214
kernel-id: unavailable
mac: unavailable
profile: default-hvm
product-codes: b3dl4415quatdndl4qa6kcu45
public-hostname: ec2-35-173-232-141.compute-1.amazonaws.com
public-ipv4: &lt;span class="m"&gt;35&lt;/span&gt;.173.232.141
public-keys: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0b1TrSLW4MsUcMuF2KmObHE8Mdj1aXXN2Px84dvVuvfLtK78tpytfg6Ty7hYA8OkFNYu0HAxfPKcSU5NoRp7I/DpXlRJWIER4/3yTh3q72QuqrrALWjxVerC4vIaeisS/fPclLZCGLKvw9naiSRj+7sYCGagfxgGX8RSW09EnYDICO3euSYD0CpVm/UtgpT0EyE4DksPlihoZ6up6XWyOX/tqeRT58zpDKSVJLPk1yN26+HPft/WUp30NZdDdrDYpEFzVo1DRrbHYx5ko0s+C1EYcQyEmn85vuFYMFR+fk2YfHCCtDvWJbIAXT6VNi3oT0GiV8SvdnifqpaZfkjxx air&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
ramdisk-id: unavailable
reserveration-id: unavailable
security-groups: launch-wizard-9
user-data: unavailable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用m4.xlarge作为客户端的时候,明显感觉性能跑不上去,基本上网络已经跑慢了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Aerospike 单线程远程写

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=200000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;476&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;23286&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1362&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;199&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;221&lt;/span&gt;.94, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;249&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;273&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;305&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;496&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45220&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4422&lt;/span&gt;.821760283061
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.07961079168509509
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.07961079168509509
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;476&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;476&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;476&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;476&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;476&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;223&lt;/span&gt;.231725
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;199&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;10991&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;257&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;282&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;

远程10个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;452&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;93&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;175&lt;/span&gt;.9, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;374&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;452&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;452&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;452&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;125161&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;203775&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;309&lt;/span&gt;.18, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;355&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;395&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;935&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1554&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;64862&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;30834&lt;/span&gt;.695199037957
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;190&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;181&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2790539915512935
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;190&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;181&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2790539915512935
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;175&lt;/span&gt;.9
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;93&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;452&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;452&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;452&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;316&lt;/span&gt;.5550675
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;177&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;204159&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;372&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;404&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

远程50个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4751&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;429&lt;/span&gt;.14, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;548&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4751&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4751&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4751&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;541802&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;203263&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;508&lt;/span&gt;.45, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;748&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1747&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6283&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11263&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;109468&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;73080&lt;/span&gt;.71765264735
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;479&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;614&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5608945079840684
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;479&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;614&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5608945079840684
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;429&lt;/span&gt;.14
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;49&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4751&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2383&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4751&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;653&lt;/span&gt;.948249
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;190&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;204287&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;924&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2109&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;

远程100个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7711&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;621&lt;/span&gt;.29, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1210&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6763&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7711&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7711&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;547332&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26975&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;186&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;535&lt;/span&gt;.14, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1006&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1857&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7587&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17519&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;109799&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;72860&lt;/span&gt;.40856474102
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;123&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;240&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.21858122569422306
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;123&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;240&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.21858122569422306
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1132&lt;/span&gt;.38
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;46&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;18863&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;5255&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;10791&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1244&lt;/span&gt;.65925
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;186&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;366335&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1987&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2775&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;



Aerospike 单线程远程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235

READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27054&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8431&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;207&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;228&lt;/span&gt;.64, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;294&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;311&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;774&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;46245&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4324&lt;/span&gt;.791869391285
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.090820629257217
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.090820629257217
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;228&lt;/span&gt;.46024
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;201&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;203007&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;258&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;290&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;373&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;373&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;373&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;373&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;373&lt;/span&gt;

远程10个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;10&lt;/span&gt;
READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;72587&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5075&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;190&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;285&lt;/span&gt;.34, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;335&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;373&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;621&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4843&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;759&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;73&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;265&lt;/span&gt;.1, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;466&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;759&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;759&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;759&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;63359&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;31566&lt;/span&gt;.15476885683
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;231&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;208&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.32828800959611104
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;231&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;208&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.32828800959611104
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;307&lt;/span&gt;.6797855
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;177&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;203519&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;361&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;393&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;265&lt;/span&gt;.1
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;73&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;759&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;759&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;759&lt;/span&gt;



远程50个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;533485&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26383&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;.16, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;859&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1981&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4651&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9127&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2449&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;53&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;305&lt;/span&gt;.58, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;493&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2449&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2449&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2449&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;27821&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;71888&lt;/span&gt;.14205096869
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;14&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;66&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2372308687681967
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;14&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;66&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2372308687681967
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;654&lt;/span&gt;.7979675
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;185&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;108671&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;964&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2423&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;305&lt;/span&gt;.58
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2449&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;988&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2449&lt;/span&gt;

远程100个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;539958&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;40127&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1196&lt;/span&gt;.94, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1525&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2759&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8239&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17007&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4739&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;39&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;343&lt;/span&gt;.03, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;863&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2641&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4739&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4739&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;27495&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;72740&lt;/span&gt;.49827241317
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.36006546644844517
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.36006546644844517
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1294&lt;/span&gt;.7402735
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;192&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;275967&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1646&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4015&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;343&lt;/span&gt;.03
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;39&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4739&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1193&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2641&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用r4.2xlarge作为客户端,进行测试&lt;/p&gt;
&lt;p&gt;Aerospike测试结果,包括10,50,100个线程的读写(r4.2xlarge)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Aerospike 远程10个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;370&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.7, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;114&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;370&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;370&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;370&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;342348&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3497&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;177&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;236&lt;/span&gt;.97, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;257&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;283&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;312&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1319&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;49080&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;40749&lt;/span&gt;.79625101874
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.09168704156479218
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.09168704156479218
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;123&lt;/span&gt;.7
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;70&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;370&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;370&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;370&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;237&lt;/span&gt;.9980815
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;166&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;14871&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;266&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;285&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

Aerospike 远程50个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=5000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1825&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;.68, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;346&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1825&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1825&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1825&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1053850&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;204415&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;337&lt;/span&gt;.16, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;437&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;666&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2637&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5751&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;59168&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;135208&lt;/span&gt;.2206598161
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;220&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;207&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3498512709572742
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;220&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;207&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3498512709572742
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;202&lt;/span&gt;.68
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;59&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1825&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;466&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1825&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;352&lt;/span&gt;.187830375
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;172&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;211839&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;535&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;765&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;

Aerospike 远程100个线程写
./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=5000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2042&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;279&lt;/span&gt;.94, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;748&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1515&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2042&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2042&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;194685&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17903&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;181&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;351&lt;/span&gt;.62, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;477&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1071&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2807&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9807&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51891&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;154169&lt;/span&gt;.3164517932
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;216&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5607908885933978
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;216&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;291&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.5607908885933978
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;387&lt;/span&gt;.21
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;44&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2051&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1355&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2042&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;610&lt;/span&gt;.282032125
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;173&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;259839&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1377&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1992&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;



Aerospike 远程10个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;71765&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2631&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;189&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;222&lt;/span&gt;.88, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;235&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;285&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1209&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;112&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.71, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;109&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;112&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;112&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;112&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;193979&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;41241&lt;/span&gt;.577696554785
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;446&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1598111135741498
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;446&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;310&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1598111135741498
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;236&lt;/span&gt;.592988875
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;176&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;204159&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;261&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;278&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;122&lt;/span&gt;.3
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;88&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;301&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;301&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;301&lt;/span&gt;

Aerospike 远程50个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;710251&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27023&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;165&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;295&lt;/span&gt;.16, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;366&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;577&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1870&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5083&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;427&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;53&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;.74, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;427&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;427&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;427&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;57787&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;138439&lt;/span&gt;.44139685397
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;110&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;145&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.25092148753179777
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;110&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;145&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.25092148753179777
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;332&lt;/span&gt;.962348625
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;165&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;407551&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;528&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;819&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;169&lt;/span&gt;.72
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;53&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;769&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;754&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;769&lt;/span&gt;

Aerospike 远程100个线程读
./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.86.235 -threads &lt;span class="m"&gt;100&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;147573&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22847&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;170&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;284&lt;/span&gt;.86, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;350&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;609&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1783&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8815&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;420&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;129&lt;/span&gt;.71, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;241&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;420&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;420&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;420&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;51858&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;154267&lt;/span&gt;.4225770373
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;115&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;160&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3085348451540746
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;115&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;160&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3085348451540746
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;587&lt;/span&gt;.27521775
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;168&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;204287&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1380&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2855&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;345&lt;/span&gt;.58
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;48&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2661&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1187&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1679&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redis测试结果,包括10,50,100个线程的读写(r4.2xlarge)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Redis 远程1个线程写入
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;635&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10792&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1401&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;375&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;409&lt;/span&gt;.67, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;449&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;485&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;526&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;578&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;84447&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2368&lt;/span&gt;.3493789003755
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;26&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.030788541925704883
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;26&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.030788541925704883
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;635&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;419&lt;/span&gt;.22351
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;371&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;7827&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;479&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;519&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;

Redis 远程10个线程写入
./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;.67, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3172&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1006&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;407&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;456&lt;/span&gt;.65, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;485&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;561&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;959&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1006&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;100844&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;19832&lt;/span&gt;.612748403473
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;399&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;286&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2836063623021697
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;399&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;286&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.2836063623021697
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;112&lt;/span&gt;.5
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;777&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;777&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;777&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;494&lt;/span&gt;.3584505
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;370&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;203263&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;544&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;631&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;


Redis 远程50个线程写入 
/bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;791&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;61&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;791&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;791&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;791&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;260969&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63135&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;412&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1615&lt;/span&gt;.15, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2569&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3997&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;62079&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;69189&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;28906&lt;/span&gt;.329040743472
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;274&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;245&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3541025307491075
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;274&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;245&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.3541025307491075
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;55&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;19&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;791&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;75&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;791&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1704&lt;/span&gt;.5864365
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;412&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;205439&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2191&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2679&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;


Redis 远程100个线程写入 
/bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;694&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;47&lt;/span&gt;.37, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;69&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;694&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;694&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;260628&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;67967&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;417&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3199&lt;/span&gt;.88, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4127&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4703&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8687&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;66175&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;69262&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;28875&lt;/span&gt;.86266639716
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;124&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1790303485316624
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;124&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.1790303485316624
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;47&lt;/span&gt;.37
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;694&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;80&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3403&lt;/span&gt;.882928
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;417&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;206207&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4431&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;5311&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;

Redis远程单线程读取
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;15320&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;308&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;188&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;212&lt;/span&gt;.89, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;236&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;267&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;275&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;306&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;607&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;43294&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4619&lt;/span&gt;.577770591768
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.020788099967662954
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.020788099967662954
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;213&lt;/span&gt;.691555
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;185&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;63007&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;252&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;268&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;200000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;607&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;607&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;607&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;607&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;607&lt;/span&gt;

Redis远程10个线程读
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;  -threads &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;281097&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60991&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;161&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;228&lt;/span&gt;.29, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;243&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;267&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;314&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1298&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;743&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;117&lt;/span&gt;, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;73&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;743&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;743&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;743&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;47261&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;42318&lt;/span&gt;.190474175324
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;91&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;79&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.16715685237299252
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;91&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;79&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.16715685237299252
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;229&lt;/span&gt;.676914
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;158&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;63295&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;252&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;271&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;READ&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;2000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;117&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;28&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;743&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;743&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;743&lt;/span&gt;

Redis远程50个线程读
./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.86.235&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt;  -threads &lt;span class="m"&gt;50&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;44&lt;/span&gt;.28, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;86&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INSERT: &lt;span class="nv"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;173343&lt;/span&gt;, &lt;span class="nv"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;75583&lt;/span&gt;, &lt;span class="nv"&gt;Min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;411&lt;/span&gt;, &lt;span class="nv"&gt;Avg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1495&lt;/span&gt;.66, &lt;span class="nv"&gt;90&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2225&lt;/span&gt;, &lt;span class="nv"&gt;99&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2697&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.9&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3107&lt;/span&gt;, &lt;span class="m"&gt;99&lt;/span&gt;.99&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5355&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, RunTime&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;276416&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;OVERALL&lt;span class="o"&gt;]&lt;/span&gt;, Throughput&lt;span class="o"&gt;(&lt;/span&gt;ops/sec&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;28941&lt;/span&gt;.884695531375
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_Scavenge&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.03219784672377866
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCS_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%_PS_MarkSweep&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.0
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GCs&lt;span class="o"&gt;]&lt;/span&gt;, Count, &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;89&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;TOTAL_GC_TIME_%&lt;span class="o"&gt;]&lt;/span&gt;, Time&lt;span class="o"&gt;(&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.03219784672377866
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;60&lt;/span&gt;.06
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;27&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1001&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;103&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;CLEANUP&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;210&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, Operations, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, AverageLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3371&lt;/span&gt;.432886375
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MinLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;411&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, MaxLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;207231&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 95thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;4435&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, 99thPercentileLatency&lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;5091&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;INSERT&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;OK, &lt;span class="m"&gt;8000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试请求语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=200000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadA-1.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadA-10.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=6000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadA-30.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadA-50.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadA-100.result


./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadC-1.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadC-10.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=6000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadC-30.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadC-50.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; -p as.host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.31.94.142 &amp;gt;&amp;gt; remote_aeropike-WorkloadC-100.result


./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=200000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadA-1.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadA-10.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadA-30.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadA-50.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadA-100.result


./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadC-1.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadC-10.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadC-30.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadC-50.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=172.31.94.142&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt; remote_redis-WorkloadC-100.result

&lt;span class="c1"&gt;# 本机&lt;/span&gt;

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=200000&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadA-1.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadA-10.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=6000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadA-30.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadA-50.result

./bin/ycsb load  aerospike -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;recordcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadA-100.result


./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt;  &amp;gt;&amp;gt;aeropike-WorkloadC-1.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadC-10.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=6000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadC-30.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadC-50.result

./bin/ycsb run  aerospike -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;operationcount=8000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt;aeropike-WorkloadC-100.result



./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=200000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadA-1.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadA-10.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadA-30.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadA-50.result

./bin/ycsb load redis -s -P workloads/workloada -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;recordcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadA-100.result


./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=200000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadC-1.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;10&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadC-10.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=1000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;30&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadC-30.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;50&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadC-50.result

./bin/ycsb run redis -s -P workloads/workloadc -p &lt;span class="s2"&gt;&amp;quot;redis.host=127.0.0.1&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;redis.port=6379&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;operationcount=2000000&amp;quot;&lt;/span&gt; -threads &lt;span class="m"&gt;100&lt;/span&gt; &amp;gt;&amp;gt; redis-WorkloadC-100.result
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/brianfrankcooper/YCSB/tree/master/aerospike"&gt;https://github.com/brianfrankcooper/YCSB/tree/master/aerospike&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.aerospike.com/blog/aerospike-doubles-in-memory-nosql-database-performance/"&gt;Aerospike基准性能测试&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/bonelee/p/6282798.html"&gt;ycsb两个阶段说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="yscb"></category><category term="aerospike"></category></entry><entry><title>JAVA8 资料</title><link href="xixuebin.github.io/java-8-source-date-2018-04-14-2047-ch.html" rel="alternate"></link><published>2018-04-14T09:32:53+08:00</published><updated>2018-04-14T09:32:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-04-14:xixuebin.github.io/java-8-source-date-2018-04-14-2047-ch.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;java学习资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://outofmemory.cn/java/tutorial/"&gt;基础java教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jvm"></category></entry><entry><title>JAVA8 Commons</title><link href="xixuebin.github.io/java-8-commons-date-2018-04-12-1752-ch.html" rel="alternate"></link><published>2018-04-12T17:52:53+08:00</published><updated>2017-12-28T18:46:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-04-12:xixuebin.github.io/java-8-commons-date-2018-04-12-1752-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;ReflectionToStringBuilder&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ReflectionToStringBuilder&lt;/code&gt;是&lt;code&gt;Commons-lang&lt;/code&gt;里的一个类.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ReflectionToStringBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要排除某些字段.可以使用ReflectionToStringBuilder.toStringExlude方法.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReflectionToStringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// 注意这里为了表达上的简洁用了匿名内部类.&lt;/span&gt;
      &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="java"></category><category term="jvm"></category><category term="javalib"></category></entry><entry><title>JAVA8 ReadWriteLock</title><link href="xixuebin.github.io/java-8-readwritelock-date-2018-04-04-1109-ch.html" rel="alternate"></link><published>2018-04-05T12:04:53+08:00</published><updated>2018-04-04T11:09:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-04-05:xixuebin.github.io/java-8-readwritelock-date-2018-04-04-1109-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;java.util.concurrent.locks.ReadWriteLock 是一个高级的线程锁,允许多个线程去读一个资源,但是同一时间只能有一个线程去写资源.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;ReadWriteLock锁规则&lt;/h1&gt;
&lt;p&gt;Read Lock   如果没有写线程锁住ReadWriteLock对象,并且没有写线程请求写锁,此时多个读线程可以锁住该ReadWriteLock对象.&lt;/p&gt;
&lt;p&gt;Write Lock  如果没有线程读或者写,这样同一时间一个线程可以锁住改线程锁.&lt;/p&gt;
&lt;h1&gt;ReadWriteLock实现&lt;/h1&gt;
&lt;p&gt;ReadWriteLock是一个接口. 实现是ReentrantReadWriteLock&lt;/p&gt;
&lt;h1&gt;ReadWriteLock样例代码&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ReadWriteLock&lt;/span&gt; &lt;span class="n"&gt;readWriteLock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReentrantReadWriteLock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;readWriteLock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// multiple readers can enter this section&lt;/span&gt;
    &lt;span class="c1"&gt;// if not locked for writing, and not writers waiting&lt;/span&gt;
    &lt;span class="c1"&gt;// to lock for writing.&lt;/span&gt;

&lt;span class="n"&gt;readWriteLock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;unlock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;readWriteLock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// only one writer can enter this section,&lt;/span&gt;
    &lt;span class="c1"&gt;// and only if no threads are currently reading.&lt;/span&gt;

&lt;span class="n"&gt;readWriteLock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;unlock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="java"></category><category term="jvm"></category></entry><entry><title>概率论(机器学习)-朴素贝叶斯公式</title><link href="xixuebin.github.io/ml-naive-bayes-2018-04-04-1038-ch.html" rel="alternate"></link><published>2018-04-04T10:38:01+08:00</published><updated>2018-04-04T10:38:01+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-04-04:xixuebin.github.io/ml-naive-bayes-2018-04-04-1038-ch.html</id><summary type="html">&lt;p&gt;朴素贝叶斯公式&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在机器学习中，朴素贝叶斯分类器是一个基于贝叶斯定理的比较简单的概率分类器，其中 naive（朴素）是指的对于模型中各个 feature（特征） 有强独立性的假设，并未将 feature 间的相关性纳入考虑中。
朴素贝叶斯分类器一个比较著名的应用是用于对垃圾邮件分类，通常用文字特征来识别垃圾邮件，是文本分类中比较常用的一种方法。朴素贝叶斯分类通过选择token（通常是邮件中的单词）来得到垃圾邮件和非垃圾邮件间的关联，再通过贝叶斯定理来计算概率从而对邮件进行分类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;贝叶斯公式&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;P(A|B) = P(B|A)*P(A)/P(B)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;什么是贝叶斯推断&lt;/h2&gt;
&lt;p&gt;贝叶斯推断是一种统计学方法,用来估计统计量的某种特质.&lt;/p&gt;
&lt;h2&gt;朴素贝叶斯定理&lt;/h2&gt;
&lt;p&gt;设D是训练样本和相关联的类标的集合,其中训练样本属性集为:math:&lt;code&gt;A_\text{c} = (\pi/4) d^2&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/UXvSe_FYcS_s5HicMV6SUA"&gt;6步骤带你了解朴素贝叶斯分类器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/pursued-deer/p/7783459.html"&gt;机器学习之朴素贝叶斯算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="ml"></category></entry><entry><title>Spring Boot 多对多注解</title><link href="xixuebin.github.io/spring-boot-manytomany-date-2018-03-22-1450-ch.html" rel="alternate"></link><published>2018-03-22T12:04:53+08:00</published><updated>2018-03-22T12:04:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-03-22:xixuebin.github.io/spring-boot-manytomany-date-2018-03-22-1450-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用spring boot开发的时候,经常出现多对多的情况,在进行序列化的时候,如果不处理,就会出现StackOverflowError的异常.这时候需靠考虑使用Jackson的几个注解处理了问题.&lt;code&gt;JsonManagedReference&lt;/code&gt;和&lt;code&gt;JsonManagedReference&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如下面的例子:&lt;/p&gt;
&lt;p&gt;User entity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@JsonBackReference&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;userItems&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Item entity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;itemName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@JsonManagedReference&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="nf"&gt;givenBidirectionRelation_whenUsingJacksonReferenceAnnotation_thenCorrect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;JsonProcessingException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectMapper&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;containsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;containsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;containsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userItems&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;quot;itemName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以使用注解JsonManagedReference和JsonBackReference可以解决循环序列化的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@JsonManagedReference is the forward part of reference – the one that gets serialized normally&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@JsonBackReference is the back part of reference – it will be omitted from serialization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@JsonBackReference&lt;/code&gt;和&lt;code&gt;@JsonManagedReference&lt;/code&gt;通常配对使用.通常用在父子关系中.
&lt;code&gt;@JsonBackReference&lt;/code&gt;标注在属性序列化的时候,会被忽略.JsonManagedReference标注的属性会被序列化.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@JsonIgnore&lt;/code&gt;直接忽略属性.&lt;/p&gt;
&lt;p&gt;自关联的实体类使用MangToOne和OneToMany来自映射&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@ManyToOne&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@OneToMany&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mappedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;parent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion"&gt;http://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/maxu12345/article/details/45538157"&gt;http://blog.csdn.net/maxu12345/article/details/45538157&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="spring"></category><category term="spring-boot"></category><category term="json"></category></entry><entry><title>概率论(机器学习)-贝叶斯公式</title><link href="xixuebin.github.io/ml-bayes-2018-03-22-1038-ch.html" rel="alternate"></link><published>2018-03-22T10:38:01+08:00</published><updated>2018-03-22T10:38:01+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-03-22:xixuebin.github.io/ml-bayes-2018-03-22-1038-ch.html</id><summary type="html">&lt;p&gt;贝叶斯公式&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87"&gt;条件概率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;贝叶斯定理是关于随机事件A和B的条件概率（或边缘概率）的一则定理,其中P(A|B)是在B发生的情况下A发生的可能性。贝叶斯定理也称贝叶斯推理.&lt;code&gt;P(A/B)=P(B/A)*P(A)/P(B)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;条件概率&lt;/h1&gt;
&lt;p&gt;在事件B发生的基础上,A事假发生的概率,记为P(A|B)&lt;/p&gt;
&lt;p&gt;从贝叶斯的公式来看有三个要素:&lt;/p&gt;
&lt;h2&gt;先验概率&lt;/h2&gt;
&lt;p&gt;P(A)为先验概率,即在不知道事件B的前提下,对事件A的一个主观判断&lt;/p&gt;
&lt;h2&gt;可能函数&lt;/h2&gt;
&lt;p&gt;P(B|A)/P(B)称为可能函数,这是一个调整因子,即新信息带来的调整,使得先验概率更接近真实概率&lt;/p&gt;
&lt;h2&gt;后验概率&lt;/h2&gt;
&lt;p&gt;P(A|B)称为后验概率,即在B事件发生之后,我们对A事件的重新评估&lt;/p&gt;
&lt;p&gt;因此贝叶斯定理可以理解为:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;后验概率(新信息出现后A的概率) = 先验概率(A概率) * 可能函数(新信息带来的调整)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;贝叶斯的底层思想就是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果能够掌握一个事情的全部信息,就可以计算出一个客观概率.如果决策信息不全,只能根据有限信息,尽可能做出一个好的预测.在主观判断的基础上,先估计一个值(后验概率).然后根据观察新的信息不断修正(可能函数).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;期望,方差,标准差,协方差&lt;/h2&gt;
&lt;p&gt;一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和&lt;/p&gt;
&lt;p&gt;掷一枚公平的六面骰子，其每次“点数”的期望值是3.5&lt;/p&gt;
&lt;p&gt;&lt;img alt="https://s1.ax1x.com/2018/03/22/9HQrFI.png" src="https://s1.ax1x.com/2018/03/22/9HQrFI.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;方差&lt;/code&gt;是用来衡量一组数据离散程度的统计量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;标准差（standard deviation)&lt;/code&gt;等同于均方差（mean square error, MSE）。standard deviation英文译为“标准偏离”，事实上，标准差计算一组数据偏离均值的平均幅度，不管这组数据是样本数据还是总体数据&lt;/p&gt;
&lt;p&gt;&lt;em&gt;标准差是方差的平方根&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协方差（Covariance）&lt;/code&gt;在概率论和统计学中用于衡量两个变量的总体误差。而方差是协方差的一种特殊情况，即当两个变量是相同的情况。&lt;/p&gt;
&lt;p&gt;从直观上来看，协方差表示的是两个变量总体误差的期望。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个变量的变化趋势一致，也就是说如果其中一个大于自身的期望值时另外一个也大于自身的期望值，那么两个变量之间的协方差就是正值；&lt;/li&gt;
&lt;li&gt;如果两个变量的变化趋势相反，即其中一个变量大于自身的期望值时另外一个却小于自身的期望值，那么两个变量之间的协方差就是负值。&lt;/li&gt;
&lt;li&gt;如果X与Y是统计独立的，那么二者之间的协方差就是0，因为两个独立的随机变量满足E[XY]=E[X]E[Y]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，反过来并不成立。即如果X与Y的协方差为0，二者并不一定是统计独立的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协方差Cov(X,Y)的度量单位是X的协方差乘以Y的协方差。而取决于协方差的相关性，是一个衡量线性独立的无量纲的数。
协方差为0的两个随机变量称为是不相关的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;联合概率分布&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;联合概率分布&lt;/code&gt;简称联合分布，是两个及以上随机变量组成的随机变量的概率分布。根据随机变量的不同，联合概率分布的表示形式也不同。对于离散型随机变量，联合概率分布可以以列表的形式表示，也可以以函数的形式表示；对于连续型随机变量，联合概率分布通过非负函数的积分表示。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;联合概率分布&lt;/code&gt;分为&lt;code&gt;联合离散型概率分布&lt;/code&gt;和&lt;code&gt;联合连续型概率分布&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;离散型&lt;/h3&gt;
&lt;p&gt;对于二维离散随机向量，设X和Y都是离散型随机变量，{Xi}和 {Yj} 分别是X和Y的一切可能的几何，则X和Y的联合概率分布可以表示为如右图的列联表，也可以表示为如下的函数形式&lt;/p&gt;
&lt;h3&gt;连续型&lt;/h3&gt;
&lt;p&gt;对于二维连续随机向量，设X和Y为连续型随机变量，其联合概率分布，或连续型随机变量(X,Y)的概率分布F(x,y)通过一非负函数 f(x,y) &amp;gt; 0 的积分表示，称函数 f(x,y)为联合概率密度.&lt;/p&gt;
&lt;h2&gt;概率密度函数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;连续型随机变量的概率密度函数（在不至于混淆时可以简称为密度函数）是一个描述这个随机变量的输出值，在某个确定的取值点附近的可能性的函数。而随机变量的取值落在某个区域之内的概率则为概率密度函数在这个区域上的积分。当概率密度函数存在的时候，累积分布函数是概率密度函数的积分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;伯努利分布&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;伯努利分布&lt;/code&gt;亦称“零一分布”、“两点分布”。称随机变量X有伯努利分布, 参数为p(0&amp;lt;p&amp;lt;1),如果它分别以概率p和1-p取1和0为值。EX=p,DX=p(1-p)。伯努利试验成功的次数服从伯努利分布,参数p是试验成功的概率。伯努利分布是一个离散型机率分布，是N=1时二项分布的特殊情况.&lt;/p&gt;
&lt;h3&gt;二项式分布&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;二项式分布&lt;/code&gt;就是重复n次独立的伯努利试验。在每次试验中只有两种可能的结果，而且两种结果发生与否互相对立，并且相互独立，与其它各次试验结果无关，事件发生与否的概率在每一次独立试验中都保持不变，则这一系列试验总称为n重伯努利实验，当试验次数为1时，二项分布服从0-1分布。二项分布的极限分布为正态分布.&lt;/p&gt;
&lt;h3&gt;多项式分布&lt;/h3&gt;</content><category term="ml"></category></entry><entry><title>AWS Athena Query S3 Json Data</title><link href="xixuebin.github.io/aws-athena-date-2018-01-22-0658-ch.html" rel="alternate"></link><published>2018-01-22T22:06:58+08:00</published><updated>2018-01-22T22:06:58+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-22:xixuebin.github.io/aws-athena-date-2018-01-22-0658-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;p&gt;使用athena查询aws的s3上的数据.需要遵循以下流程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用AWS S3创建一个存储桶&lt;/li&gt;
&lt;li&gt;放置需要查询的文件到S3存储桶中&lt;/li&gt;
&lt;li&gt;根据存储通里的数据结构,创建athena存储表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们目前需要接一些报表数据到Superset中去展示,通过讨论决定采用以下流程:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongodb -&amp;gt; S3 -&amp;gt; athena -&amp;gt; superset
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;每日处理MongoDB中的业务数据成JSON文件&lt;/li&gt;
&lt;li&gt;Put Json文件到 S3中&lt;/li&gt;
&lt;li&gt;使用athena查询S3中的json文件&lt;/li&gt;
&lt;li&gt;使用athena所谓superset的数据源,进行报表展示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据输入格式为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;numPets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;birthDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1970-01-01 07:20:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为 AWS athena 查询的数据需要一条记录是一行,所以需要在文件冲,把json处理成 一条记录一行的方式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;numPets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;birthDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;1970-01-01 07:20:00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;numPets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;birthDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;1970-01-02 07:20:00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把json文件没有层级结构的方式放置到我们的S3 Bucket中:&lt;/p&gt;
&lt;p&gt;&lt;img alt="截图" height="200px" src="https://s1.ax1x.com/2018/01/23/p52kKU.png" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;创建DataBase 和 Table&lt;/p&gt;
&lt;p&gt;&lt;img alt="截图" height="400px" src="https://s1.ax1x.com/2018/01/23/p524MT.png" width="600px"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;创建的table的时候选择数据格式为json&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;添加三列&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;列名要与json文件中的属性名相同&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;创建表的时候选择&lt;code&gt;CREATE EXTERNAL TABLE&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Column 1:
    Name: name
    Type: string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Column 2:
    Name: numPets
    Type: int&lt;/li&gt;
&lt;li&gt;Column 3:
    Name: birthDate
    Type: timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://imgchr.com/i/p5RVQf"&gt;&lt;img alt="p5RVQf.md.png" src="https://s1.ax1x.com/2018/01/23/p5RVQf.md.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Querying the Data&lt;/h1&gt;
&lt;p&gt;现在表已经创建了,可以通过标准的SQL进行查询&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://imgchr.com/i/p5Rjts"&gt;&lt;img alt="p5Rjts.md.png" src="https://s1.ax1x.com/2018/01/23/p5Rjts.md.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;可能问题&lt;/h2&gt;
&lt;p&gt;1.创建好之后,不能查询到数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;请检查表结构和json文件中的属性是否相同
请检查字段的类型和实际类型是否匹配
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.skeddly.com/2016/12/getting-started-with-amazon-athena-json-edition.html"&gt;https://blog.skeddly.com/2016/12/getting-started-with-amazon-athena-json-edition.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="aws"></category><category term="athena"></category><category term="s3"></category></entry><entry><title>JAVA8 Timer &amp; TimerTask</title><link href="xixuebin.github.io/java-8-ttask-date-2018-01-22-1116-ch.html" rel="alternate"></link><published>2018-01-22T11:16:53+08:00</published><updated>2018-01-22T11:16:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-22:xixuebin.github.io/java-8-ttask-date-2018-01-22-1116-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;概览&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Timer&lt;/em&gt;是一种定时工具,用来在后台线程计划执行指定的任务.它可以计划执行一个任务或者反复执行多次.
&lt;em&gt;TimerTask&lt;/em&gt;是一个抽象类,它的子类代表可以被Timer计划的任务&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Timer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.TimerTask&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reminder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Timer&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Reminder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RemindTask&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemindTask&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Time&amp;#39;s up!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Terminate the timer thread&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;About to schedule task.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Reminder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Task scheduled.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;About to schedule task.
Task scheduled.
&lt;span class="c1"&gt;##5秒之后输出&lt;/span&gt;
Time&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;s up! 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过代码可以总结用Timer线程直线和执行一个计划任务的步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现自动以的TimerTask子类,run方法包含要执行的代码&lt;/li&gt;
&lt;li&gt;实例化Timer类,创建计时器后台线程&lt;/li&gt;
&lt;li&gt;实例化任务对象&lt;/li&gt;
&lt;li&gt;制定执行计划&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;终止线程&lt;/h2&gt;
&lt;p&gt;默认情况下,只要一个程序的timer线程在运行,那么这个程序会一直保持运行,结束的方法有四种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用Timer的cancel方法&lt;/li&gt;
&lt;li&gt;让Timer线程成为一个Daemon线程&lt;/li&gt;
&lt;li&gt;当timer相关的所有task都执行完毕后,删除所有此timer对象引用(设置为null)&lt;/li&gt;
&lt;li&gt;调动System.exit()方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方法摘要&lt;/h2&gt;
&lt;p&gt;Timer类方法摘要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//终止此计时器，丢弃所有当前已安排的任务。   &lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;purge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//从此计时器的任务队列中移除所有已取消的任务。   &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
    &lt;span class="c1"&gt;//安排在指定的时间执行指定的任务。&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;firstTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//安排指定的任务在指定的时间开始进行重复的固定延迟执行。   &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;//安排在指定延迟后执行指定的任务。 &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//安排指定的任务从指定的延迟后开始进行重复的固定延迟执行。   &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;firstTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//安排指定的任务在指定的时间开始进行重复的固定速率执行。   &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;scheduleAtFixedRate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimerTask&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//安排指定的任务在指定的延迟后开始进行重复的固定速率执行。  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TimerTask类方法摘要 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//取消此计时器任务。   &lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;//此计时器任务要执行的操作。   &lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;scheduledExecutionTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;//返回此任务最近实际 执行的已安排 执行时间。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/mark_lq/article/details/50320265"&gt;http://blog.csdn.net/mark_lq/article/details/50320265&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zengzhaoshuai.iteye.com/blog/1121105"&gt;http://zengzhaoshuai.iteye.com/blog/1121105&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jvm"></category><category term="timer"></category></entry><entry><title>PostgreSQL Allow Remote Connection</title><link href="xixuebin.github.io/bigdata-postgresql-date-2018-01-17-0938-ch.html" rel="alternate"></link><published>2018-01-17T09:38:53+08:00</published><updated>2018-01-17T09:38:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-17:xixuebin.github.io/bigdata-postgresql-date-2018-01-17-0938-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;PostgreSQL 允许远程机器访问&lt;/h1&gt;
&lt;h2&gt;查看默认配置&lt;/h2&gt;
&lt;p&gt;PostgreSQL 默认的配置绑定的是&lt;code&gt;localhost&lt;/code&gt;, 不允许其他机器链接.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ netstat -nlt
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:443             &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:11211         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:80              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5432          &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:3737          &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上图可以看到端口&lt;code&gt;5432&lt;/code&gt;绑定到了&lt;code&gt;127.0.0.1&lt;/code&gt;,意味着任何其他企图从其他机器链接到postgresql server都会被拒绝.
使用telnet链接将产生如下信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ telnet &lt;span class="m"&gt;107&lt;/span&gt;.170.11.79 &lt;span class="m"&gt;5432&lt;/span&gt;
Trying &lt;span class="m"&gt;107&lt;/span&gt;.170.11.79...
telnet: connect to address &lt;span class="m"&gt;107&lt;/span&gt;.170.11.79: Connection refused
telnet: Unable to connect to remote host
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置postgresql.conf&lt;/h2&gt;
&lt;p&gt;要处理这问题需要修改&lt;code&gt;postgresql.conf&lt;/code&gt;文件.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find &lt;span class="se"&gt;\ &lt;/span&gt;-name &lt;span class="s2"&gt;&amp;quot;postgresql.conf&amp;quot;&lt;/span&gt;
/var/lib/pgsql/9.4/data/postgresql.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开&lt;code&gt;postgresql.conf&lt;/code&gt;,找到并替换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;替换为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启postgresql server之后查看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ netstat -nlt
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:11211         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:80              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:5432            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:25            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:2812          &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; ::1:11211               :::*                    LISTEN
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::5432                 :::*                    LISTEN
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; ::1:25                  :::*                    LISTEN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到端口&lt;em&gt;5432&lt;/em&gt;的&lt;em&gt;Local Address&lt;/em&gt;已经变成&lt;code&gt;0.0.0.0&lt;/code&gt;,这样就可以从其他机器访问到PostgreSQL的服务器了&lt;/p&gt;</content><category term="bigdata"></category><category term="postgresql"></category></entry><entry><title>JAVA8 G1</title><link href="xixuebin.github.io/java-8-g1-date-2018-01-12-1510-ch.html" rel="alternate"></link><published>2018-01-12T15:10:53+08:00</published><updated>2018-01-12T15:10:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-12:xixuebin.github.io/java-8-g1-date-2018-01-12-1510-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;The Garbage-First (G1) collector is a server-style garbage collector, targeted for multi-processor machines with large memories. It meets garbage collection (GC) pause time goals with a high probability, while achieving high throughput. The G1 garbage collector is fully supported in Oracle JDK 7 update 4 and later releases. The G1 collector is designed for applications that:
- Can operate concurrently with applications threads like the CMS collector.
- Compact free space without lengthy GC induced pause times.
- Need more predictable GC pause durations.
- Do not want to sacrifice a lot of throughput performance.
- Do not require a much larger Java heap.
G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector. G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Recommended Use Cases for G1&lt;/h2&gt;
&lt;p&gt;The first focus of G1 is to provide a solution for users running applications that require large heaps with limited GC latency. This means heap sizes of around 6GB or larger, and stable and predictable pause time below 0.5 seconds.&lt;/p&gt;
&lt;p&gt;Applications running today with either the CMS or the ParallelOldGC garbage collector would benefit switching to G1 if the application has one or more of the following traits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full GC durations are too long or too frequent.&lt;/li&gt;
&lt;li&gt;The rate of object allocation rate or promotion varies significantly.&lt;/li&gt;
&lt;li&gt;Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you are using CMS or ParallelOldGC and your application is not experiencing long garbage collection pauses, it is fine to stay with your current collector. Changing to the G1 collector is not a requirement for using the latest JDK.&lt;/p&gt;
&lt;h2&gt;G1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;G1在压缩空间方面有优势&lt;/li&gt;
&lt;li&gt;G1通过将内存分成区域(Region)的方式防止内存碎片化问题&lt;/li&gt;
&lt;li&gt;Eden,Surivior,Old区域不再固定,在内存使用效率上来说更灵活&lt;/li&gt;
&lt;li&gt;G1可以设置预期停顿时间(Pause Time)来控制垃圾收集,避免应用雪崩&lt;/li&gt;
&lt;li&gt;G1在回收内存后会马上同事做合合并空闲内存的工作,而CMS默认是在STW(Stop the world)的时候来做&lt;/li&gt;
&lt;li&gt;G1会在Young GC中使用,而CMS只能在O区使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就目前而言,CMS还是默认首选的GC策略,可能在以下场景G1更合适&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端多核CPU,JVM内存占用较大的应用(至少4G)&lt;/li&gt;
&lt;li&gt;应用在内存中会产生大量内存碎片,需要经常压缩空间&lt;/li&gt;
&lt;li&gt;想要更可控,更预期的GC停顿时间;防止高并发下应用雪崩现象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-XX:+UseG1GC
-XX:MaxGCPauseMillis&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
-XX:+ParallelRefProcEnabled
-XX:-ResizePLAB
-XX:ParallelGCThreads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-XX:+UseG1GC
-XX:MaxGCPauseMillis&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;
-XX:+ParallelRefProcEnabled
-XX:-ResizePLAB
-XX:ParallelGCThreads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
-Xloggc:/pdata/log/hbase/gc/gc-%t.log
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-XX:+PrintGCCause
-XX:+PrintTenuringDistribution
-XX:+UseGCLogFileRotation
-XX:NumberOfGCLogFiles&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
-XX:GCLogFileSize&lt;span class="o"&gt;=&lt;/span&gt;5M
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html"&gt;G1GettingStarted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.intel.com/en-us/blogs/2014/06/18/part-1-tuning-java-garbage-collection-for-hbase"&gt;java-garbage-collection-for-hbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confluence.atlassian.com/confkb/how-to-enable-garbage-collection-gc-logging-300813751.html"&gt;how-to-enable-garbage-collection-gc-logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudera.com/documentation/enterprise/5-8-x/topics/admin_hbase_garbage_collection.html"&gt;admin_hbase_garbage_collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jvm"></category><category term="G1"></category></entry><entry><title>JAVA8 Future</title><link href="xixuebin.github.io/java-8-future-date-2018-01-05-1204-ch.html" rel="alternate"></link><published>2018-01-05T12:04:53+08:00</published><updated>2018-01-05T12:04:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-05:xixuebin.github.io/java-8-future-date-2018-01-05-1204-ch.html</id><summary type="html"></summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A Future represents the result of an asynchronous computation.  Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation.  The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在并发编程的时候一般使用runable,然后把任务扔给线程池,这种情况不需要发返回线程执行的结果,所以run的返回值是void类型.&lt;/p&gt;
&lt;p&gt;如果是多线程协作程序,需要线程返回结果,就需要调用callable接口了.&lt;/p&gt;
&lt;p&gt;callable用法和runable用法一样,只不过调用的是call方法,该方法返回一个泛型的返回值类型,可以任意指定.&lt;/p&gt;
&lt;p&gt;线程属于异步计算模型,所以不能直接从别的线程中得到函数的返回值.Future可以监控目标线程的调用call的情况,当你调用Futrue的get方法以获的结果的时候,当前线程开始阻塞,直到call方法返回结果.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Created by xixuebin on 05/01/2018.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FutureTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ah&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task2&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ah2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ExecutionException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newCachedThreadPool&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Task2&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;---&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Future模式的JDK内置实现&lt;/h3&gt;
&lt;p&gt;由于Future是非常常用的多线程设计模式，因此在JDK中内置了Future模式的实现。这些类在java.util.concurrent包里面。其中最为重要的是FutureTask类，它实现了Runnable接口，作为单独的线程运行。在其run()方法中，通过Sync内部类调用Callable接口，并维护Callable接口的返回对象。当使用FutureTask.get()方法时，将返回Callable接口的返回对象。同样，针对上述的实例，如果使用JDK自带的实现，则需要作如下调整。&lt;/p&gt;
&lt;p&gt;首先，Data接口和FutureData就不需要了，JDK帮我们实现了。&lt;/p&gt;
&lt;p&gt;其次，RealData改为这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.Callable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealData&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RealData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  

    &lt;span class="nd"&gt;@Override&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//利用sleep方法来表示真是业务是非常缓慢的  &lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
            &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.ExecutorService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.Executors&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.FutureTask&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;futureTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RealData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;  
        &lt;span class="n"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   
                &lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//使用线程池  &lt;/span&gt;
        &lt;span class="c1"&gt;//执行FutureTask，相当于上例中的client.request(&amp;quot;name&amp;quot;)发送请求  &lt;/span&gt;
        &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futureTask&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="c1"&gt;//这里可以用一个sleep代替对其他业务逻辑的处理  &lt;/span&gt;
        &lt;span class="c1"&gt;//在处理这些业务逻辑过程中，RealData也正在创建，从而充分了利用等待时间  &lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="c1"&gt;//使用真实数据  &lt;/span&gt;
        &lt;span class="c1"&gt;//如果call()没有执行完成依然会等待  &lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;数据=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;futureTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Future设置线程执行时间&lt;/h3&gt;
&lt;p&gt;在Java中，如果需要设定代码执行的最长时间，即超时，可以用Java线程池ExecutorService类配合Future接口来实现。 &lt;/p&gt;
&lt;p&gt;Future接口提供方法来检测任务是否被执行完，等待任务执行完获得结果，也可以设置任务执行的超时时间。这个设置超时的方法就是实现Java程序执行超时的关键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newSingleThreadExecutor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;   
&lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;   
       &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//使用Callable接口作为构造参数   &lt;/span&gt;
         &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
           &lt;span class="c1"&gt;//真正的任务在这里执行，这里的返回值类型为String，可以为任意类型   &lt;/span&gt;
       &lt;span class="o"&gt;}});&lt;/span&gt;   
&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   
&lt;span class="c1"&gt;//在这里可以做别的任何事情   &lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//取得结果，同时设置超时执行时间为5秒。同样可以用future.get()，不设置执行超时时间取得结果   &lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;futureTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;futureTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeoutException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;futureTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
    &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/question/54100_83333"&gt;http://www.oschina.net/question/54100_83333&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/ghuil/article/details/41048017"&gt;http://blog.csdn.net/ghuil/article/details/41048017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jvm"></category></entry><entry><title>大数据资料</title><link href="xixuebin.github.io/bigdata-date-2018-01-04-1617-ch.html" rel="alternate"></link><published>2018-01-04T16:17:53+08:00</published><updated>2018-01-04T16:17:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-04:xixuebin.github.io/bigdata-date-2018-01-04-1617-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hadooptpoint.org/"&gt;http://www.hadooptpoint.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timepasstechies.com/mapreduce-example-get-input-data-external-source-mysql/"&gt;mapreduce example to get input data from external source such as mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/use-cassandra-run-hadoop"&gt;Use Cassandra to Run Hadoop MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.hadooptpoint.org/multiple-output-files-in-mapreduce-program-using-multipletextoutputformat/#codesyntax_1"&gt;multiple-output-files-in-mapreduce-program-using-multipletextoutputformat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.ona.io/general/2017/08/30/streaming-ona-data-with-nifi-kafka-druid-and-superset.html"&gt;Streaming Ona Data with NiFi, Kafka, Druid, and Superset&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.hortonworks.com/HDPDocuments/HDF3/HDF-3.0.2/bk_getting-started-with-stream-analytics/content/ch_building-end-to-end-app.html"&gt;getting-started-with-stream-analytics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bryanbende.com/development/2016/09/15/apache-nifi-and-apache-kafka"&gt;apache-nifi-and-apache-kafka&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://tsicilian.wordpress.com/2017/07/06/big-data-ingestion-flume-kafka-and-nifi/"&gt;big-data-ingestion-flume-kafka-and-nifi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/BaiHuaXiu123/article/details/53471645"&gt;一款APP从"想法-开发-上线-产品"的全过程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/smartloli/p/5148941.html"&gt;Hadoop - Zeppelin 使用心得&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.iteblog.com/archives/1624.html"&gt;专注大数据及应用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="基于Storm、Esper CEP及Spark构建异常交易行为风险监控系统"&gt;基于Storm、Esper CEP及Spark构建异常交易行为风险监控系统&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="bigdata"></category></entry><entry><title>Hadoop mapreduce multiple files</title><link href="xixuebin.github.io/bigdata-mr-date-2018-01-04-1541-ch.html" rel="alternate"></link><published>2018-01-04T15:41:53+08:00</published><updated>2018-01-04T15:41:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2018-01-04:xixuebin.github.io/bigdata-mr-date-2018-01-04-1541-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;p&gt;在我们一般的mapreduce程序中,我们只输入一种格式的文件,如果要输入多种问文件格式怎么办呢?&lt;/p&gt;
&lt;h1&gt;MapReduce多文件输入&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MultipleInputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInputPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;&lt;span class="n"&gt;TextInputFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CounterMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MultipleInputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInputPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;&lt;span class="n"&gt;TextInputFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CountertwoMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="mulit file input" height="100px" src="https://s1.ax1x.com/2018/01/04/piI8Qx.png" width="300px"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We use MultipleInputs class which supports MapReduce jobs that have multiple input paths with a different InputFormat and Mapper for each path. To understand the concept more clearly let us take a case where user want to take input from two input files with similar structure.
Also assume that both the input files have 2 columns, first having “Name” and second having “Age”. We want to simply combine the data and sort it by “Name”. What we need to do? Just two things:
Use two mapper classes.
Specify the mapper classes in MultipleInputs class object in run/main method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Use two mapper classes.&lt;/li&gt;
&lt;li&gt;Specify the mapper classes in MultipleInputs class object in run/main method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Input Files 1&lt;/h2&gt;
&lt;p&gt;File1.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Aman  &lt;span class="m"&gt;19&lt;/span&gt;
Tom   &lt;span class="m"&gt;20&lt;/span&gt;
Tony  &lt;span class="m"&gt;15&lt;/span&gt;
John  &lt;span class="m"&gt;18&lt;/span&gt;
Johnny      &lt;span class="m"&gt;19&lt;/span&gt;
Hugh  &lt;span class="m"&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Input Files 2&lt;/h2&gt;
&lt;p&gt;File2.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;James,21
Punk,21
Frank,20
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;实现Map和Reduce类&lt;/h1&gt;
&lt;h2&gt;Hadoop multiple input files Driver Class&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.mcis&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.conf.Configuration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.conf.Configured&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.fs.Path&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.IntWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.LongWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.Text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.Job&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.lib.input.MultipleInputs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.lib.input.TextInputFormat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.lib.output.FileOutputFormat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.util.Tool&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.util.ToolRunner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiInputJob&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Configured&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Tool&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setJarByClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultiInputJob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MultipleInputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInputPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
                &lt;span class="n"&gt;TextInputFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CounterMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MultipleInputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInputPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
                &lt;span class="n"&gt;TextInputFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CountertwoMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;FileOutputFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOutputPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setReducerClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CounterReducer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNumReduceTasks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMapOutputKeyClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMapOutputValueClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOutputKeyClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOutputValueClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntWritable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitForCompletion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;ToolRunner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MultiInputJob&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hadoop multiple input files Counter Mapper Class&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.mcis&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.LongWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.Text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.Mapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterMapper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Mapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt;
 &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 

  &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseLong&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hadoop multiple input files Counter Two Mapper Class&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.mcis&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.IntWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.LongWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.Text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.Mapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CountertwoMapper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Mapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt;
 &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseLong&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])),&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hadoop multiple input files Counter Reducer Class&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.mcis&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.IntWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.LongWritable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.io.Text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.hadoop.mapreduce.Reducer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterReducer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IntWritable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LongWritable&lt;/span&gt;  &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntWritable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Output Files&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;17&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;18&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;19&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;20&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;21&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hadooptpoint.org/hadoop-multiple-input-files-example-in-mapreduce/#codesyntax_5"&gt;http://www.hadooptpoint.org/hadoop-multiple-input-files-example-in-mapreduce/#codesyntax_5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="mr"></category><category term="bigdata"></category></entry><entry><title>JAVA8 Guava</title><link href="xixuebin.github.io/java-8-guava-date-2017-12-28-1846-ch.html" rel="alternate"></link><published>2017-12-28T18:46:53+08:00</published><updated>2017-12-28T18:46:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-28:xixuebin.github.io/java-8-guava-date-2017-12-28-1846-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Guava 是一个 Google 的基于java1.6的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, 等等. 这些高质量的 API 可以使你的JAVa代码更加优雅，更加简洁，让你工作更加轻松愉悦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;项目相关信息：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方首页：http://code.google.com/p/guava-libraries&lt;/li&gt;
&lt;li&gt;官方下载：http://code.google.com/p/guava-libraries/downloads/list&lt;/li&gt;
&lt;li&gt;官方文档：http://docs.guava-libraries.googlecode.com/git/javadoc&lt;/li&gt;
&lt;li&gt;http://www.ostools.net/apidocs/apidoc?api=guava&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码包的简单说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.google.common.annotations：普通注解类型。&lt;/li&gt;
&lt;li&gt;com.google.common.base：基本工具类库和接口。&lt;/li&gt;
&lt;li&gt;com.google.common.cache：缓存工具包，非常简单易用且功能强大的JVM内缓存。&lt;/li&gt;
&lt;li&gt;com.google.common.collect：带泛型的集合接口扩展和实现，以及工具类，这里你会发现很多好玩的集合。&lt;/li&gt;
&lt;li&gt;com.google.common.eventbus：发布订阅风格的事件总线。&lt;/li&gt;
&lt;li&gt;com.google.common.hash： 哈希工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.io：I/O工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.math：原始算术类型和超大数的运算工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.net：网络工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.primitives：八种原始类型和无符号类型的静态工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.reflect：反射工具包。&lt;/li&gt;
&lt;li&gt;com.google.common.util.concurrent：多线程工具包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;类库使用手册&lt;/h1&gt;
&lt;p&gt;一.  基本工具类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用和避免 null：null 有语言歧义， 会产生令人费解的错误， 反正他总是让人不爽。很多 Guava 的工具类在遇到 null 时会直接拒绝或出错，而不是默默地接受他们。&lt;/li&gt;
&lt;li&gt;前提条件：更容易的对你的方法进行前提条件的测试。&lt;/li&gt;
&lt;li&gt;常见的对象方法： 简化了Object常用方法的实现， 如 hashCode() 和 toString()。&lt;/li&gt;
&lt;li&gt;排序： Guava 强大的 "fluent Comparator"比较器， 提供多关键字排序。&lt;/li&gt;
&lt;li&gt;Throwable类： 简化了异常检查和错误传播。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二.  集合类：集合类库是 Guava 对 JDK 集合类的扩展， 这是 Guava 项目最完善和为人所知的部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Immutable collections（不变的集合）： 防御性编程， 不可修改的集合，并且提高了效率。&lt;/li&gt;
&lt;li&gt;New collection types(新集合类型)：JDK collections 没有的一些集合类型，主要有：multisets，multimaps，tables， bidirectional maps等等&lt;/li&gt;
&lt;li&gt;Powerful collection utilities（强大的集合工具类）： java.util.Collections 中未包含的常用操作工具类&lt;/li&gt;
&lt;li&gt;Extension utilities（扩展工具类）: 给 Collection 对象添加一个装饰器? 实现迭代器? 我们可以更容易使用这些方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三.  缓存: 本地缓存，可以很方便的操作缓存对象，并且支持各种缓存失效行为模式。&lt;/p&gt;
&lt;p&gt;四.  Functional idioms（函数式）: 简洁, Guava实现了Java的函数式编程，可以显著简化代码。&lt;/p&gt;
&lt;p&gt;五. Concurrency（并发）：强大,简单的抽象,让我们更容易实现简单正确的并发性代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ListenableFuture（可监听的Future）: Futures,用于异步完成的回调。
　　&lt;/li&gt;
&lt;li&gt;Service: 控制事件的启动和关闭，为你管理复杂的状态逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;六. Strings: 一个非常非常有用的字符串工具类: 提供 splitting，joining， padding 等操作。&lt;/p&gt;
&lt;p&gt;七. Primitives: 扩展 JDK 中未提供的对原生类型（如int、char等）的操作， 包括某些类型的无符号的变量。&lt;/p&gt;
&lt;p&gt;八. Ranges: Guava 一个强大的 API，提供 Comparable 类型的范围处理， 包括连续和离散的情况。&lt;/p&gt;
&lt;p&gt;九. I/O: 简化 I/O 操作, 特别是对 I/O 流和文件的操作, for Java 5 and 6.&lt;/p&gt;
&lt;p&gt;十. Hashing: 提供比 Object.hashCode() 更复杂的 hash 方法, 提供 Bloom filters.&lt;/p&gt;
&lt;p&gt;十一. EventBus: 基于发布-订阅模式的组件通信，但是不需要明确地注册在委托对象中。&lt;/p&gt;
&lt;p&gt;十二. Math: 优化的 math 工具类，经过完整测试。&lt;/p&gt;
&lt;p&gt;十三. Reflection: Guava 的 Java 反射机制工具类。&lt;/p&gt;
&lt;h1&gt;Optional&lt;/h1&gt;
&lt;p&gt;大多数情况下开发人员使用null表示是目中缺失情况,可能是已经有一个默认值,或者没有值,或者找不到值.例如,Map.get返回null就表示找不到给定键对应的值&lt;/p&gt;
&lt;p&gt;Guava用Optional&lt;T&gt;表示可能为null的T类型引用。一个Optional实例可能包含非null的引用（我们称之为引用存在），也可能什么也不包括（称之为引用缺失）。它从不说包含的是null值，而是用存在或缺失来表示。但Optional从不会包含null值引用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;possible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;possible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;possible&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建Optional实例&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;method&lt;/th&gt;
&lt;th align="left"&gt;note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Optional.of(T)&lt;/td&gt;
&lt;td align="left"&gt;创建指定引用的Optional实例,如果引用为null,则迅速失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Optional.absent()&lt;/td&gt;
&lt;td align="left"&gt;创建引用缺失的Optional实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Optional.fromNullable(T)&lt;/td&gt;
&lt;td align="left"&gt;创建指定引用的Optional实例,若引用为null则表示缺失&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;用Optional实例查询引用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;method&lt;/th&gt;
&lt;th align="left"&gt;note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;boolean isPresent()&lt;/td&gt;
&lt;td align="left"&gt;如果Optional包含非null的引用,返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;T get()&lt;/td&gt;
&lt;td align="left"&gt;返回Optional所包含的引用,若引用缺失则抛出java.lang.IllegalStateException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;T or(T)&lt;/td&gt;
&lt;td align="left"&gt;返回Optional所包含的引用,若引用缺失则返回指定的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;T orNull()&lt;/td&gt;
&lt;td align="left"&gt;返回Optional所包含的引用,若引用缺失则返回null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Set&lt;T&gt; asSet()&lt;/td&gt;
&lt;td align="left"&gt;返回Optional所包含的引用的单例不可变集,如果引用存在只有单一元素的集合,如果引用缺失,返回一个空集合&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;好的做法是积极地把null和空区分开，以表示不同的含义，在代码中把null和空同等对待是一种令人不安的坏味道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Guava – Preconditions&lt;/h2&gt;
&lt;p&gt;Guava Preconditions类中提供了若干前置条件判断的实用方法,建议使用&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;方法声明（不包括额外参数)&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;th align="left"&gt;检查失败时抛出的异常&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkArgument(boolean)&lt;/td&gt;
&lt;td align="left"&gt;检查boolean是否为true，用来检查传递给方法的参数。&lt;/td&gt;
&lt;td align="left"&gt;IllegalArgumentException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkNotNull(T)&lt;/td&gt;
&lt;td align="left"&gt;检查value是否为null，该方法直接返回value，因此可以内嵌使用checkNotNull。&lt;/td&gt;
&lt;td align="left"&gt;NullPointerException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkState(boolean)&lt;/td&gt;
&lt;td align="left"&gt;用来检查对象的某些状态。&lt;/td&gt;
&lt;td align="left"&gt;IllegalStateException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkElementIndex(int index, int size)&lt;/td&gt;
&lt;td align="left"&gt;检查index作为索引值对某个列表、字符串或数组是否有效。index&amp;gt;=0 &amp;amp;&amp;amp; index&amp;lt;size *&lt;/td&gt;
&lt;td align="left"&gt;IndexOutOfBoundsException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkPositionIndex(int index, int size)&lt;/td&gt;
&lt;td align="left"&gt;检查index作为位置值对某个列表、字符串或数组是否有效。index&amp;gt;=0 &amp;amp;&amp;amp; index&amp;lt;=size *&lt;/td&gt;
&lt;td align="left"&gt;IndexOutOfBoundsException&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;checkPositionIndexes(int start, int end, int size)&lt;/td&gt;
&lt;td align="left"&gt;检查[start, end]表示的位置范围对某个列表、字符串或数组是否有效*&lt;/td&gt;
&lt;td align="left"&gt;IndexOutOfBoundsException&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Guava – Maps&lt;/h2&gt;
&lt;h3&gt;Create Map&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aNewMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newHashMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ImmutableMap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenCreatingImmutableMap_thenCorrect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImmutableMap&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;intValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;intValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;SortedMap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenUsingSortedMap_thenKeysAreSorted&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ImmutableSortedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImmutableSortedMap&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;Ordering&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;natural&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstKey&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lastEntry&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;intValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;BiMap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenCreateBiMap_thenCreated&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;BiMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashBiMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;intValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inverse&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multimap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenCreateMultimap_thenCreated&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multimap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayListMultimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fruit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fruit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fruit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;banana&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multimap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Table&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenCreatingTable_thenCorrect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashBasedTable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;340&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3940&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5576&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3940&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;intValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;columnKeySet&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; 
      &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rowKeySet&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenTransposingTable_thenCorrect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashBasedTable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;340&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3940&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5576&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transposed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transpose&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transposed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rowKeySet&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; 
      &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transposed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;columnKeySet&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ClassToInstanceMap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenCreatingClassToInstanceMap_thenCorrect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ClassToInstanceMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MutableClassToInstanceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Group List using Multimap&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;whenGroupingListsUsingMultimap_thenGrouped&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newArrayList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;Multimap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Multimaps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;containsInAnyOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Adam&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Guava StopWatch&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.base.Stopwatch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.TimeUnit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GuavaStopWatch&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StopWatch Start &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countingDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Stopwatch&lt;/span&gt; &lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Stopwatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createUnstarted&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;elapsed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countingDown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StopWatch Is Running ? --&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isRunning&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StopWatch Time is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;countingDown&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;printTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;End Of Looping&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Check Total Time is Needed: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;stopwatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;GuavaCache&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Guava Cache是在内存中缓存数据，相比较于数据库或redis存储，访问内存中的数据会更加高效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guava官网介绍，下面的这几种情况可以考虑使用Guava Cache：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;愿意消耗一些内存空间来提升速度。&lt;/li&gt;
&lt;li&gt;预料到某些键会被多次查询。&lt;/li&gt;
&lt;li&gt;缓存中存放的数据总量不会超出内存容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.guava&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;guava&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;19.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;构建缓存对象&lt;/h3&gt;
&lt;p&gt;接口Cache代表一块缓存,它有如下方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;valueLoader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ExecutionException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ImmutableMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getAllPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;putAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invalidate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invalidateAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invalidateAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;CacheStats&lt;/span&gt; &lt;span class="nf"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;ConcurrentMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;asMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cleanUp&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过CacheBuilder类来构建一个缓存对象,CacheBuilder类采用builder设计模式,它的每个方法都返回CacheBuilder本身,直到builder()方法被调用,构建一个缓存对象的代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StudyGuavaCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CacheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;word&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Guava Cache&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIfPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;word&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码通过CacheBuilder.newBuilder().build()这句代码创建了一个Cache缓存对象，并在缓存对象中存储了key为word，value为Hello Guava Cache的一条记录。可以看到Cache非常类似于JDK中的Map，但是相比于Map，Guava Cache提供了很多更强大的功能。&lt;/p&gt;
&lt;h3&gt;设置最大存储&lt;/h3&gt;
&lt;p&gt;Guava Cache可以设置在构建缓存对象的时候指定缓存所存储的最大记录数量.当Cache中的记录数量达到最大值后再调用put方法向其中添加对象Guava会先从当前缓存的对象记录中选择一条删除掉，腾出空间后再将新的对象存储到Cache中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StudyGuavaCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CacheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maximumSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;第一个值：&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIfPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;第二个值：&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIfPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;第三个值：&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIfPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码在构造缓存对象时，通过CacheBuilder类的maximumSize方法指定Cache最多可以存储两个对象，然后调用Cache的put方法向其中添加了三个对象。程序执行结果如下图所示，可以看到第三条对象记录的插入，导致了第一条对象记录被删除。&lt;/p&gt;
&lt;h3&gt;移除监听器&lt;/h3&gt;
&lt;p&gt;可以为Cache对象添加一个移除监听器，这样当有记录被删除时可以感知到这个事件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StudyGuavaCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;RemovalListener&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RemovalListener&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onRemoval&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RemovalNotification&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getKey&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;] is removed!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CacheBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newBuilder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maximumSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removalListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key6&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key7&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;removalListener方法为Cache指定了一个移除监听器，这样当有记录从Cache中被删除时，监听器listener就会感知到这个事件。程序运行结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="https://s1.ax1x.com/2018/04/14/CZ11q1.jpg" src="https://s1.ax1x.com/2018/04/14/CZ11q1.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://ifeve.com/google-guava-collectionutilities/"&gt;http://ifeve.com/google-guava-collectionutilities/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://segmentfault.com/a/1190000011105644"&gt;Guava Cache用法介绍&lt;/a&gt;&lt;/p&gt;</content><category term="java"></category><category term="jvm"></category><category term="guava"></category></entry><entry><title>JAVA8 Lambda</title><link href="xixuebin.github.io/java-8-lambda-date-2017-12-28-9032-ch.html" rel="alternate"></link><published>2017-12-28T09:32:53+08:00</published><updated>2017-12-28T09:32:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-28:xixuebin.github.io/java-8-lambda-date-2017-12-28-9032-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Runnable Lambda&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.xxb.java.lambda&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.function.Function&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.stream.Collectors&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Java8Lambda&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;runnableTest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;comparatorTest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;loopingTest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;chainingAndFilter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;mutationAndResults&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;calculatingWithMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loopingTest&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;chainingAndFilter&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n=== Western Pilot Phone List ===&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n=== Eastern Draftee Phone List ===&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mutationAndResults&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;calculatingWithMap&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;personList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Calc average age of pilots old style&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;== Calc Old Style ==&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total Ages: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Average Age: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n== Calc New Style ==&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;totalAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;
                &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;mapToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;OptionalDouble&lt;/span&gt; &lt;span class="n"&gt;averageAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parallelStream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;mapToDouble&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;average&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;averageAge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;()?&lt;/span&gt; &lt;span class="n"&gt;averageAge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAsDouble&lt;/span&gt;&lt;span class="o"&gt;():&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;




    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;runnableTest&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=== RunnableTest ===&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world one!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world two!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;comparatorTest&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;personList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Comparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(){&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;});&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=== sorted asc surName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//use lambda &lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=== sorted asc surName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=== sorted desc surName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;personList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;functionTest&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;

        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;personlists&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;westernStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\nName: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getGivenName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Age: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gender: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getGender&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;EMail: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;geteMail&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Phone: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPhone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Address: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAddress&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n ===westernStyle=== &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;personlists&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printCustom&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;westernStyle&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setGivenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setSurName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="nf"&gt;getGender&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setGender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;geteMail&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;seteMail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getPhone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FEMALE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;age&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="nf"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;surName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eMail&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getGivenName&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getSurName&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;\nName: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s"&gt;&amp;quot;Age: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Gender: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s"&gt;&amp;quot;eMail: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s"&gt;&amp;quot;Phone: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Address: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
                                &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printName&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;    
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;givenName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;surName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Age: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  Gender: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;eMail: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eMail&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Address: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 


    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;createShortList&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Baker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob.baker@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;201-121-4678&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;44 4th St, Smallville, KS 12333&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; 
            &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FEMALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jane.doe@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;202-123-4678&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;33 3rd St, Smallville, KS 12333&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; 
            &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;john.doe@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;202-123-4678&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;33 3rd St, Smallville, KS 12333&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;James&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;james.johnson@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;333-456-1233&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;201 2nd St, New York, NY 12111&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bailey&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;joebob.bailey@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;112-111-1111&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;111 1st St, Town, CA 11111&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Phil&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;phil.smith@examp;e.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;222-33-1234&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;22 2nd St, New Park, CO 222333&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;givenName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Betty&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;surName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jones&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FEMALE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;betty.jones@example.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;211-33-1234&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;22 4th St, New Park, CO 222333&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;printCustom&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Gender&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MALE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FEMALE&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="java"></category><category term="jvm"></category></entry><entry><title>JAVA BASE</title><link href="xixuebin.github.io/java-base-date-2017-12-23-1437-ch.html" rel="alternate"></link><published>2017-12-23T14:37:53+08:00</published><updated>2017-12-23T14:37:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-23:xixuebin.github.io/java-base-date-2017-12-23-1437-ch.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;JAVA注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@SuppressWarnings&lt;/p&gt;
&lt;p&gt;用于抑制编译器产生警告信息&lt;code&gt;@SuppressWarnings(unuse)&lt;/code&gt; &amp;amp; &lt;code&gt;@SuppressWarnings(uncheck)&lt;/code&gt;,其注解目标为类、字段、函数、函数入参、构造函数和函数的局部变量。而家建议注解应声明在最接近警告发生的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Override 表示当前方法覆盖了父类的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;@Deprecation 表示方法已经过时,方法上有横线，使用时会有警告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java多线程系列--锁&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;Synchronized&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Synchronized是java关键字,属于内置特性.属于悲观锁.如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取锁的线程执行完了该代码块，然后线程释放对锁的占有&lt;/li&gt;
&lt;li&gt;线程执行发生异常，此时JVM会让线程自动释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Lock&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Lock不是java关键字,属于JAVA类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问； &lt;/li&gt;
&lt;li&gt;Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分类:&lt;em&gt;可重入锁&lt;/em&gt;,&lt;em&gt;可中断锁&lt;/em&gt;, &lt;em&gt;公平锁&lt;/em&gt;, &lt;em&gt;读写锁&lt;/em&gt;, &lt;em&gt;偏向锁&lt;/em&gt;, &lt;em&gt;乐观锁&lt;/em&gt;, &lt;em&gt;悲观锁&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Lock和Synchronized的选择&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； &lt;/li&gt;
&lt;li&gt;synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； &lt;/li&gt;
&lt;li&gt;Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； &lt;/li&gt;
&lt;li&gt;通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 &lt;/li&gt;
&lt;li&gt;Lock可以提高多个线程进行读操作的效率。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时，此时Lock的性能要远远优于Synchronized.&lt;/p&gt;
&lt;h2&gt;Java多线程系列--原子类&lt;/h2&gt;
&lt;p&gt;JAVA5中的java.util.concurrent包下面有一个atomic子包,其中有几个以Atomic打头的类,可以用非阻塞的方式完成原子操作.
根据修改的数据类型.可以将juc包中的原子操作分为4类:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基本类型&lt;/strong&gt;: &lt;em&gt;AtomicInteger&lt;/em&gt;,&lt;em&gt;AtomicLong&lt;/em&gt;, &lt;em&gt;AtomicBoolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组类型&lt;/strong&gt;: &lt;em&gt;AtomicIntegerArray&lt;/em&gt;,&lt;em&gt;AtomicLongArray&lt;/em&gt;, &lt;em&gt;AtomicReferenceArray&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型&lt;/strong&gt;: &lt;em&gt;AtomicReference&lt;/em&gt;,&lt;em&gt;AtomicStampedRerence&lt;/em&gt;, &lt;em&gt;AtomicMarkableReference&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象的属性修改类型&lt;/strong&gt;: &lt;em&gt;AtomicIntegerFieldUpdater&lt;/em&gt;, AtomicLongFieldUpdater, &lt;em&gt;AtomicReferenceFieldUpdater&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些类存在的目的是对相应的数据进行原子操作.所谓原子操作,就是操作的过程中不会被中断,保证数据是以原子方式进行的&lt;/p&gt;
&lt;p&gt;AtomicLong类的incrementAndGet()方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;incrementAndGet&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(;;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 获取AtomicLong当前对应的long值&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// 将current加1&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// 通过CAS函数，更新current的值&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compareAndSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// value是AtomicLong对应的long值,该值是volatile类型的变量&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 返回AtomicLong对应的long值&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//incrementAndGet()接着将current加1,然后通过CAS函数，将新的值赋值给value&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;compareAndSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareAndSwapLong&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valueOffset&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;CAS 操作(Compare and Swap)乐观锁.CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;非阻塞算法&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个线程的失败或者挂起不应该影响其他线程的失败或者挂起的算法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Java多线程系列--ThreadLocal类&lt;/h4&gt;
&lt;p&gt;用于保存独立的变量.对于一个线程类,当使用ThreadLocal维护变量时候,ThreadLocal为每个使用该变量的线程提供独立的变量副本,所有每个线程都可以独立的改变自己的副本,而不会影响其他线程所对应的副本.通常用于用户登录控制.&lt;/p&gt;</content><category term="java"></category><category term="jvm"></category></entry><entry><title>Python Code</title><link href="xixuebin.github.io/python-code-2017-12-17-1550-ch.html" rel="alternate"></link><published>2017-12-16T10:27:02+08:00</published><updated>2017-12-16T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-16:xixuebin.github.io/python-code-2017-12-17-1550-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Python Code 片段&lt;/h1&gt;
&lt;h2&gt;Python md5 与 PHP md5&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;md5&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b3097c4c-65ea-4944-8f4a-03abc7a41db3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pyhton Token 装饰器&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;token_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#{&amp;#39;timestamp&amp;#39;: u&amp;#39;1513310428&amp;#39;, &amp;#39;token&amp;#39;: u&amp;#39;12354&amp;#39;, &amp;#39;sig&amp;#39;: u&amp;#39;5a13ccdd567f0af1daae1487d2f56150&amp;#39;, &amp;#39;filters&amp;#39;: u&amp;#39;{&amp;quot;aff_manager&amp;quot;:{&amp;quot;value&amp;quot;:&amp;quot;4&amp;quot;,&amp;quot;op&amp;quot;:&amp;quot;eq&amp;quot;}}&amp;#39;}&lt;/span&gt;

        &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timestamp is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token is invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b3097c4c-65e9a-4944-8f4ra-03abc7a41db3-ytud780-dad-1243-dad&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
            &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;hasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_encode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;encode_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;encode_sig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token is invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;time_diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token is expired&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;md5&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1513931508&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;9ad5d68a565d5251532a02d0942905ff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;aff_manager&amp;quot;:{&amp;quot;value&amp;quot;:[&amp;quot;0&amp;quot;],&amp;quot;op&amp;quot;:&amp;quot;in&amp;quot;}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timestamp is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig is required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b3097c4c-65ea-4944-8f4a-03abc7a41db3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url_encode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;url_encode&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_encode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;encode_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9ad5d68a565d5251532a02d0942905ff&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;64d6f13f1fbc15efeff4ed121360024c&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;encode_sig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Parquet文件</title><link href="xixuebin.github.io/bigdata-parquet-date-2017-12-14-1520-ch.html" rel="alternate"></link><published>2017-12-14T15:20:53+08:00</published><updated>2017-12-14T15:20:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-14:xixuebin.github.io/bigdata-parquet-date-2017-12-14-1520-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Parquet介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Parquet是Hadoop生态系统圈中一种新型的列式存储格式,可以兼容Hadoop生态圈中大多数计算框架(Hadoop,Spark等),被多种查询引擎(Hive,Impala,Drill等),并且与语言无关.Parquet是面向分析性业务的列式存储格式,由Twriter和Cloudera合作开发,2015年5月从Apache的孵化器里毕业称为Apache的顶级项目.参考资料 &lt;a href="http://parquet.apache.org/documentation/latest/"&gt;Parquet&lt;/a&gt;。
Avro is a row-based storage format for Hadoop. Parquet is a column-based storage format for Hadoop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;列式存储&lt;/h1&gt;
&lt;p&gt;列式存储的优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以跳过不符合条件的数据,只读取需要的数据,降低IO数据&lt;/li&gt;
&lt;li&gt;压缩编码可以降低磁盘的存储空间.同一列数据类型是一样的,可以使用更有效的压缩编码,（例如Run Length Encoding和Delta Encoding）进一步节约存储空间。&lt;/li&gt;
&lt;li&gt;只读取需要的列,支持向量运算,能够获取更好的扫描性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;项目组成&lt;/h1&gt;
&lt;p&gt;Parquet项目由以下几个子项目组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parquet-format&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;项目由java实现,定义了所有Parquet元数据对象,Parquet的元数据使用Apache Thrift进行序列化并存储在Parquet文件的尾部,该模块实现了读写Parquet文件的功能,并且提供了一些和其他组件适配的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Parquet-compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;包含不同编程语言之间(JAVA和C/C++)读写文件的测试代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Parquet-cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;用于读写Parquet文件的C++库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cloudera.com/documentation/enterprise/5-6-x/topics/cdh_ig_parquet.html#parquet_format"&gt;在Impala,Hive,Pig,HBASE和Mapreduce中使用Parquet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/yu616568/article/details/50993491"&gt;新一代列式存储格式Parquet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/sundujing/article/details/51438306"&gt;Spark SQL下的Parquet使用最佳实践和代码实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/in-depth-analysis-of-parquet-column-storage-format"&gt;深入分析Parquet列式存储格式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="parquet"></category><category term="bigdata"></category></entry><entry><title>Storm介绍(一)</title><link href="xixuebin.github.io/bigdata-storm-date-2017-12-05-1520-ch,%20java.html" rel="alternate"></link><published>2017-12-05T15:20:53+08:00</published><updated>2017-12-05T15:20:53+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-05:xixuebin.github.io/bigdata-storm-date-2017-12-05-1520-ch, java.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Storm介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Storm是一个免费并开源的分布式实时计算系统。利用Storm可以很容易做到可靠地处理无限的数据流，像Hadoop批量处理大数据一样，Storm可以实时处理数据。Storm简单，可以使用任何编程语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Storm之前，进行实时处理是非常痛苦的事情: 需要维护一堆消息队列和消费者，他们构成了非常复杂的图结构。消费者进程从队列里取消息，处理完成后，去更新数据库，或者给其他队列发新消息。&lt;/p&gt;
&lt;p&gt;这样进行实时处理是非常痛苦的。我们主要的时间都花在关注往哪里发消息，从哪里接收消息，消息如何序列化，真正的业务逻辑只占了源代码的一小部分。一个应用程序的逻辑运行在很多worker上，但这些worker需要各自单独部署，还需要部署消息队列。最大问题是系统很脆弱，而且不是容错的：需要自己保证消息队列和worker进程工作正常。&lt;/p&gt;
&lt;p&gt;Storm完整地解决了这些问题。它是为分布式场景而生的，抽象了消息传递，会自动地在集群机器上并发地处理流式计算，让你专注于实时处理的业务逻辑。&lt;/p&gt;
&lt;h1&gt;Storm的特点&lt;/h1&gt;
&lt;p&gt;storm有如下特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程简单: 开发人员只需要关注应用逻辑，而且跟Hadoop类似，Storm提供的编程原语也很简单&lt;/li&gt;
&lt;li&gt;高性能，低延迟：可以应用于广告搜索引擎这种要求对广告主的操作进行实时响应的场景。&lt;/li&gt;
&lt;li&gt;分布式：可以轻松应对数据量大，单机搞不定的场景&lt;/li&gt;
&lt;li&gt;可扩展：随着业务发展，数据量和计算量越来越大，系统可水平扩展&lt;/li&gt;
&lt;li&gt;容错：单个节点挂了不影响应用&lt;/li&gt;
&lt;li&gt;消息不丢失：保证消息处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;注意内容&lt;/h1&gt;
&lt;p&gt;Storm不是一个完整的解决方案,使用storm需要关注几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用自己的消息队列,需要加入消息队列做数据的来源和产出的代码&lt;/li&gt;
&lt;li&gt;需要考虑如何做故障处理&lt;/li&gt;
&lt;li&gt;需要考虑如何做消息回退&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Storm应用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Storm有很多应用：实时分析，在线机器学习(online machine learning)，连续计算(continuous computation)，分布式远程过程调用(RPC)、ETL等。Storm处理速度很快：每个节点每秒钟可以处理超过百万的数据组。它是可扩展(scalable)，容错(fault-tolerant)，保证你的数据会被处理，并且很容易搭建和操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Storm模型&lt;/h1&gt;
&lt;p&gt;Storm实现了一个数据流(data flow)的模型,在这个模型中数据持续不断的流经一个由很多转换实体构成的网络.一个数据流的抽象叫做流(stream),流是无限的元组(Tuple)序列.元组是一个可以表示标准数据类型和用户自定义类型的数据结构,每一个流由唯一的ID来标识.这个ID可以用来构建拓扑中各个组件的数据源.&lt;/p&gt;
&lt;h1&gt;并发模型(worker/executor/task)&lt;/h1&gt;
&lt;p&gt;在一个Storm集群中.Storm主要通过以下三个部件来运行拓扑&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工作进程(worker processes)&lt;/li&gt;
&lt;li&gt;执行器(executors)&lt;/li&gt;
&lt;li&gt;任务(task)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;work,exexutors,task的相关关系&lt;/p&gt;
&lt;p&gt;&lt;img alt="https://s1.ax1x.com/2017/12/07/TCUEt.png" src="https://s1.ax1x.com/2017/12/07/TCUEt.png"&gt;&lt;/p&gt;
&lt;p&gt;在Worker中运行的是拓扑的一个子集.一个worker进程是从属于某一个特定的拓扑,在一个worker进程中会运行一个或多个与拓扑中组件相关的exector.一个运行中的拓扑就是由这些运行与storm集群的很多机器上的进程组成的.&lt;/p&gt;
&lt;p&gt;一个executor是由worker进成上的一个线程,在executor中可能会有一个或者多个task,这些task都是为同一个组件(spout或者blot)服务的.&lt;/p&gt;
&lt;p&gt;task是实际执行数据处理的最小工作单元(task不是线程).代码中实现的每一个spout或者blot都会在集群中运行很多task.在拓扑的整个生命周期中,每个task的数量保持不变,不过每个组件的executor数量有可能会随着时间变化.在默认情况下task数量和executor的数量是一样的.默认情况下Storm会在一个线程上运行一个task&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;topologyBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBolt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;green-bolt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GreenBolt&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNumTasks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shuffleGrouping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;spout&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的代码中,我们为&lt;code&gt;GreenBolt&lt;/code&gt;配置了2个初始线程(executor)和4个关联任务(task).这样,每一个执行线程中会运行2个任务.如果在设置blot的时候不指定task数量,那么每个executor和task的数量默认设置为1.&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://weyo.me/pages/techs/storm-translations-understanding-the-parallelism-of-a-storm-topology/"&gt;Storm 官方文档翻译(6) —— 理解 Storm 拓扑的并行度(parallelism)概念&lt;/a&gt;&lt;/p&gt;</content><category term="storm"></category><category term="bigdata"></category></entry><entry><title>Superset</title><link href="xixuebin.github.io/superset-2017-12-04-1748-ch.html" rel="alternate"></link><published>2017-12-04T17:48:43+08:00</published><updated>2017-12-04T17:48:43+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-04:xixuebin.github.io/superset-2017-12-04-1748-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;Superset部署开发&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Create source env &lt;code&gt;virtualenv superset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;install yarn&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo
sudo yum install yarn
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;编译
   每次前端页面修改的时候,都要重新编译前端&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#assuming $SUPERSET_HOME as the root of the repo&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$SUPERSET_HOME&lt;/span&gt;/superset/assets
yarn run sync-backend
yarn run prod
yarn run build
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py bdist_egg
easy_install superset-0.21.0.dev0-py2.egg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开发模式&lt;/h2&gt;
&lt;p&gt;开发者模式运行的时候,代码的改变会直接应用部署,无需重启服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  PycharmProjects &lt;span class="nb"&gt;source&lt;/span&gt; virtual_env/superset/bin/activate

&lt;span class="o"&gt;(&lt;/span&gt;superset&lt;span class="o"&gt;)&lt;/span&gt;➜  superset git:&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.250-dev&lt;span class="o"&gt;)&lt;/span&gt; ✗ superset runserver -d  -p &lt;span class="m"&gt;8088&lt;/span&gt;
-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;
Starting Superset server in DEBUG mode
-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="m"&gt;2017&lt;/span&gt;-12-22 &lt;span class="m"&gt;11&lt;/span&gt;:57:21,159:INFO:werkzeug: * Running on http://0.0.0.0:8088/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-12-22 &lt;span class="m"&gt;11&lt;/span&gt;:57:21,161:INFO:werkzeug: * Restarting with stat
-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;
Starting Superset server in DEBUG mode
-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;-&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="m"&gt;2017&lt;/span&gt;-12-22 &lt;span class="m"&gt;11&lt;/span&gt;:57:23,401:WARNING:werkzeug: * Debugger is active!
&lt;span class="m"&gt;2017&lt;/span&gt;-12-22 &lt;span class="m"&gt;11&lt;/span&gt;:57:23,419:INFO:werkzeug: * Debugger PIN: &lt;span class="m"&gt;128&lt;/span&gt;-625-238
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用superset完成slice参数化分享&lt;/h1&gt;
&lt;p&gt;Superset本身支持分享功能,使用短连接或这个slice url可以将slice嵌入其他的页面,该种分享不支持参数传递,不支持安全校验.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Superset改造:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持slice的参数化分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我们的业务中,我们需要将slice分享到我们的业务系统中,根据不同业务系统员的权限不同,看到的数据应该需要不同,这样就需要分享出去的slice需要携带一些参数,用于动态的生成slice图表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持安全校验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分享出去的slice Url需要添加token校验&lt;/p&gt;
&lt;p&gt;目前这块的做法是新建一个share请求路径,改请求可以生成slice的share url,所有对于share路径的请求都会有token校验.校验之后生成进行slice渲染.目前该功能已经正常运行,满足线上需求.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求结果预处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用superset的时候,我们需要对查询结果做一些预处理,以便以更好地方式显示到前端页面上.&lt;/p&gt;</content><category term="superset"></category></entry><entry><title>Kafka背景及架构介绍</title><link href="xixuebin.github.io/kafka-01-2017-12-04-1550-ch.html" rel="alternate"></link><published>2017-12-04T15:50:01+08:00</published><updated>2017-12-04T15:50:01+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-12-04:xixuebin.github.io/kafka-01-2017-12-04-1550-ch.html</id><summary type="html">&lt;p&gt;Kafka介绍&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#%E6%91%98%E8%A6%81"&gt;摘要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kafka%E7%AE%80%E4%BB%8B"&gt;Kafka简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F"&gt;为何使用消息系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kafka%E6%9E%B6%E6%9E%84"&gt;Kafka架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E8%BF%87%E6%9C%9F%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86"&gt;过期数据清理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#%E5%88%A0%E9%99%A4"&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%8E%8B%E7%BC%A9"&gt;压缩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0"&gt;相关参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;摘要&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka是由LinkedIn开发并开源的分布式消息系统，因其分布式及高吞吐率而被广泛使用，现已与Cloudera Hadoop，Apache Storm，Apache Spark集成。本文介绍了Kafka的创建背景，设计目标，使用消息系统的优势以及目前流行的消息系统对比。并介绍了Kafka的架构，Producer消息路由，Consumer Group以及由其实现的不同消息分发方式，Topic &amp;amp; Partition，最后介绍了Kafka Consumer为何使用pull模式以及Kafka提供的三种delivery guarantee。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Kafka简介&lt;/h2&gt;
&lt;p&gt;kafka是一种分布式的,基于发布/订阅的消息系统.主要的设计目标如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以时间复杂度为O(1)的方式提供消息持久化能力,即使对TB级以上数据也能保证常数时间复杂度的性能访问.&lt;/li&gt;
&lt;li&gt;高吞吐率.即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上的消息传输&lt;/li&gt;
&lt;li&gt;支持Kafka Server 间的消息分区,及分布式消费,同时保证每个Partition内的消息顺序传输&lt;/li&gt;
&lt;li&gt;支持离线数处理和实时数据处理&lt;/li&gt;
&lt;li&gt;Scala out. 支持在线水平扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;为何使用消息系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解耦&lt;/li&gt;
&lt;li&gt;冗余&lt;/li&gt;
&lt;li&gt;扩展性&lt;/li&gt;
&lt;li&gt;灵活性 &amp;amp; 峰值处理能力&lt;/li&gt;
&lt;li&gt;可恢复性&lt;/li&gt;
&lt;li&gt;顺序保证&lt;/li&gt;
&lt;li&gt;缓冲&lt;/li&gt;
&lt;li&gt;异步通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Kafka架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Borker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka集群包含一个或多个服务器,这种服务器被称为Broker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每条发布到Kafka集群的消息都有一个类别,这个类别被称为Topic(物理上不同的Topic的消息分开存储,逻辑上一个Topic的消息虽然保存于一个或多个broker上,但是用户只需要指定消息的Topic即可产生或消费数据而不必关心数据存储何处)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Partition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Partition是物理上的概念,每一个Topic包含一个或多个Partition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;负责发送消息到Kafka broker上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consumer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息消费者,向Kafka broker读取消息的客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consumer Group&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个Consumer属于一个特定的Consumer Group(可以为每一个Consumer指定Group name,若不指定 group name 则属于默认的group)&lt;/p&gt;
&lt;p&gt;一个典型的Kafka集群包含若干个Producer(可以是Web端产生的Page View 或者是服务器日志,系统CPU,Memory等)若干个broker(Kafka支持水平扩展,一般broker数量越多,集群吞吐率越高).若干个Consumer Group 以及一个Zookeeper集群.Kafka 通过Zookeeper管理集群配置,选举Leader,以及在Consumer Group发生变化的时候进行rebalance. Producer 使用push模式将消息发布到broker,Consumer 使用pull模式从Broker订阅并消费消息.&lt;/p&gt;
&lt;h2&gt;过期数据清理&lt;/h2&gt;
&lt;p&gt;Kafka将数据持久化到了硬盘上,允许配置一定的策略对数据进行清理.清理策略有两个&lt;strong&gt;删除&lt;/strong&gt;和&lt;strong&gt;压缩&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;删除&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;log.cleanup.policy=delete&lt;/code&gt;启用删除策略,直接删除，删除后的消息不可恢复。可配置以下两个策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清理超过指定时间的时间清理&lt;code&gt;log.retention.hour=16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;超过指定大小后,删除就消息&lt;code&gt;log.retention.bytes=1073741824&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了避免在删除时候阻塞读写操作,采用&lt;strong&gt;copy-on-write&lt;/strong&gt;的形式实现.&lt;/p&gt;
&lt;h3&gt;压缩&lt;/h3&gt;
&lt;p&gt;将数据压缩，只保留每个key最后一个版本的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在broker中配置&lt;code&gt;log.cleaner.enable=true&lt;/code&gt;启用cleaner,默认是关闭的&lt;/li&gt;
&lt;li&gt;在topic中设置&lt;code&gt;log.cleanup.policy=compact&lt;/code&gt;启用压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;压缩策略支持删除,当某个Key的最新版本没有消息内容时,这个Key将被删除&lt;/p&gt;
&lt;h2&gt;相关参数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;############################ System #############################&lt;/span&gt;

&lt;span class="c1"&gt;#唯一标识在集群中的ID，要求是正数。&lt;/span&gt;
broker.id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c1"&gt;#服务端口，默认9092&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9092&lt;/span&gt;
&lt;span class="c1"&gt;#监听地址，不设为所有地址&lt;/span&gt;
host.name&lt;span class="o"&gt;=&lt;/span&gt;debugo01

&lt;span class="c1"&gt;# 处理网络请求的最大线程数&lt;/span&gt;
num.network.threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# 处理磁盘I/O的线程数&lt;/span&gt;
num.io.threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="c1"&gt;# 一些后台线程数&lt;/span&gt;
background.threads &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# 等待IO线程处理的请求队列最大数&lt;/span&gt;
queued.max.requests &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;

&lt;span class="c1"&gt;#  socket的发送缓冲区（SO_SNDBUF）&lt;/span&gt;
socket.send.buffer.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;
&lt;span class="c1"&gt;# socket的接收缓冲区 (SO_RCVBUF)&lt;/span&gt;
socket.receive.buffer.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;
&lt;span class="c1"&gt;# socket请求的最大字节数。为了防止内存溢出，message.max.bytes必然要小于&lt;/span&gt;
socket.request.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;104857600&lt;/span&gt;

&lt;span class="c1"&gt;############################# Topic #############################&lt;/span&gt;
&lt;span class="c1"&gt;# 每个topic的分区个数，更多的partition会产生更多的segment file&lt;/span&gt;
num.partitions&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# 是否允许自动创建topic ，若是false，就需要通过命令创建topic&lt;/span&gt;
auto.create.topics.enable &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;# 一个topic ，默认分区的replication个数 ，不能大于集群中broker的个数。&lt;/span&gt;
default.replication.factor &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# 消息体的最大大小，单位是字节&lt;/span&gt;
message.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1000000&lt;/span&gt;

&lt;span class="c1"&gt;############################# ZooKeeper #############################&lt;/span&gt;
&lt;span class="c1"&gt;# Zookeeper quorum设置。如果有多个使用逗号分割&lt;/span&gt;
zookeeper.connect&lt;span class="o"&gt;=&lt;/span&gt;debugo01:2181,debugo02,debugo03
&lt;span class="c1"&gt;# 连接zk的超时时间&lt;/span&gt;
zookeeper.connection.timeout.ms&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000000&lt;/span&gt;
&lt;span class="c1"&gt;# ZooKeeper集群中leader和follower之间的同步实际&lt;/span&gt;
zookeeper.sync.time.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2000&lt;/span&gt;

&lt;span class="c1"&gt;############################# Log #############################&lt;/span&gt;
&lt;span class="c1"&gt;#日志存放目录，多个目录使用逗号分割&lt;/span&gt;
log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/var/log/kafka

&lt;span class="c1"&gt;# 当达到下面的消息数量时，会将数据flush到日志文件中。默认10000&lt;/span&gt;
&lt;span class="c1"&gt;#log.flush.interval.messages=10000&lt;/span&gt;
&lt;span class="c1"&gt;# 当达到下面的时间(ms)时，执行一次强制的flush操作。interval.ms和interval.messages无论哪个达到，都会flush。默认3000ms&lt;/span&gt;
&lt;span class="c1"&gt;#log.flush.interval.ms=1000&lt;/span&gt;
&lt;span class="c1"&gt;# 检查是否需要将日志flush的时间间隔&lt;/span&gt;
log.flush.scheduler.interval.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;

&lt;span class="c1"&gt;# 日志清理策略（delete|compact）&lt;/span&gt;
log.cleanup.policy &lt;span class="o"&gt;=&lt;/span&gt; delete
&lt;span class="c1"&gt;# 日志保存时间 (hours|minutes)，默认为7天（168小时）。超过这个时间会根据policy处理数据。bytes和minutes无论哪个先达到都会触发。&lt;/span&gt;
log.retention.hours&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;168&lt;/span&gt;
&lt;span class="c1"&gt;# 日志数据存储的最大字节数。超过这个时间会根据policy处理数据。&lt;/span&gt;
&lt;span class="c1"&gt;#log.retention.bytes=1073741824&lt;/span&gt;

&lt;span class="c1"&gt;# 控制日志segment文件的大小，超出该大小则追加到一个新的日志segment文件中（-1表示没有限制）&lt;/span&gt;
log.segment.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;536870912&lt;/span&gt;
&lt;span class="c1"&gt;# 当达到下面时间，会强制新建一个segment&lt;/span&gt;
log.roll.hours &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;*7
&lt;span class="c1"&gt;# 日志片段文件的检查周期，查看它们是否达到了删除策略的设置（log.retention.hours或log.retention.bytes）&lt;/span&gt;
log.retention.check.interval.ms&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60000&lt;/span&gt;

&lt;span class="c1"&gt;# 是否开启压缩&lt;/span&gt;
log.cleaner.enable&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="c1"&gt;# 对于压缩的日志保留的最长时间&lt;/span&gt;
log.cleaner.delete.retention.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; day

&lt;span class="c1"&gt;# 对于segment日志的索引文件大小限制&lt;/span&gt;
log.index.size.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="c1"&gt;#y索引计算的一个缓冲区，一般不需要设置。&lt;/span&gt;
log.index.interval.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4096&lt;/span&gt;

&lt;span class="c1"&gt;############################# replica #############################&lt;/span&gt;
&lt;span class="c1"&gt;# partition management controller 与replicas之间通讯的超时时间&lt;/span&gt;
controller.socket.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30000&lt;/span&gt;
&lt;span class="c1"&gt;# controller-to-broker-channels消息队列的尺寸大小&lt;/span&gt;
controller.message.queue.size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;# replicas响应leader的最长等待时间，若是超过这个时间，就将replicas排除在管理之外&lt;/span&gt;
replica.lag.time.max.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;span class="c1"&gt;# 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker&lt;/span&gt;
controlled.shutdown.enable &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="c1"&gt;# 控制器关闭的尝试次数&lt;/span&gt;
controlled.shutdown.max.retries &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;# 每次关闭尝试的时间间隔&lt;/span&gt;
controlled.shutdown.retry.backoff.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;

&lt;span class="c1"&gt;# 如果relicas落后太多,将会认为此partition relicas已经失效。而一般情况下,因为网络延迟等原因,总会导致replicas中消息同步滞后。如果消息严重滞后,leader将认为此relicas网络延迟较大或者消息吞吐能力有限。在broker数量较少,或者网络不足的环境中,建议提高此值.&lt;/span&gt;
replica.lag.max.messages &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4000&lt;/span&gt;
&lt;span class="c1"&gt;#leader与relicas的socket超时时间&lt;/span&gt;
replica.socket.timeout.ms&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; * &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="c1"&gt;# leader复制的socket缓存大小&lt;/span&gt;
replica.socket.receive.buffer.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="c1"&gt;# replicas每次获取数据的最大字节数&lt;/span&gt;
replica.fetch.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="c1"&gt;# replicas同leader之间通信的最大等待时间，失败了会重试&lt;/span&gt;
replica.fetch.wait.max.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;
&lt;span class="c1"&gt;# 每一个fetch操作的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会等待直到数据达到这个大小&lt;/span&gt;
replica.fetch.min.bytes &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# leader中进行复制的线程数，增大这个数值会增加relipca的IO&lt;/span&gt;
num.replica.fetchers &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# 每个replica将最高水位进行flush的时间间隔&lt;/span&gt;
replica.high.watermark.checkpoint.interval.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;

&lt;span class="c1"&gt;# 是否自动平衡broker之间的分配策略&lt;/span&gt;
auto.leader.rebalance.enable &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="c1"&gt;# leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡&lt;/span&gt;
leader.imbalance.per.broker.percentage &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;# 检查leader是否不平衡的时间间隔&lt;/span&gt;
leader.imbalance.check.interval.seconds &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;
&lt;span class="c1"&gt;# 客户端保留offset信息的最大空间大小&lt;/span&gt;
offset.metadata.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt;

&lt;span class="c1"&gt;#############################Consumer #############################&lt;/span&gt;
&lt;span class="c1"&gt;# Consumer端核心的配置是group.id、zookeeper.connect&lt;/span&gt;
&lt;span class="c1"&gt;# 决定该Consumer归属的唯一组ID，By setting the same group id multiple processes indicate that they are all part of the same consumer group.&lt;/span&gt;
group.id
&lt;span class="c1"&gt;# 消费者的ID，若是没有设置的话，会自增&lt;/span&gt;
consumer.id
&lt;span class="c1"&gt;# 一个用于跟踪调查的ID ，最好同group.id相同&lt;/span&gt;
client.id &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;group_id&amp;gt;

&lt;span class="c1"&gt;# 对于zookeeper集群的指定，必须和broker使用同样的zk配置&lt;/span&gt;
zookeeper.connect&lt;span class="o"&gt;=&lt;/span&gt;debugo01:2182,debugo02:2182,debugo03:2182
&lt;span class="c1"&gt;# zookeeper的心跳超时时间，超过这个时间就认为是无效的消费者&lt;/span&gt;
zookeeper.session.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6000&lt;/span&gt;
&lt;span class="c1"&gt;# zookeeper的等待连接时间&lt;/span&gt;
zookeeper.connection.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6000&lt;/span&gt;
&lt;span class="c1"&gt;# zookeeper的follower同leader的同步时间&lt;/span&gt;
zookeeper.sync.time.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2000&lt;/span&gt;
&lt;span class="c1"&gt;# 当zookeeper中没有初始的offset时，或者超出offset上限时的处理方式 。&lt;/span&gt;
&lt;span class="c1"&gt;# smallest ：重置为最小值&lt;/span&gt;
&lt;span class="c1"&gt;# largest:重置为最大值&lt;/span&gt;
&lt;span class="c1"&gt;# anything else：抛出异常给consumer&lt;/span&gt;
auto.offset.reset &lt;span class="o"&gt;=&lt;/span&gt; largest
/*
kafka + zookeeper,当消息被消费时,会向zk提交当前groupId的consumer消费的offset信息,当consumer再次启动将会从此offset开始继续消费.

在consumter端配置文件中&lt;span class="o"&gt;(&lt;/span&gt;或者是ConsumerConfig类参数&lt;span class="o"&gt;)&lt;/span&gt;有个&lt;span class="s2"&gt;&amp;quot;autooffset.reset&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;在kafka &lt;span class="m"&gt;0&lt;/span&gt;.8版本中为auto.offset.reset&lt;span class="o"&gt;)&lt;/span&gt;,有2个合法的值&lt;span class="s2"&gt;&amp;quot;largest&amp;quot;&lt;/span&gt;/&lt;span class="s2"&gt;&amp;quot;smallest&amp;quot;&lt;/span&gt;,默认为&lt;span class="s2"&gt;&amp;quot;largest&amp;quot;&lt;/span&gt;,此配置参数表示当此groupId下的消费者,在ZK中没有offset值时&lt;span class="o"&gt;(&lt;/span&gt;比如新的groupId,或者是zk数据被清空&lt;span class="o"&gt;)&lt;/span&gt;,consumer应该从哪个offset开始消费.
&lt;span class="m"&gt;1&lt;/span&gt;、largest表示接受接收最大的offset&lt;span class="o"&gt;(&lt;/span&gt;即最新消息&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="m"&gt;2&lt;/span&gt;、smallest表示最小offset,即从topic的开始位置消费所有消息.
*/

&lt;span class="c1"&gt;# socket的超时时间，实际的超时时间为max.fetch.wait + socket.timeout.ms.&lt;/span&gt;
socket.timeout.ms&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; * &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="c1"&gt;# socket的接收缓存空间大小&lt;/span&gt;
socket.receive.buffer.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="c1"&gt;#从每个分区fetch的消息大小限制&lt;/span&gt;
fetch.message.max.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;

&lt;span class="c1"&gt;# true时，Consumer会在消费消息后将offset同步到zookeeper，这样当Consumer失败后，新的consumer就能从zookeeper获取最新的offset&lt;/span&gt;
auto.commit.enable &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;   ，项目里用false 不知道是什么原因
&lt;span class="c1"&gt;# 自动提交的时间间隔&lt;/span&gt;
auto.commit.interval.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;1000&lt;/span&gt;

&lt;span class="c1"&gt;# 用于消费的最大数量的消息块缓冲大小，每个块可以等同于fetch.message.max.bytes中数值&lt;/span&gt;
queued.max.message.chunks &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# 当有新的consumer加入到group时,将尝试reblance,将partitions的消费端迁移到新的consumer中, 该设置是尝试的次数&lt;/span&gt;
rebalance.max.retries &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# 每次reblance的时间间隔&lt;/span&gt;
rebalance.backoff.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2000&lt;/span&gt;
&lt;span class="c1"&gt;# 每次重新选举leader的时间&lt;/span&gt;
refresh.leader.backoff.ms

&lt;span class="c1"&gt;# server发送到消费端的最小数据，若是不满足这个数值则会等待直到满足指定大小。默认为1表示立即接收。&lt;/span&gt;
fetch.min.bytes &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# 若是不满足fetch.min.bytes时，等待消费端请求的最长等待时间&lt;/span&gt;
fetch.wait.max.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 如果指定时间内没有新消息可用于消费，就抛出异常，默认-1表示不受限&lt;/span&gt;
consumer.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; -1

&lt;span class="c1"&gt;#############################Producer#############################&lt;/span&gt;
&lt;span class="c1"&gt;# 核心的配置包括：&lt;/span&gt;
&lt;span class="c1"&gt;# metadata.broker.list&lt;/span&gt;
&lt;span class="c1"&gt;# request.required.acks&lt;/span&gt;
&lt;span class="c1"&gt;# producer.type&lt;/span&gt;
&lt;span class="c1"&gt;# serializer.class&lt;/span&gt;

&lt;span class="c1"&gt;# 消费者获取消息元信息(topics, partitions and replicas)的地址,配置格式是：host1:port1,host2:port2，也可以在外面设置一个vip&lt;/span&gt;
metadata.broker.list

&lt;span class="c1"&gt;#消息的确认模式&lt;/span&gt;
&lt;span class="c1"&gt;# 0：不保证消息的到达确认，只管发送，低延迟但是会出现消息的丢失，在某个server失败的情况下，有点像TCP&lt;/span&gt;
&lt;span class="c1"&gt;# 1：发送消息，并会等待leader 收到确认后，一定的可靠性&lt;/span&gt;
&lt;span class="c1"&gt;# -1：发送消息，等待leader收到确认，并进行复制操作后，才返回，最高的可靠性&lt;/span&gt;
request.required.acks &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# 消息发送的最长等待时间&lt;/span&gt;
request.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;span class="c1"&gt;# socket的缓存大小&lt;/span&gt;
send.buffer.bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;*1024
&lt;span class="c1"&gt;# key的序列化方式，若是没有设置，同serializer.class&lt;/span&gt;
key.serializer.class
&lt;span class="c1"&gt;# 分区的策略，默认是取模&lt;/span&gt;
partitioner.class&lt;span class="o"&gt;=&lt;/span&gt;kafka.producer.DefaultPartitioner
&lt;span class="c1"&gt;# 消息的压缩模式，默认是none，可以有gzip和snappy&lt;/span&gt;
compression.codec &lt;span class="o"&gt;=&lt;/span&gt; none
&lt;span class="c1"&gt;# 可以针对默写特定的topic进行压缩&lt;/span&gt;
compressed.topics&lt;span class="o"&gt;=&lt;/span&gt;null
&lt;span class="c1"&gt;# 消息发送失败后的重试次数&lt;/span&gt;
message.send.max.retries &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;# 每次失败后的间隔时间&lt;/span&gt;
retry.backoff.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 生产者定时更新topic元信息的时间间隔 ，若是设置为0，那么会在每个消息发送后都去更新数据&lt;/span&gt;
topic.metadata.refresh.interval.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt; * &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="c1"&gt;# 用户随意指定，但是不能重复，主要用于跟踪记录消息&lt;/span&gt;
client.id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 异步模式下缓冲数据的最大时间。例如设置为100则会集合100ms内的消息后发送，这样会提高吞吐量，但是会增加消息发送的延时&lt;/span&gt;
queue.buffering.max.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;
&lt;span class="c1"&gt;# 异步模式下缓冲的最大消息数，同上&lt;/span&gt;
queue.buffering.max.messages &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;span class="c1"&gt;# 异步模式下，消息进入队列的等待时间。若是设置为0，则消息不等待，如果进入不了队列，则直接被抛弃&lt;/span&gt;
queue.enqueue.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; -1
&lt;span class="c1"&gt;# 异步模式下，每次发送的消息数，当queue.buffering.max.messages或queue.buffering.max.ms满足条件之一时producer会触发发送。&lt;/span&gt;
batch.num.messages&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jasongj.com/2015/03/10/KafkaColumn1/"&gt;http://www.jasongj.com/2015/03/10/KafkaColumn1/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="kafka"></category></entry><entry><title>GIT</title><link href="xixuebin.github.io/git-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/git-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;GIT常用命令&lt;/h1&gt;
&lt;h2&gt;远程仓库命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;检出远程仓库 &lt;code&gt;git clone git://github/jquery/jquery.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看远程仓库 &lt;code&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加远程仓库 &lt;code&gt;git remote add [name] [url]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除远程仓库 &lt;code&gt;git remote rm [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改远程仓库 &lt;code&gt;git remote set-url --push[name][newUrl]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拉取远程仓库 &lt;code&gt;git pull [remoteName][localBranchName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推送远程仓库 &lt;code&gt;git push [remoteName][localBranchName]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Git重置到固定版本&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset --soft 83ab9932edbe2b78f88668b7d15061747bb5514f
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Git PUSH TAG&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin &lt;span class="m"&gt;4&lt;/span&gt;.3.2 //push tag &lt;span class="m"&gt;4&lt;/span&gt;.3.2 到远程
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>Google Gunice</title><link href="xixuebin.github.io/google-gunice-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/google-gunice-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-guice"&gt;Google Guice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#guice%E6%A6%82%E8%BF%B0"&gt;Guice概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice%E7%89%B9%E7%82%B9"&gt;Guice特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5"&gt;最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice%E6%96%87%E6%A1%A3"&gt;Guice文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guice-vs-spring"&gt;Guice vs Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Google Guice&lt;/h1&gt;
&lt;p&gt;Guice是google开源的一个依赖注入类库,相比Spring Ioc来说更小更快,Elasticsearch,Druid大量使用了Guice.&lt;/p&gt;
&lt;h2&gt;Guice概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Guice是google开源的依赖注入类库,通过Guice减少了对工厂方法和new的使用,使得代码更容易交付,测试和重用&lt;/li&gt;
&lt;li&gt;Guice可以帮助我们更好地设计API,它是一个轻量级的非侵入式的类库&lt;/li&gt;
&lt;li&gt;对开发友好,当异常发生的时候能提供更多有用的信息用于分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注入定义简单&lt;/li&gt;
&lt;li&gt;支持多种注入方式&lt;/li&gt;
&lt;li&gt;可扩展&lt;/li&gt;
&lt;li&gt;效率高&lt;/li&gt;
&lt;li&gt;自定义注解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最佳实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最小化可变性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;尽可能注入的是不可变对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只注入直接依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不用注入一个实例来获取真正需要的实例,增加复杂性且不易测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;避免循环依赖&lt;/li&gt;
&lt;li&gt;避免静态状态&lt;/li&gt;
&lt;li&gt;采用@Nullable&lt;/li&gt;
&lt;li&gt;模块的处理必须要快并且无副作用&lt;/li&gt;
&lt;li&gt;在Providers绑定中当心IO问题&lt;/li&gt;
&lt;li&gt;不用在模块中处理分支模块&lt;/li&gt;
&lt;li&gt;尽可能不要暴露构造器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/guice/wiki/Motivation"&gt;用户指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://google.github.io/guice/api-docs/4.0/javadoc/index.html"&gt;最新版API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hBVJbzAagfs"&gt;Bob Lee视频教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Guice vs Spring&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="left"&gt;Spring&lt;/th&gt;
&lt;th align="left"&gt;Guice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;使用xml&lt;/td&gt;
&lt;td align="left"&gt;使用将类与类之间的关系隔离到xml中，由容器负责注入被调用的对象，因此叫做依赖注入&lt;/td&gt;
&lt;td align="left"&gt;不使用xml,将类与类之间的关系隔离到Module中，声名何处需要注入，由容器根据Module里的描述，注入被调用的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;使用Annotation&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;使用支持自定义Annotation标注，对于相同的接口定义的对象引用，为它们标注上不同的自定义Annotation注释，就可以达到同一个类里边的同一个接口的引用，注射给不同的实现，在Module里用标注做区分，灵活性大大增加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;运行效率&lt;/td&gt;
&lt;td align="left"&gt;装载spring配置文件时，需解析xml，效率低，getBean效率也不高，不过使用环境不会涉及到getBean，只有生产环境的时候会用到getBean,在装载spring应用程序的时候，已经完成全部的注射，所以这个低效率的问题不是问题&lt;/td&gt;
&lt;td align="left"&gt;使用Annotation，cglib, 效率高与spring最明显的一个区别，spring是在装载spring配置文件的时候把该注入的地方都注入完，而Guice呢，则是在使用的时候去注射，运行效率和灵活性高。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;类耦合度&lt;/td&gt;
&lt;td align="left"&gt;耦合度低，强调类非侵入，以外部化的方式处理依赖关系，类里边是很干净的，在配置文件里做文章，对类的依赖性极低。&lt;/td&gt;
&lt;td align="left"&gt;耦合度低，强调类非侵入，以外部化的方式处理依赖关系，类里边是很干净的，在配置文件里做文章，对类的依赖性极低。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;类编写时&lt;/td&gt;
&lt;td align="left"&gt;需要编写xml，配置Bean，配置注入&lt;/td&gt;
&lt;td align="left"&gt;只需声明为@inject,等着被注入,最后在统一的Module里声明注入方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;仅支持IOC&lt;/td&gt;
&lt;td align="left"&gt;否，spring目前已经涉猎很多部分&lt;/td&gt;
&lt;td align="left"&gt;是，目前仅仅是个DI容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;是否易于代码重构&lt;/td&gt;
&lt;td align="left"&gt;统一的xml配置入口，更改容易&lt;/td&gt;
&lt;td align="left"&gt;配置工作是在Module里进行，和spring异曲同功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;配置复杂度&lt;/td&gt;
&lt;td align="left"&gt;在xml中定位类与类之间的关系,难度低&lt;/td&gt;
&lt;td align="left"&gt;代码级定位类与类之间的关系,难度稍高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.it168.com/zt/guice/"&gt;http://tech.it168.com/zt/guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ginobefunny.com/post/learning_guice/"&gt;http://ginobefunny.com/post/learning_guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hao.jobbole.com/guice/"&gt;http://hao.jobbole.com/guice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greengerong/guice-demo"&gt;https://github.com/greengerong/guice-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.itpub.net/13270562/viewspace-217874/"&gt;http://blog.itpub.net/13270562/viewspace-217874/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="gunice"></category></entry><entry><title>HBase线上问题处理记录</title><link href="xixuebin.github.io/hbase-oldwals-2017-06-27-1027-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/hbase-oldwals-2017-06-27-1027-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;HBase线上问题处理记录&lt;/h1&gt;
&lt;h2&gt;Region过多&lt;/h2&gt;
&lt;p&gt;原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Region的最大值设置太小&lt;/li&gt;
&lt;li&gt;HBASE升级的时候,配置没有更新&lt;/li&gt;
&lt;li&gt;意外的配置设置&lt;/li&gt;
&lt;li&gt;分裂过多&lt;/li&gt;
&lt;li&gt;预分区不合理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HBASE oldWALs目录过大&lt;/h2&gt;
&lt;p&gt;最近升级了线上的hbase集群,一切运行良好.这两天发现集群的oldWALs目录一直在增大,与hbase的官方说法不一致.导致线上集群一直在存储报警&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;dev@ip-10-12-134-13 ~&lt;span class="o"&gt;]&lt;/span&gt;$ hadoop fs -du -h /hbase
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/.tmp
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/MasterProcWALs
&lt;span class="m"&gt;52&lt;/span&gt;.9 G   &lt;span class="m"&gt;109&lt;/span&gt;.5 G  /hbase/WALs
&lt;span class="m"&gt;103&lt;/span&gt;.6 G  &lt;span class="m"&gt;207&lt;/span&gt;.2 G  /hbase/archive
&lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        /hbase/corrupt
&lt;span class="m"&gt;56&lt;/span&gt;.2 T   &lt;span class="m"&gt;112&lt;/span&gt;.4 T  /hbase/data
&lt;span class="m"&gt;42&lt;/span&gt;       &lt;span class="m"&gt;126&lt;/span&gt;      /hbase/hbase.id
&lt;span class="m"&gt;7&lt;/span&gt;        &lt;span class="m"&gt;21&lt;/span&gt;       /hbase/hbase.version
&lt;span class="m"&gt;3&lt;/span&gt;.0 T    &lt;span class="m"&gt;5&lt;/span&gt;.9 T    /hbase/oldWALs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询了许多资料,都说跟hbase的replication有关.因为我们确实开启了hbase的replication配置.但是根据replication相关资料我确认replication只跟WALs相关,不应该会影响oldWALs,所以进行了研究.&lt;/p&gt;
&lt;p&gt;经过验证当我关闭掉replication的时候,master会去删除oldWALs目录下的文件.&lt;/p&gt;
&lt;p&gt;但是为了保证线上集群数据的安全,我们必须开启replication,这样oldWALs还是一直会变大.&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mattshma/bigdata/issues/3"&gt;HBase oldWALs 目录过大&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cloudera.com/blog/2013/10/what-are-hbase-znodes/"&gt;What are HBase znodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://community.cloudera.com/t5/Storage-Random-Access-HDFS/The-folder-hbase-s-oldWALs-is-so-large-in-CDH5-3-2-amp-CM5-3-2/td-p/35564"&gt;The folder hbase's oldWALs is so large in CDH5.3.2 &amp;amp; CM5.3.2, how to clean?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://talat.uyarer.com/post/113414182956/hbase-oldwals-directory-what-is-it-when-is-it"&gt;Hbase oldWALs directory: what is it, when is it cleaned and who use its ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="HBASE"></category><category term="BigData"></category></entry><entry><title>JAVA JMX</title><link href="xixuebin.github.io/java-jmx-2017-06-27-1027-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/java-jmx-2017-06-27-1027-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;JMX的定义&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;JMX(JAVA Management Extensions)是一个为应用程序植入管理功能的框架.JMX是一套标准的代理服务,实际上,用户可以在任何java应用程序中使用这些代理和服务实现管理.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;jmx 架构图&lt;/h2&gt;
&lt;p&gt;&lt;img alt="jmx architecture" src="/images/jmx01.png" title="jmx 架构图"&gt;&lt;/p&gt;
&lt;p&gt;jmx的结构一共分为三层:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是mbean,被管理的资源,mbean分为四种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;类型&lt;/th&gt;
&lt;th align="left"&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;standard Mbean&lt;/td&gt;
&lt;td align="left"&gt;这种类型的bean最简单,它管理的资源(包括属性,方法,时间)必须定义在接口中,然后mbean必须实现这个接口,命名必须遵循一定的规范,如mbean为hello,接口必须为HelloMbean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;dynamic Mbean&lt;/td&gt;
&lt;td align="left"&gt;必须实现javax.management.DynamiceMBean接口所有的属性,方法都在运行时候定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;open MBean&lt;/td&gt;
&lt;td align="left"&gt;此MBean的规范还在完善,正在改进中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;model MBean&lt;/td&gt;
&lt;td align="left"&gt;与标准和动态MBean相比，你可以不用写MBean类，只需使用javax.management.modelmbean.RequiredModelMBean即可。RequiredModelMBean实现了ModelMBean接口，而ModelMBean扩展了DynamicMBean接口，因此与DynamicMBean相似，Model MBean的管理资源也是在运行时定义的。与DynamicMBean不同的是，DynamicMBean管理的资源一般定义在DynamicMBean中（运行时才决定管理那些资源），而model MBean管理的资源并不在MBean中，而是在外部（通常是一个类），只有在运行时，才通过set方法将其加入到model MBean中。后面的例子会有详细介绍&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;适配层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MBeanServer,主要提供对资源的注册和管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;接入层&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;提供远程访问的入口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/dongguacai/p/5900507.html"&gt;http://www.cnblogs.com/dongguacai/p/5900507.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="jmx"></category></entry><entry><title>JAVA Solr</title><link href="xixuebin.github.io/java-solr-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/java-solr-ch.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Solr&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Solr 是一个功能强大的搜素服务器,它支持Rest风格的API.Solr是基于Lucene的.Lucene支持强大的匹配能力,如短语,通配符,链接,分组和更多不同类型的数据.它使用Zookeeper特别针对高流量进行优化.Apache Solr提供各种各式各样的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先进的全文检索功能&lt;/li&gt;
&lt;li&gt;XML,JSON和HTTP 基于开放接口标准&lt;/li&gt;
&lt;li&gt;高度课扩展和容错&lt;/li&gt;
&lt;li&gt;同时支持模式和无模式的支持&lt;/li&gt;
&lt;li&gt;分页搜索和过滤&lt;/li&gt;
&lt;li&gt;支持多种语言&lt;/li&gt;
&lt;li&gt;丰富的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install Solr&lt;/h2&gt;
&lt;p&gt;从以下位置下载最新版本的Apache Solr:
&lt;a href="http://lucene.apache.org/solr/downloads.html"&gt;http://lucene.apache.org/solr/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下载到的是solr-6.6.0版本&lt;/p&gt;
&lt;p&gt;安装的话直接解压即可,该版本需要JDK8支持&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -zxf solr-6.6.0.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apache Solr带有一个内置的Jetty服务器。但在我们开始之前，我们必须验证JAVA_HOME已经配置。&lt;/p&gt;
&lt;p&gt;启动Solr&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr# ./bin/solr start -force
Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-&lt;span class="o"&gt;]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12376&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过该地址访问
&lt;a href="http://localhost:8983/solr/"&gt;http://localhost:8983/solr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;访问截图&lt;/p&gt;
&lt;p&gt;&lt;img alt="截图" src="solr02.png Solr控制台"&gt;&lt;/p&gt;
&lt;h2&gt;Solr原理&lt;/h2&gt;
&lt;p&gt;Solr对外提供标准的HTTP接口来实现对数据索引的增加,删除,修改和查询.在Solr中,用户通过向部署在servlet容器中的Solr Web应用程序发送HTTP请求来启动索引和搜索.Solr接收请求,确定要使用的适当的SolrRequestHandler,然后处理请求.通过HTTP以同样的方式返回响应.默认配置返回Solr的标准XML响应,也可以配置Solr的备用响应格式.&lt;/p&gt;
&lt;p&gt;可以向Solr索引servlet传递四个不同的索引请求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add/update允许向Solr添加文档或者更新文档.直到提交后才能搜索到这些添加的更新&lt;/li&gt;
&lt;li&gt;commint 告诉Solr应该使上次提交以来所做的所有的更改都可以被搜索到&lt;/li&gt;
&lt;li&gt;optimize 重构Lucene的文件以改进搜索性能.索引完成周执行一下优化通常比较好&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果更新比较频繁,则应该使用频率较低的时候安排优化,一个索引无需优化也可以运行,优化是一个耗时较多的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;delete可以通过id或查询来指定.按id删除将删除具有指定id的文档;按查询删除将删除查询返回的所有的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个典型的Add请求报文&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;add&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;TWINX2048-3200PRO&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CORSAIR  XMS 2GB (2 x 1GB) 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) Dual Channel Kit System Memory - Retail&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Corsair Microsystems Inc.&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;electronics&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;memory&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CAS latency 2, 2-3-3-6 timing, 2.75v, unbuffered, heat-spreader&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;185&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popularity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inStock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;VS1GB400C3&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CORSAIR ValueSelect 1GB 184-Pin DDR SDRAM Unbuffered DDR 400 (PC 3200) System Memory - Retail&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Corsair Microsystems Inc.&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;electronics&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;memory&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;74.99&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popularity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;field&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inStock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/add&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个典型的搜索结果报文&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;response&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*,score&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hl&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;content:&amp;quot;faceted browsing&amp;quot;&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;result&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;response&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;numFound=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;start=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxScore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.058217&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;float&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1.058217&lt;span class="nt"&gt;&amp;lt;/float&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;http://localhost/myBlog/solr-rocks-again.html&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr is Great&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;solr,lucene,enterprise,search,greatness&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like faceted browsing and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like faceted browsing and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;date&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creationDate&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2007-01-07T05:04:00.000Z&lt;span class="nt"&gt;&amp;lt;/date&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;solr,lucene,enterprise,search,greatness&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;int&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rating&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/int&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Solr is Great&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://localhost/myBlog/solr-rocks-again.html&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/result&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlighting&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;lst&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost/myBlog/solr-rocks-again.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;arr&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;str&amp;gt;&lt;/span&gt;Solr has some really great features, like &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;faceted&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;browsing&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; and replication&lt;span class="nt"&gt;&amp;lt;/str&amp;gt;&lt;/span&gt;  
            &lt;span class="nt"&gt;&amp;lt;/arr&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/lst&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/response&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置Solr&lt;/h3&gt;
&lt;h4&gt;建立Core&lt;/h4&gt;
&lt;p&gt;Solr的服务器在独立模式启动下启动的配置称为核心(Core),当它在SolrCloud模式启动的配置称为集合.&lt;/p&gt;
&lt;p&gt;创建一个核心的索引数据,Slor的创建命令有以下选项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-c &lt;name&gt; 要创建核心或者集合的名称
    -d &lt;confdir&gt; 配置目录,在SolrCloud模式非常有用
    -n &lt;configName&gt; 配置名称.这将默认为核心或者集合的名称
    -p &lt;port&gt; 本地Solr实例的端口,发送create命令,默认脚本试图通过寻找运行Solr的实例来检测端口
    -s &lt;shards&gt; Number of shards to split a collection into ,default is  1
    -rf &lt;replicas&gt; 集合中每个文件的份数,default is 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在solr/bin运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr/bin# ./solr create -c jcg -d basic_configs -force

Copying configuration to new core instance directory:
/opt/solr/server/solr/jcg

Creating new core &lt;span class="s1"&gt;&amp;#39;jcg&amp;#39;&lt;/span&gt; using command:
http://localhost:8983/solr/admin/cores?action&lt;span class="o"&gt;=&lt;/span&gt;CREATE&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jcg&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;instanceDir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jcg

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
    &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:43042&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;jcg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Solr的页面上,可以看到JCG核心被填充在核心选择器上,还可以看到相关统计信息&lt;/p&gt;
&lt;h4&gt;修改Schema.xml文件&lt;/h4&gt;
&lt;p&gt;修改schema.xml，server\solr\jcg\conf包含的字段。我们将使用随Solr的安装索引附带的示例文件“books.csv”之一。该文件所在的文件夹下  的solr-5.0.0\example\exampledocs&lt;/p&gt;
&lt;p&gt;现在，我们定位到该文件夹  server\solr目录。你会看到一个名为JCG的文件夹被创建。子文件夹conf和data分别拥有核心的配置和索引的数据。&lt;/p&gt;
&lt;p&gt;现在编辑\server\solr\jcg\conf\server\solr\jcg\conf\schema.xml文件，设置唯一元素后添加以下内容。&lt;/p&gt;
&lt;h4&gt;索引数据&lt;/h4&gt;
&lt;p&gt;Apache Solr带有一个叫做SimplePostTool独立的Java程序。这个程序被打包成JAR,在安装目录下 example\exampledocs可看到。&lt;/p&gt;
&lt;p&gt;现在，我们在命令行定位到example\exampledocs文件夹，然后键入以下命令。你会看到一堆选项，使用的工具。&lt;/p&gt;
&lt;p&gt;Java -jar post.jar -h&lt;/p&gt;
&lt;p&gt;在一般的使用格式如下用途：&lt;/p&gt;
&lt;p&gt;Usage: java [SystemProperties] -jar post.jar [-h|-] [&lt;file|folder|url|arg&gt;&lt;/p&gt;
&lt;p&gt;[&lt;file|folder|url|arg&gt;...]]&lt;/p&gt;
&lt;p&gt;正如我们前面所说，我们将索引“books.csv”文件中的数据。我们将导航到solr-5.0.0\example\exampledocs在命令提示符并发出以下命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ubuntu:/opt/solr/example/exampledocs# java -Dtype&lt;span class="o"&gt;=&lt;/span&gt;text/csv -Durl&lt;span class="o"&gt;=&lt;/span&gt;http://localhost:8983/solr/jcg/update  -jar post.jar   books.csv
SimplePostTool version &lt;span class="m"&gt;5&lt;/span&gt;.0.0
Posting files to &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt; url http://localhost:8983/solr/jcg/update using content-type text/csv...
POSTing file books.csv to &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt;
SimplePostTool: WARNING: Solr returned an error &lt;span class="c1"&gt;#400 (Bad Request) for url: http://localhost:8983/solr/jcg/update&lt;/span&gt;
SimplePostTool: WARNING: Response: &amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;response&amp;gt;
&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&amp;gt;400&amp;lt;/int&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;&amp;gt;177&amp;lt;/int&amp;gt;&amp;lt;/lst&amp;gt;&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;lst &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error-class&amp;quot;&lt;/span&gt;&amp;gt;org.apache.solr.common.SolrException&amp;lt;/str&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root-error-class&amp;quot;&lt;/span&gt;&amp;gt;org.apache.solr.common.SolrException&amp;lt;/str&amp;gt;&amp;lt;/lst&amp;gt;&amp;lt;str &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&amp;gt;ERROR: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0553573403&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; unknown field &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&amp;lt;/str&amp;gt;&amp;lt;int &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&amp;gt;400&amp;lt;/int&amp;gt;&amp;lt;/lst&amp;gt;
&amp;lt;/response&amp;gt;
SimplePostTool: WARNING: IOException &lt;span class="k"&gt;while&lt;/span&gt; reading response: java.io.IOException: Server returned HTTP response code: &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; URL: http://localhost:8983/solr/jcg/update
&lt;span class="m"&gt;1&lt;/span&gt; files indexed.
COMMITting Solr index changes to http://localhost:8983/solr/jcg/update...
Time spent: &lt;span class="m"&gt;0&lt;/span&gt;:00:00.501
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;索引Solr的XML文件&lt;/h3&gt;
&lt;p&gt;Solr可以为各种输入格式的结构化数据建立索引。在历史上，将格式化内容导入Solr的主要格式就是Solr的XML格式[3]。很多的Solr索引器都可以将域内容转换为Solr的XML输出，通常支持直接提交的HTTP请求至Solr的/update端点。&lt;/p&gt;
&lt;p&gt;Solr支持示例数据中的几种Solr XML格式的文件。注意：示例中的科技产品的数据含有更加特定于域的配置，包括数据模式和浏览器界面。如果你想要bin/solr脚本提供对这种数据的内建支持，那么你可以运行&lt;code&gt;bin/solr start -e techproducts&lt;/code&gt;命令，这个命令不仅仅会启动Solr，而且还会为这些数据创建索引（在运行这个命令之前，请务必先运行&lt;code&gt;bin/solr stop -all&lt;/code&gt;命令）。然而，下面的示例假定使用&lt;code&gt;bin/solr start -e cloud&lt;/code&gt;命令来启动Solr，这样才能和本文中的所有示例保持一致，因此，示例使用的集合是“gettingstarted”，而不是“techproducts”。&lt;/p&gt;
&lt;p&gt;使用bin/post脚本，为示例的Solr XML文件创建索引，这些文件在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ubuntu@ubuntu:/opt/solr$ bin/solr start -e cloud -noprompt

Welcome to the SolrCloud example!

Starting up &lt;span class="m"&gt;2&lt;/span&gt; Solr nodes &lt;span class="k"&gt;for&lt;/span&gt; your example SolrCloud cluster.

Creating Solr home directory /opt/solr/example/cloud/node1/solr
Cloning /opt/solr/example/cloud/node1 into
   /opt/solr/example/cloud/node2

Starting up Solr on port &lt;span class="m"&gt;8983&lt;/span&gt; using command:
&lt;span class="s2"&gt;&amp;quot;/opt/solr/bin/solr&amp;quot;&lt;/span&gt; start -cloud -p &lt;span class="m"&gt;8983&lt;/span&gt; -s &lt;span class="s2"&gt;&amp;quot;/opt/solr/example/cloud/node1/solr&amp;quot;&lt;/span&gt;

Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;8983&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17115&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!


Starting up Solr on port &lt;span class="m"&gt;7574&lt;/span&gt; using command:
&lt;span class="s2"&gt;&amp;quot;/opt/solr/bin/solr&amp;quot;&lt;/span&gt; start -cloud -p &lt;span class="m"&gt;7574&lt;/span&gt; -s &lt;span class="s2"&gt;&amp;quot;/opt/solr/example/cloud/node2/solr&amp;quot;&lt;/span&gt; -z localhost:9983

Waiting up to &lt;span class="m"&gt;180&lt;/span&gt; seconds to see Solr running on port &lt;span class="m"&gt;7574&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;
Started Solr server on port &lt;span class="m"&gt;7574&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;17333&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;. Happy searching!

INFO  - &lt;span class="m"&gt;2017&lt;/span&gt;-07-06 &lt;span class="m"&gt;09&lt;/span&gt;:00:56.877&lt;span class="p"&gt;;&lt;/span&gt; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider&lt;span class="p"&gt;;&lt;/span&gt; Cluster at localhost:9983 ready

Connecting to ZooKeeper at localhost:9983 ...
INFO  - &lt;span class="m"&gt;2017&lt;/span&gt;-07-06 &lt;span class="m"&gt;09&lt;/span&gt;:00:56.997&lt;span class="p"&gt;;&lt;/span&gt; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider&lt;span class="p"&gt;;&lt;/span&gt; Cluster at localhost:9983 ready
Uploading /opt/solr/server/solr/configsets/data_driven_schema_configs/conf &lt;span class="k"&gt;for&lt;/span&gt; config gettingstarted to ZooKeeper at localhost:9983

Creating new collection &lt;span class="s1"&gt;&amp;#39;gettingstarted&amp;#39;&lt;/span&gt; using command:
http://localhost:8983/solr/admin/collections?action&lt;span class="o"&gt;=&lt;/span&gt;CREATE&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gettingstarted&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;numShards&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;replicationFactor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;maxShardsPerNode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;collection.configName&lt;span class="o"&gt;=&lt;/span&gt;gettingstarted

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
    &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:13927&lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;127.0.1.1:8983_solr&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0
        &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:12395&lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gettingstarted_shard1_replica2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;127.0.1.1:7574_solr&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:0,
        &lt;span class="s2"&gt;&amp;quot;QTime&amp;quot;&lt;/span&gt;:12408&lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gettingstarted_shard2_replica1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}}}&lt;/span&gt;

Enabling auto soft-commits with maxTime &lt;span class="m"&gt;3&lt;/span&gt; secs using the Config API

POSTing request to Config API: http://localhost:8983/solr/gettingstarted/config
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;set-property&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updateHandler.autoSoftCommit.maxTime&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
Successfully set-property updateHandler.autoSoftCommit.maxTime to &lt;span class="m"&gt;3000&lt;/span&gt;


SolrCloud example running, please visit: http://localhost:8983/solr

ubuntu@ubuntu:/opt/solr$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Solr的客户端API的&lt;/h3&gt;
&lt;p&gt;有不同的客户端API的可用来连接到Solr的服务器。我们列出了一些广泛使用的Solr客户端API的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SolRuby – To connect from Ruby&lt;/li&gt;
&lt;li&gt;SolPHP – To connect from PHP&lt;/li&gt;
&lt;li&gt;PySolr – To connect from Python&lt;/li&gt;
&lt;li&gt;SolPerl – To connect from Perl&lt;/li&gt;
&lt;li&gt;SolrJ – To connect from Java&lt;/li&gt;
&lt;li&gt;SolrSharp – To connect from C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，Solr还提供了JavaScript可以直接使用的基于REST的API。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ghoulich.xninja.org/2016/04/22/solr-quick-start/"&gt;Solr快速入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/cn/java/j-solr1/index.html"&gt;基本特性和 Solr 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java"></category><category term="solr"></category></entry><entry><title>Python Mac</title><link href="xixuebin.github.io/python-mac-ch.html" rel="alternate"></link><published>2017-06-27T10:27:02+08:00</published><updated>2017-06-27T10:27:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-06-27:xixuebin.github.io/python-mac-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h1&gt;python on mac install lib&lt;/h1&gt;
&lt;p&gt;install PIL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install http://effbot.org/media/downloads/Imaging-1.1.7.tar.gz
pip install bs4
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="mac"></category></entry><entry><title>Python Lan</title><link href="xixuebin.github.io/python-lan-2018-01-04-1153-ch.html" rel="alternate"></link><published>2017-01-04T11:53:02+08:00</published><updated>2017-01-04T11:53:02+08:00</updated><author><name>kevin.xi</name></author><id>tag:None,2017-01-04:xixuebin.github.io/python-lan-2018-01-04-1153-ch.html</id><summary type="html"></summary><content type="html">&lt;hr&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;https://www.fullstackpython.com/table-of-contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category></entry></feed>